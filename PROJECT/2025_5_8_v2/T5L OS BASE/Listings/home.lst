C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HOME
OBJECT MODULE PLACED IN .\Objects\home.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\home.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.
                    -\APP;.\PAGE) DEBUG PRINT(.\Listings\home.lst) TABS(2) OBJECT(.\Objects\home.obj)

line level    source

   1          #include  "home.h"
   2          #include "dgus.h"
   3          #include "qrj.h"
   4          #include "sz.h"
   5          
   6          #include <math.h>
   7          
   8          #include "start_win.h"
   9          uint8_t CurrentPageNum[2]={0};  //CurrentPageNum[1]是当前页面
  10          
  11          float L_M = 0.0;//距离 m
  12          //u16 Time_static_16; //静态的时间由距离得出的
  13          void Prepare_qrj_zx_qy(); //一直运行的 无论哪个状态适用与前三个模式
  14          
  15          /*********************************************************************************
  16          中心模式：求面积和直径  面积是区域模式的四分之一，直径是区域模式的二分之一
  17          区域模式：求面积和直径  
  18          气溶胶模式：求体积
  19          ********************************************************************************/
  20          float Tanx=0.4557;
  21          float pai=3.1415;
  22          float Tan_zhongxin=0.04366094;
  23          float zhongxin_35mm=0.4008159;  //=0.0175m/tan2.5
  24          
  25          float L_m_D_V_S=0.00;       //距离 单位:M
  26          float Square=0.00;      //面积 单位：M^2
  27          float D=0.00;         //直径 单位：M
  28          float Volume=0.00;          //气溶胶体积 单位：M^3
  29          
  30          
  31          //初始化各个页面
  32          void HOME_INIT()
  33          {
  34   1        QRJ_INIT();
  35   1        SZ_INIT();
  36   1        
  37   1      }
  38          
  39          
  40          
  41          u8 last_page;
  42          //放在主函数里循环执行当前页面的程序
  43          void ReadCurrentPage_run()    
  44          {
  45   1      
  46   1        
  47   1        ReadDGUS(0x14,(uint8_t *)&CurrentPageNum,sizeof(CurrentPageNum));
  48   1        switch(CurrentPageNum[1])
  49   1        {
  50   2          case Page_home: 
  51   2          {
  52   3            last_page = CurrentPageNum[1];
  53   3            current_st = 0x01;
  54   3            break;
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 2   

  55   3          }
  56   2          
  57   2          case Page_qirongjiao:
  58   2          {
  59   3            
  60   3            
  61   3          //  QRJ_prepare();
  62   3            
  63   3            Draw_chart();   //开启画图
  64   3            
  65   3            
  66   3            QRJ_Home();
  67   3            Prepare_qrj_zx_qy();
  68   3            
  69   3            break;
  70   3          }
  71   2            
  72   2          case Page_zhongxin:
  73   2          {
  74   3            
  75   3            Prepare_qrj_zx_qy();      
  76   3            
  77   3            
  78   3            break;
  79   3          }
  80   2          
  81   2          case Page_quyu:
  82   2          {
  83   3            
  84   3            Prepare_qrj_zx_qy();
  85   3            
  86   3            break;
  87   3          }
  88   2          
  89   2              
  90   2          case Page_chengxuhua:
  91   2          {
  92   3      
  93   3            break;
  94   3          }
  95   2          
  96   2              
  97   2          case Page_zhiliao:
  98   2          {
  99   3            break;
 100   3          }
 101   2          
 102   2              
 103   2          case Page_shoudong:
 104   2          {   
 105   3      
 106   3            break;
 107   3          }
 108   2                
 109   2          case Page_lianji:
 110   2          {
 111   3        
 112   3            break;
 113   3          }
 114   2          
 115   2              
 116   2          case Page_shezhi:
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 3   

 117   2          {
 118   3            SZ_Home();
 119   3            break;
 120   3          }
 121   2          
 122   2          case Page_chengxuhua_JUMP:
 123   2          {
 124   3            
 125   3            break;
 126   3          }
 127   2              
 128   2            case Page_zhiliao_JUMP:
 129   2          {
 130   3            break;
 131   3          }
 132   2          default:
 133   2          {
 134   3            
 135   3            break;
 136   3          }
 137   2          
 138   2        }
 139   1        
 140   1      }
 141          
 142          
 143          
 144          
 145          
 146          
 147          //void S_D_Surfaces_All()
 148          //{
 149          
 150          //  L_m =  (float)(L_int/1000.000)+zhongxin_35mm;
 151          //  if(W_S[0]==2)//zx
 152          //  {
 153          //  D = Tan_zhongxin*2*L_m;
 154          //  Square  = (float)(pow(L_m*Tan_zhongxin,2)*pai); 
 155          //  }
 156          //  else 
 157          //  {
 158          //  D = Tanx*2*L_m;
 159          //  Square  = (float)(pow(L_m*Tanx,2)*pai); 
 160          //  }
 161          //  Volume  = Square*L_m/3.00;
 162          //}
 163          
 164          
 165          
 166          /**************************************************
 167          距离 换算 为功率大小
 168          形参为毫米
 169          *******************************************************/
 170          //double change_P_uW=0.0; //lg change_P_uW_doing
 171          double change_P_uW_doing=0.0; //根据距离在推出的功率
 172          //double change_P_mW_First=0.0;
 173          
 174          void L_mm_TO_P_uw(u16 L_mm_TO_P,u8 current_page)    //形式参数毫米
 175          {
 176   1        u8 L_mm_TO_P_uw_FLAG=0;
 177   1        double BEISHU=0.00000;
 178   1        double L_CM;
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 4   

 179   1        double mihanshu=0.0;
 180   1        
 181   1        
 182   1        L_CM=L_mm_TO_P/10;
 183   1        
 184   1        if(L_CM<=10&& L_CM>=5) L_mm_TO_P_uw_FLAG=1;
 185   1          else  if(L_CM<=20&& L_CM>10) L_mm_TO_P_uw_FLAG=2;
 186   1            else  if(L_CM<=100&& L_CM>20) L_mm_TO_P_uw_FLAG=3;
 187   1            else  if(L_CM<=300&& L_CM>100) L_mm_TO_P_uw_FLAG=4;
 188   1              else L_mm_TO_P_uw_FLAG=5;
 189   1        
 190   1        /***66300.18x^-1.86****/
 191   1        switch(L_mm_TO_P_uw_FLAG)
 192   1        {
 193   2          case 1:
 194   2          {
 195   3            mihanshu = pow((double)(L_CM),-1.6);
 196   3            BEISHU = 36527.86*mihanshu;
 197   3            change_P_uW_doing=BEISHU;
 198   3            break;
 199   3          }
 200   2          
 201   2          
 202   2              case 2:
 203   2          {
 204   3            mihanshu = pow((double)(L_CM),-1.85);
 205   3            BEISHU = 65617.44*mihanshu;
 206   3            change_P_uW_doing=BEISHU;
 207   3            break;
 208   3          }
 209   2          
 210   2              case 3:
 211   2          {
 212   3            mihanshu = pow((double)(L_CM),-1.81);
 213   3            BEISHU = 57622.25*mihanshu;
 214   3            change_P_uW_doing=BEISHU;
 215   3            break;
 216   3          }
 217   2          
 218   2              case 4:
 219   2          {
 220   3            mihanshu = pow((double)(L_CM),-2);
 221   3            BEISHU = 139224.07*mihanshu;
 222   3            change_P_uW_doing=BEISHU;
 223   3            break;
 224   3          }
 225   2              
 226   2          default:
 227   2          {
 228   3            L_mm_TO_P_uw_FLAG=0x0a;
 229   3          }
 230   2        }
 231   1        
 232   1        if(Page_qirongjiao==current_page || Page_quyu==current_page)
 233   1        {
 234   2          change_P_uW_doing=change_P_uW_doing*0.6;  //气溶胶和区域需要乘0.6
 235   2        }
 236   1        //if(W_S[0]!=2&&MODE==1)change_P_mW_doing=change_P_mW_doing*0.6;  //气溶胶和区域需要乘0.6
 237   1      //  change_P_mW_First=change_P_mW_doing/1000;   //uw变mw
 238   1      //  change_P_uW=log10(change_P_uW_doing); //用在后期画图判断的时候
 239   1      //  P_FINISH=change_P_mW_First;//uw变mw
 240   1      
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 5   

 241   1      }
 242          
 243          
 244          
 245          
 246          u16 baifenbi_T=0;
 247          //距离、功率、体积、直径、面积
 248          void Prepare_qrj_zx_qy()  //一直运行的 无论哪个状态适用与前三个模式
 249          {
 250   1      
 251   1            L_mm_TO_P_uw(L_int,CurrentPageNum[1]);  //根据距离得到功率 
 252   1            WriteDGUS(0x2600,(uint8_t *)&change_P_uW_doing,sizeof(change_P_uW_doing));    /*********功率*************
             -***/
 253   1            L_M = (float)(L_int/1000.00f);  //m数据/*********距离****************/
 254   1              
 255   1        if(CurrentPageNum[1]==Page_qirongjiao)
 256   1        {
 257   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 258   2            D = Tanx*2*L_m_D_V_S;
 259   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 260   2            Volume  = Square*L_m_D_V_S/3.00;
 261   2            WriteDGUS(0x2850,(uint8_t *)&(Volume),sizeof(Volume));  //气溶胶为体积
 262   2          
 263   2              //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 264   2        }
 265   1        else if(CurrentPageNum[1]==Page_zhongxin)
 266   1        {
 267   2                
 268   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 269   2            D = Tan_zhongxin*2*L_m_D_V_S;
 270   2            Square  = (float)(pow(L_m_D_V_S*Tan_zhongxin,2)*pai); 
 271   2            
 272   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 273   2          
 274   2            //        baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 275   2        }
 276   1        else if(CurrentPageNum[1]==Page_quyu)
 277   1        {
 278   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 279   2            D = Tanx*2*L_m_D_V_S;
 280   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 281   2            
 282   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 283   2          
 284   2                  //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 285   2        }
 286   1        
 287   1            WriteDGUS(0x2500, (uint8_t *)&L_M,sizeof(L_M)); 
 288   1            WriteDGUS(0x2840,(uint8_t *)&(D),sizeof(D));      //直径
 289   1      
 290   1            //WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 291   1      }
 292          
 293          
 294          
 295          
 296          float mJ_doing=0.0; //已照射的mj
 297          u32 time_100ms=0; //100ms的中断标志位
 298          u32 time_doing=0;//已经照射的时间
 299          //气溶胶、中心、区域 run函数
 300          
 301          void QRJ_ZX__QY_RUN(Callback_u16 callback_u16)            //放在QRJ_run
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 6   

 302          {
 303   1        u16 ResTime_sec;
 304   1        u16 ResTime_min;  
 305   1        static u32 t_1=0;
 306   1      if(time_100ms)      //100ms老是不好用解决方式 ： 定时器里设定100ms而不是1ms
 307   1      {
 308   2          time_100ms=0;
 309   2          //uJ_doing+=143;
 310   2          //mJ_doing=mJ_doing+(change_P_uW_doing/1000); //每0.1秒累加当前的mj辐射量
 311   2          mJ_doing=mJ_doing+(change_P_uW_doing/10000.0f); 
 312   2          t_1++;
 313   2          if(t_1>=10) ////1s
 314   2          {
 315   3            t_1=0;
 316   3        //    mJ_doing=mJ_doing+(change_P_uW_doing/1000);
 317   3          //  time_100ms=0;
 318   3            time_doing++; //工作时长  
 319   3            //TIME_static--;
 320   3          }
 321   2          callback_u16(L_int);
 322   2         // QRJ_mm_to_s(L_int); //根据距离和功率得到时间
 323   2        
 324   2          ResTime_min=(u16)(TIME_static)/60;
 325   2          ResTime_sec=(u16)(TIME_static)%60;
 326   2      
 327   2          WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 328   2          WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 329   2          
 330   2          //总时间 等于剩余时间加上已经工作的时间
 331   2          ResTime_min=(u16)(TIME_static+time_doing)/60;
 332   2          ResTime_sec=(u16)(TIME_static+time_doing)%60;
 333   2          WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 334   2          WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 335   2          
 336   2      
 337   2          WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
 338   2          
 339   2          if(mJ_doing*1000.0f > qirongjiao_j){mJ_doing=qirongjiao_j/1000.0f;} //防止照射过多
 340   2          baifenbi_T = ((mJ_doing*1000.00*100) / qirongjiao_j ) ;
 341   2          WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 342   2          
 343   2        } 
 344   1      }
 345          
 346          
 347          
 348          
 349          
 350          /********************************************读取当前页面并锁定*************************************/
 351          /****************************************
 352          滑动页面 00
 353          返回键 01
 354          增量调制（log值） 04
 355          *****************************************/
 356          
 357          void Lock_current_page_zengliang(u8 id_1,u8 daima_1);
 358          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1);
 359          u8 st_current[2]={0};
 360          static struct{
 361            u16 Head ;
 362            u8 page_0;//固定为0x00
 363            u8 page_1;
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 7   

 364            
 365            u8 touch_id;
 366            u8 touch_daima;
 367          
 368            u16 mode;
 369          
 370          }PageLock;
 371          
 372          
 373          void PageLock_Init()  //初始化
 374          {
 375   1        PageLock.Head=0x5aa5;
 376   1        PageLock.page_0=0x00;
 377   1      }
 378          
 379          
 380          
 381            u16 Current_Lock=0;   //0表示未上锁
 382            u16 mode_close = 0x0000;
 383            u16 mode_open = 0x0001;
 384          
 385            u16 ControlPageLock_Adress = 0xb0;
 386          
 387            u8 PageSliding = 0x0b;
 388            u8 Returnkey = 0x05;
 389            //u8 zengliang=0x03;
 390          
 391          
 392          void Lock_current_page()
 393          {
 394   1        if(CurrentPageNum[1] == Page_qirongjiao)
 395   1        {
 396   2          Lock_current_page_zengliang(0x04,0x02); //锁住增量调制 log值
 397   2          //WriteDGUS(0x5105,(uint8_t *)&(icon[0]),sizeof(icon[0]));//隐藏图标
 398   2        }
 399   1      //  if(MODE==1)       
 400   1      //  {
 401   1      //        if(W_S[0]==1)//气溶胶
 402   1      //    {
 403   1            WriteDGUS(qrj_log_icon,(uint8_t *)&(icon[0]),sizeof(icon[0]));  //隐藏log图标
 404   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 405   1      //    }
 406   1      //    else if(W_S[0]==2)//zx
 407   1      //    {
 408   1      //    WriteDGUS(0x5106,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 409   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 410   1      //    }
 411   1      //        else if(W_S[0]==3)//qy
 412   1      //    {
 413   1      //          WriteDGUS(0x5107,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 414   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 415   1      
 416   1      //    }
 417   1      //  }
 418   1        
 419   1        //ReadDGUS(ReadCurrentPage_Adress,(uint8_t *)&Current_page,sizeof(Current_page)); //返回值 00 06
 420   1        PageLock.page_1=CurrentPageNum[1];
 421   1        PageLock.touch_id=0x00;     //滑动翻页设置为 0位置
 422   1        PageLock.touch_daima=PageSliding;
 423   1        PageLock.mode=mode_close;
 424   1      
 425   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 8   

 426   1        while(1)
 427   1        {
 428   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 429   2          if(st_current[0]==st_current[1])
 430   2          {break;}
 431   2        }
 432   1        
 433   1        PageLock.touch_id=0x01;   //返回键 设置为1位置
 434   1        PageLock.touch_daima=Returnkey;
 435   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 436   1        while(1)
 437   1        {
 438   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 439   2          if(st_current[0]==st_current[1])
 440   2          {break;}
 441   2        }
 442   1        Current_Lock=1;
 443   1      
 444   1      }
 445          
 446          void Unlock_current_page()
 447          {
 448   1      
 449   1        if(Current_Lock==1) //先判断是否上锁
 450   1        {
 451   2            if(CurrentPageNum[1] == Page_qirongjiao)
 452   2          {
 453   3          //WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 454   3            Unlock_current_page_zengliang(0x04,0x02);
 455   3          }
 456   2      //      if(MODE==1)       
 457   2      //  {
 458   2      //    if(W_S[0]==1)//气溶胶
 459   2      //    {
 460   2      //    WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 461   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 462   2      //    }
 463   2      //    else if(W_S[0]==2)//zx
 464   2      //    {
 465   2      //          WriteDGUS(0x5106,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 466   2      //        Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 467   2      
 468   2      //    }
 469   2      //        else if(W_S[0]==3)//qy
 470   2      //    {
 471   2      //    WriteDGUS(0x5107,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 472   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 473   2      //    }
 474   2      //  }
 475   2        
 476   2      
 477   2            PageLock.page_1=CurrentPageNum[1];  //解锁返回键
 478   2            PageLock.mode=mode_open;
 479   2            PageLock.touch_daima=Returnkey; 
 480   2            PageLock.touch_id=0x01; 
 481   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 482   2          while(1)
 483   2        {
 484   3          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 485   3          if(st_current[0]==st_current[1])
 486   3          {break;}
 487   3        }
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 9   

 488   2            PageLock.touch_daima=PageSliding;   //解锁滑动模块
 489   2            PageLock.touch_id=0x00;   
 490   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 491   2        while(1)
 492   2        {
 493   3          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 494   3          if(st_current[0]==st_current[1])
 495   3          {break;}
 496   3        }
 497   2            Current_Lock=0;
 498   2      
 499   2        }
 500   1        
 501   1      
 502   1      }
 503          
 504          //锁住增量 
 505          void Lock_current_page_zengliang(u8 id_1,u8 daima_1)
 506          {
 507   1      
 508   1        PageLock.page_1=CurrentPageNum[1];
 509   1        PageLock.touch_id=id_1;     //调节log mj的触控增量锁住
 510   1        PageLock.touch_daima=daima_1;
 511   1        PageLock.mode=mode_close;
 512   1      
 513   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 514   1        while(1)
 515   1        {
 516   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 517   2          if(st_current[0]==st_current[1])
 518   2          {break;}
 519   2        }
 520   1      }
 521          
 522          
 523          
 524          //解锁增量
 525          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1)
 526          {
 527   1        
 528   1        PageLock.page_1=CurrentPageNum[1];
 529   1        PageLock.touch_id=id_1;   //返回键 设置为1位置
 530   1        PageLock.touch_daima=daima_1;
 531   1        PageLock.mode=mode_open;
 532   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 533   1          while(1)
 534   1        {
 535   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 536   2          if(st_current[0]==st_current[1])
 537   2          {break;}
 538   2        }
 539   1      }
 540          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2694    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     93      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   HOME                                                              05/08/2025 17:26:36 PAGE 10  

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
