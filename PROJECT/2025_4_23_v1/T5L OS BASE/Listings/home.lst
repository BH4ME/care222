C51 COMPILER V9.59.0.0   HOME                                                              04/23/2025 19:11:06 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HOME
OBJECT MODULE PLACED IN .\Objects\home.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\home.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.
                    -\APP;.\PAGE) DEBUG PRINT(.\Listings\home.lst) TABS(2) OBJECT(.\Objects\home.obj)

line level    source

   1          #include  "home.h"
   2          #include "dgus.h"
   3          #include "qrj.h"
   4          #include "home.h"
   5          
   6          #include <math.h>
   7          
   8          
   9          uint8_t CurrentPageNum[2]={0};  //CurrentPageNum[1]是当前页面
  10          
  11          
  12          float L_M = 0.0;//距离 m
  13          u16 Time_static_16; //静态的时间由距离得出的
  14          void Prepare_qrj_zx_qy(); //一直运行的 无论哪个状态适用与前三个模式
  15          
  16          /*********************************************************************************
  17          中心模式：求面积和直径  面积是区域模式的四分之一，直径是区域模式的二分之一
  18          区域模式：求面积和直径  
  19          气溶胶模式：求体积
  20          ********************************************************************************/
  21          float Tanx=0.4557;
  22          float pai=3.1415;
  23          float Tan_zhongxin=0.04366094;
  24          float zhongxin_35mm=0.4008159;  //=0.0175m/tan2.5
  25          
  26          float L_m_D_V_S=0.00;       //距离 单位:M
  27          float Square=0.00;      //面积 单位：M^2
  28          float D=0.00;         //直径 单位：M
  29          float Volume=0.00;          //气溶胶体积 单位：M^3
  30          
  31          
  32          u8 last_page;
  33          //放在主函数里循环执行当前页面的程序
  34          void ReadCurrentPage_run()    
  35          {
  36   1      
  37   1        
  38   1        ReadDGUS(0x14,(uint8_t *)&CurrentPageNum,sizeof(CurrentPageNum));
  39   1        switch(CurrentPageNum[1])
  40   1        {
  41   2          case Page_home: 
  42   2          {
  43   3            last_page = CurrentPageNum[1];
  44   3            current_st = 0x01;
  45   3            break;
  46   3          }
  47   2          
  48   2          case Page_qirongjiao:
  49   2          {
  50   3            
  51   3            
  52   3          //  QRJ_prepare();
  53   3            QRJ_Home();
  54   3            Prepare_qrj_zx_qy();
C51 COMPILER V9.59.0.0   HOME                                                              04/23/2025 19:11:06 PAGE 2   

  55   3            
  56   3            break;
  57   3          }
  58   2            
  59   2          case Page_zhongxin:
  60   2          {
  61   3            
  62   3            Prepare_qrj_zx_qy();      
  63   3            
  64   3            
  65   3            break;
  66   3          }
  67   2          
  68   2          case Page_quyu:
  69   2          {
  70   3            
  71   3            Prepare_qrj_zx_qy();
  72   3            
  73   3            break;
  74   3          }
  75   2          
  76   2              
  77   2          case Page_chengxuhua:
  78   2          {
  79   3      
  80   3            break;
  81   3          }
  82   2          
  83   2              
  84   2          case Page_zhiliao:
  85   2          {
  86   3            break;
  87   3          }
  88   2          
  89   2              
  90   2          case Page_shoudong:
  91   2          {   
  92   3      
  93   3            break;
  94   3          }
  95   2                
  96   2          case Page_lianji:
  97   2          {
  98   3        
  99   3            break;
 100   3          }
 101   2          
 102   2              
 103   2          case Page_shezhi:
 104   2          {
 105   3      
 106   3            break;
 107   3          }
 108   2          
 109   2          case Page_chengxuhua_JUMP:
 110   2          {
 111   3            
 112   3            break;
 113   3          }
 114   2              
 115   2            case Page_zhiliao_JUMP:
 116   2          {
C51 COMPILER V9.59.0.0   HOME                                                              04/23/2025 19:11:06 PAGE 3   

 117   3            break;
 118   3          }
 119   2          default:
 120   2          {
 121   3            
 122   3            break;
 123   3          }
 124   2          
 125   2        }
 126   1        
 127   1      }
 128          
 129          
 130          
 131          
 132          
 133          
 134          //void S_D_Surfaces_All()
 135          //{
 136          
 137          //  L_m =  (float)(L_int/1000.000)+zhongxin_35mm;
 138          //  if(W_S[0]==2)//zx
 139          //  {
 140          //  D = Tan_zhongxin*2*L_m;
 141          //  Square  = (float)(pow(L_m*Tan_zhongxin,2)*pai); 
 142          //  }
 143          //  else 
 144          //  {
 145          //  D = Tanx*2*L_m;
 146          //  Square  = (float)(pow(L_m*Tanx,2)*pai); 
 147          //  }
 148          //  Volume  = Square*L_m/3.00;
 149          //}
 150          
 151          
 152          
 153          /**************************************************
 154          距离 换算 为功率大小
 155          形参为毫米
 156          *******************************************************/
 157          double change_P_uW=0.0; //lg change_P_uW_doing
 158          float change_P_uW_doing=0.0;  //根据距离在推出的功率
 159          //double change_P_mW_First=0.0;
 160          
 161          void L_mm_TO_P_uw(u16 L_mm_TO_P,u8 current_page)    //形式参数毫米
 162          {
 163   1        u8 L_mm_TO_P_uw_FLAG=0;
 164   1        double BEISHU=0.00000;
 165   1        double L_CM;
 166   1        double mihanshu=0.0;
 167   1        
 168   1        
 169   1        L_CM=L_mm_TO_P/10;
 170   1        
 171   1        if(L_CM<=10&& L_CM>=5) L_mm_TO_P_uw_FLAG=1;
 172   1          else  if(L_CM<=20&& L_CM>10) L_mm_TO_P_uw_FLAG=2;
 173   1            else  if(L_CM<=100&& L_CM>20) L_mm_TO_P_uw_FLAG=3;
 174   1            else  if(L_CM<=300&& L_CM>100) L_mm_TO_P_uw_FLAG=4;
 175   1              else L_mm_TO_P_uw_FLAG=5;
 176   1        
 177   1        /***66300.18x^-1.86****/
 178   1        switch(L_mm_TO_P_uw_FLAG)
C51 COMPILER V9.59.0.0   HOME                                                              04/23/2025 19:11:06 PAGE 4   

 179   1        {
 180   2          case 1:
 181   2          {
 182   3            mihanshu = pow((double)(L_CM),-1.6);
 183   3            BEISHU = 36527.86*mihanshu;
 184   3            change_P_uW_doing=BEISHU;
 185   3            break;
 186   3          }
 187   2          
 188   2          
 189   2              case 2:
 190   2          {
 191   3            mihanshu = pow((double)(L_CM),-1.85);
 192   3            BEISHU = 65617.44*mihanshu;
 193   3            change_P_uW_doing=BEISHU;
 194   3            break;
 195   3          }
 196   2          
 197   2              case 3:
 198   2          {
 199   3            mihanshu = pow((double)(L_CM),-1.81);
 200   3            BEISHU = 57622.25*mihanshu;
 201   3            change_P_uW_doing=BEISHU;
 202   3            break;
 203   3          }
 204   2          
 205   2              case 4:
 206   2          {
 207   3            mihanshu = pow((double)(L_CM),-2);
 208   3            BEISHU = 139224.07*mihanshu;
 209   3            change_P_uW_doing=BEISHU;
 210   3            break;
 211   3          }
 212   2              
 213   2          default:
 214   2          {
 215   3            L_mm_TO_P_uw_FLAG=0x0a;
 216   3          }
 217   2        }
 218   1        
 219   1        if(Page_qirongjiao==current_page || Page_quyu==current_page)
 220   1        {
 221   2          change_P_uW_doing=change_P_uW_doing*0.6;  //气溶胶和区域需要乘0.6
 222   2        }
 223   1        //if(W_S[0]!=2&&MODE==1)change_P_mW_doing=change_P_mW_doing*0.6;  //气溶胶和区域需要乘0.6
 224   1      //  change_P_mW_First=change_P_mW_doing/1000;   //uw变mw
 225   1      //  change_P_uW=log10(change_P_uW_doing); //用在后期画图判断的时候
 226   1      //  P_FINISH=change_P_mW_First;//uw变mw
 227   1      
 228   1      }
 229          
 230          
 231          //距离、功率、体积、直径、面积
 232          void Prepare_qrj_zx_qy()  //一直运行的 无论哪个状态适用与前三个模式
 233          {
 234   1            L_mm_TO_P_uw(L_int,CurrentPageNum[1]);  //根据距离得到功率 
 235   1            WriteDGUS(0x2600,(uint8_t *)&change_P_uW_doing,sizeof(change_P_uW_doing));    /*********功率*************
             -***/
 236   1            L_M = (float)(L_int/1000.00f);  //m数据/*********距离****************/
 237   1              
 238   1        if(CurrentPageNum[1]==Page_qirongjiao)
 239   1        {
C51 COMPILER V9.59.0.0   HOME                                                              04/23/2025 19:11:06 PAGE 5   

 240   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 241   2            D = Tanx*2*L_m_D_V_S;
 242   2          //Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 243   2            Volume  = Square*L_m_D_V_S/3.00;
 244   2            WriteDGUS(0x2850,(uint8_t *)&(Volume),sizeof(Volume));  //气溶胶为体积
 245   2        }
 246   1        else if(CurrentPageNum[1]==Page_zhongxin)
 247   1        {
 248   2                
 249   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 250   2            D = Tan_zhongxin*2*L_m_D_V_S;
 251   2            Square  = (float)(pow(L_m_D_V_S*Tan_zhongxin,2)*pai); 
 252   2            
 253   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 254   2        }
 255   1        else if(CurrentPageNum[1]==Page_quyu)
 256   1        {
 257   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 258   2            D = Tanx*2*L_m_D_V_S;
 259   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 260   2            
 261   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 262   2        }
 263   1        
 264   1            WriteDGUS(0x2500, (uint8_t *)&L_M,sizeof(L_M)); 
 265   1            WriteDGUS(0x2840,(uint8_t *)&(D),sizeof(D));      //直径
 266   1        
 267   1        
 268   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1334    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     49      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
