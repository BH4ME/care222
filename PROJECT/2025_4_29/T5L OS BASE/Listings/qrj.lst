C51 COMPILER V9.59.0.0   QRJ                                                               04/28/2025 19:11:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE QRJ
OBJECT MODULE PLACED IN .\Objects\qrj.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\qrj.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\
                    -APP;.\PAGE) DEBUG PRINT(.\Listings\qrj.lst) TABS(2) OBJECT(.\Objects\qrj.obj)

line level    source

   1          #include  "qrj.h"
   2          #include "dgus.h"
   3          #include "home.h"
   4          //气溶胶消毒
   5          double TIME_static=0.0;
   6          void QRJ_mm_to_s(u16 L_T);
   7          
   8          
   9          u8 current_st;
  10          //初始化0x00，第一次进入界面0x01，就绪态0x02（第一次进入界面只运行一次后，未执行任务），运行态0x03开始，
  11          //运行态暂停0x04，运行态结束0x05,复位0x06
  12          /*******************************************************
  13          //开机初始化QRJ_Init 只运行一次
  14          第一次进入界面（从别的页面跳转过来的），或者点击复位按键 QRJ_Reset 只运行一次
  15          在当前页面但未进行任务及未开始或未处于暂停状态QRJ_prepare
  16          进行任务中（处于开始或暂停状态，任务完成仍为开始状态）QRJ_run 但只有按键按的时候才执行
  17          ******************************************************/
  18          
  19          
  20          
  21          void QRJ_run()  //按下操作 正在照射   
  22          {
  23   1        QRJ_ZX__QY_RUN();
  24   1      
  25   1      }
  26          
  27          void QRJ_done() //正常照射完成
  28          {
  29   1        
  30   1      }
  31          
  32          void QRJ_Init()   //开机初始化
  33          {
  34   1        current_st = 0x00;
  35   1        
  36   1      }
  37          
  38          
  39          
  40          //u8 last_page;
  41          //主要功能解锁触控单元
  42          void  QRJ_Set()       //每次进入页面初始化
  43          {
  44   1      
  45   1      }
  46          
  47          void  QRJ_Reset()       //按下复位键 只进行一次 
  48          {
  49   1      
  50   1      }
  51            
  52          //    L_int   mm
  53          
  54          float qirongjiao_j=0.0;
C51 COMPILER V9.59.0.0   QRJ                                                               04/28/2025 19:11:40 PAGE 2   

  55          
  56          void QRJ_prepare()  //在当前页面 但未操作
  57          {
  58   1        u16 ResTime_sec;
  59   1        u16 ResTime_min;  
  60   1        u16 QRJ_mj; 
  61   1      
  62   1      
  63   1        ReadDGUS(0x5100,(uint8_t *)&QRJ_mj,sizeof(QRJ_mj));   //读取杀灭log值 范围1~5
  64   1        switch(QRJ_mj)
  65   1        {
  66   2          case 1:
  67   2          {
  68   3            qirongjiao_j  = 500;      //单位是uj 而不是mj
  69   3            break;
  70   3          }
  71   2              case 2:
  72   2          {
  73   3            qirongjiao_j  = 1000;
  74   3            break;
  75   3          }
  76   2              case 3:
  77   2          {
  78   3            qirongjiao_j  = 1500;
  79   3            break;
  80   3          }
  81   2              case 4:
  82   2          {
  83   3            qirongjiao_j  = 2500;
  84   3            break;
  85   3          }
  86   2              case 5:
  87   2          {
  88   3            qirongjiao_j  = 4000;
  89   3            break;
  90   3          }
  91   2        }
  92   1        
  93   1        QRJ_mm_to_s(L_int); //根据距离和功率得到时间
  94   1        
  95   1        ResTime_min=(u16)(TIME_static)/60;
  96   1        ResTime_sec=(u16)(TIME_static)%60;
  97   1        WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
  98   1        WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
  99   1        WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 100   1        WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 101   1      
 102   1      }
 103            
 104            
 105            
 106          /******************输入距离给出时间 mm->s*********/
 107          u8 L_T_S_FLAG;
 108          
 109          void QRJ_mm_to_s(u16 L_T) 
 110          {
 111   1        double L_CM;
 112   1        L_CM=L_T/10.0;
 113   1        if(L_CM<400 && L_CM>5) L_T_S_FLAG=1;    //在5cm~4m范围
 114   1              else L_T_S_FLAG=5;
 115   1      
 116   1        if(current_st!=0x03)  //不等于运行态
C51 COMPILER V9.59.0.0   QRJ                                                               04/28/2025 19:11:40 PAGE 3   

 117   1        {
 118   2        switch(L_T_S_FLAG)
 119   2        {
 120   3          case 1:
 121   3          {
 122   4            TIME_static=qirongjiao_j/change_P_uW_doing;
 123   4            break;
 124   4          }
 125   3      
 126   3              default:
 127   3          {
 128   4            L_T_S_FLAG=6;
 129   4            
 130   4            break;
 131   4          }
 132   3        }
 133   2      }
 134   1        
 135   1        else  //运行态
 136   1          
 137   1        {
 138   2          
 139   2          switch(L_T_S_FLAG)
 140   2        {
 141   3          case 1:
 142   3          {
 143   4            TIME_static=(qirongjiao_j - mJ_doing*1000)  / change_P_uW_doing / 10.0;
 144   4            break;
 145   4          }
 146   3      
 147   3              default:
 148   3          {
 149   4            L_T_S_FLAG=6;
 150   4            
 151   4            break;
 152   4          }
 153   3        }
 154   2          
 155   2          
 156   2          
 157   2          
 158   2        }
 159   1          
 160   1        
 161   1      }
 162          
 163          
 164          void QRJ_stop()
 165          {
 166   1        
 167   1      }
 168          
 169          
 170          
 171          void QRJ_Home() //循环运行
 172          {
 173   1        
 174   1          if(last_page!=CurrentPageNum[1])  //第一次进入页面
 175   1        {
 176   2          last_page=CurrentPageNum[1];  
 177   2          current_st = 0x01;
 178   2        }
C51 COMPILER V9.59.0.0   QRJ                                                               04/28/2025 19:11:40 PAGE 4   

 179   1      //  else 
 180   1      //  {
 181   1      //    
 182   1      //  } 
 183   1        
 184   1        switch(current_st)    //在handle.c触摸反馈中检测
 185   1        {
 186   2          case 0:   //开机初始化状态
 187   2          {
 188   3            current_st = 0x01;  //初始化成功，跳转到第一次初始化态
 189   3          //  break;
 190   3          }
 191   2          
 192   2          case 1:   //第一次初始化态
 193   2          {
 194   3            current_st = 0x02;  //第一次初始化成功，跳转到就绪态
 195   3            QRJ_Set();
 196   3            
 197   3          //  break;
 198   3          }
 199   2          
 200   2          case 2:   //就绪态
 201   2          {
 202   3            QRJ_prepare();
 203   3            break;
 204   3          }
 205   2          
 206   2              case 3:   //运行态开始
 207   2          {
 208   3            
 209   3            QRJ_run();
 210   3            break;
 211   3          }
 212   2          
 213   2              case 4:   //运行态暂停
 214   2          {
 215   3            QRJ_stop();
 216   3            break;
 217   3          }
 218   2          
 219   2              case 5:   //运行态结束 此为自然结束不包含复位
 220   2          {
 221   3            QRJ_done(); 
 222   3            break;
 223   3          }
 224   2              case 6:   //运行态复位 只进行一次 然后跳转到第一次初始化
 225   2          {
 226   3            current_st = 0x01;  // 置位 到第一次初始化
 227   3            QRJ_Reset();  //只运行一次
 228   3            
 229   3            break;
 230   3          }
 231   2          
 232   2          default :
 233   2          {
 234   3            break;
 235   3          }
 236   2          
 237   2        }
 238   1        
 239   1        
 240   1      }
C51 COMPILER V9.59.0.0   QRJ                                                               04/28/2025 19:11:40 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    605    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
