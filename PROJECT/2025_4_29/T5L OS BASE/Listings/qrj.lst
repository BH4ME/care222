C51 COMPILER V9.59.0.0   QRJ                                                               04/29/2025 17:34:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE QRJ
OBJECT MODULE PLACED IN .\Objects\qrj.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\qrj.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\
                    -APP;.\PAGE) DEBUG PRINT(.\Listings\qrj.lst) TABS(2) OBJECT(.\Objects\qrj.obj)

line level    source

   1          #include  "qrj.h"
   2          #include "dgus.h"
   3          #include "home.h"
   4          //气溶胶消毒
   5          double TIME_static=0.0;
   6          void QRJ_mm_to_s(u16 L_T);
   7          
   8          u16 icon[4]={0x00,0x01,0x02,0x03};
   9          
  10          u8 current_st;
  11          //初始化0x00，第一次进入界面0x01，就绪态0x02（第一次进入界面只运行一次后，未执行任务），运行态0x03开始，
  12          //运行态暂停0x04，运行态结束0x05,复位0x06
  13          /*******************************************************
  14          //开机初始化QRJ_Init 只运行一次
  15          第一次进入界面（从别的页面跳转过来的），或者点击复位按键 QRJ_Reset 只运行一次
  16          在当前页面但未进行任务及未开始或未处于暂停状态QRJ_prepare
  17          进行任务中（处于开始或暂停状态，任务完成仍为开始状态）QRJ_run 但只有按键按的时候才执行
  18          ******************************************************/
  19          
  20          void QRJ_done() //正常照射完成
  21          {
  22   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  23   1      }
  24          
  25          
  26          void QRJ_run()  //按下操作 正在照射   
  27          {
  28   1        QRJ_ZX__QY_RUN();
  29   1        
  30   1        
  31   1        //触发 照射完成
  32   1        if(mJ_doing*1000 >= qirongjiao_j  ||  TIME_static<=0  ||  baifenbi_T >=100)
  33   1        {
  34   2          
  35   2        
  36   2          
  37   2          current_st = 0x05;  //状态位设置为 自然完成 
  38   2        }
  39   1        
  40   1      }
  41          
  42          
  43          
  44          void QRJ_Init()   //开机初始化
  45          {
  46   1        current_st = 0x00;
  47   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));
  48   1      }
  49          
  50          
  51          
  52          //u8 last_page;
  53          //主要功能解锁触控单元
  54          void  QRJ_Set()       //每次进入页面初始化
C51 COMPILER V9.59.0.0   QRJ                                                               04/29/2025 17:34:34 PAGE 2   

  55          {
  56   1      
  57   1      }
  58          
  59          
  60          void  QRJ_Reset()       //按下复位键 只进行一次 
  61          {
  62   1        
  63   1        mJ_doing = 0; //总照射能量 
  64   1        WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
  65   1        
  66   1        baifenbi_T = 0; //完成百分比为0
  67   1        WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    
  68   1        
  69   1        time_doing=0; //已进行 的时间置为0
  70   1        
  71   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  72   1        
  73   1      }
  74            
  75          //    L_int   mm
  76          
  77          float qirongjiao_j=0.0;
  78          
  79          void QRJ_prepare()  //在当前页面 但未操作
  80          {
  81   1        u16 ResTime_sec;
  82   1        u16 ResTime_min;  
  83   1        u16 QRJ_mj; 
  84   1      
  85   1      
  86   1        ReadDGUS(0x5100,(uint8_t *)&QRJ_mj,sizeof(QRJ_mj));   //读取杀灭log值 范围1~5
  87   1        switch(QRJ_mj)
  88   1        {
  89   2          case 1:
  90   2          {
  91   3            qirongjiao_j  = 500;      //单位是uj 而不是mj
  92   3            break;
  93   3          }
  94   2              case 2:
  95   2          {
  96   3            qirongjiao_j  = 1000;
  97   3            break;
  98   3          }
  99   2              case 3:
 100   2          {
 101   3            qirongjiao_j  = 1500;
 102   3            break;
 103   3          }
 104   2              case 4:
 105   2          {
 106   3            qirongjiao_j  = 2500;
 107   3            break;
 108   3          }
 109   2              case 5:
 110   2          {
 111   3            qirongjiao_j  = 4000;
 112   3            break;
 113   3          }
 114   2        }
 115   1        
 116   1        QRJ_mm_to_s(L_int); //根据距离和功率得到时间
C51 COMPILER V9.59.0.0   QRJ                                                               04/29/2025 17:34:34 PAGE 3   

 117   1        
 118   1        ResTime_min=(u16)(TIME_static)/60;
 119   1        ResTime_sec=(u16)(TIME_static)%60;
 120   1        WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 121   1        WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 122   1        WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 123   1        WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 124   1      
 125   1      }
 126            
 127            
 128            
 129          /******************输入距离给出时间 mm->s*********/
 130          u8 L_T_S_FLAG;
 131          
 132          void QRJ_mm_to_s(u16 L_T) 
 133          {
 134   1        double L_CM;
 135   1        L_CM=L_T/10.0;
 136   1        if(L_CM<400 && L_CM>5) L_T_S_FLAG=1;    //在5cm~4m范围
 137   1              else L_T_S_FLAG=5;
 138   1      
 139   1        if(current_st!=0x03)  //不等于运行态
 140   1        {
 141   2        switch(L_T_S_FLAG)
 142   2        {
 143   3          case 1:
 144   3          {
 145   4            TIME_static=qirongjiao_j/change_P_uW_doing;
 146   4            break;
 147   4          }
 148   3      
 149   3              default:
 150   3          {
 151   4            L_T_S_FLAG=6;
 152   4            
 153   4            break;
 154   4          }
 155   3        }
 156   2      }
 157   1        
 158   1        else  //运行态
 159   1          
 160   1        {
 161   2          
 162   2          switch(L_T_S_FLAG)
 163   2        {
 164   3          case 1:
 165   3          {
 166   4            TIME_static=(qirongjiao_j - mJ_doing*1000)  / (change_P_uW_doing) ;
 167   4            break;
 168   4          }
 169   3      
 170   3              default:
 171   3          {
 172   4            L_T_S_FLAG=6;
 173   4            
 174   4            break;
 175   4          }
 176   3        }
 177   2          
 178   2          
C51 COMPILER V9.59.0.0   QRJ                                                               04/29/2025 17:34:34 PAGE 4   

 179   2          
 180   2          
 181   2        }
 182   1          
 183   1        
 184   1      }
 185          
 186          
 187          
 188          
 189          
 190          void QRJ_stop()
 191          {
 192   1        
 193   1      }
 194          
 195          
 196          
 197          
 198          
 199          void QRJ_Home() //循环运行
 200          {
 201   1        
 202   1          if(last_page!=CurrentPageNum[1])  //第一次进入页面
 203   1        {
 204   2          last_page=CurrentPageNum[1];  
 205   2          current_st = 0x01;
 206   2        }
 207   1      //  else 
 208   1      //  {
 209   1      //    
 210   1      //  } 
 211   1        
 212   1        switch(current_st)    //在handle.c触摸反馈中检测
 213   1        {
 214   2          case 0:   //开机初始化状态
 215   2          {
 216   3            current_st = 0x01;  //初始化成功，跳转到第一次初始化态
 217   3          //  break;
 218   3          }
 219   2          
 220   2          case 1:   //第一次初始化态
 221   2          {
 222   3            current_st = 0x02;  //第一次初始化成功，跳转到就绪态
 223   3            QRJ_Set();
 224   3            
 225   3          //  break;
 226   3          }
 227   2          
 228   2          case 2:   //就绪态
 229   2          {
 230   3            QRJ_prepare();
 231   3            break;
 232   3          }
 233   2          
 234   2              case 3:   //运行态开始
 235   2          {
 236   3            
 237   3            QRJ_run();
 238   3            break;
 239   3          }
 240   2          
C51 COMPILER V9.59.0.0   QRJ                                                               04/29/2025 17:34:34 PAGE 5   

 241   2              case 4:   //运行态暂停
 242   2          {
 243   3            QRJ_stop();
 244   3            break;
 245   3          }
 246   2          
 247   2              case 5:   //运行态结束 此为自然结束不包含复位
 248   2          {
 249   3            QRJ_done(); 
 250   3            break;
 251   3          }
 252   2              case 6:   //运行态复位 只进行一次 然后跳转到第一次初始化
 253   2          {
 254   3      
 255   3            QRJ_Reset();  //只运行一次
 256   3            current_st = 0x01;  // 置位 到第一次初始化    
 257   3            break;
 258   3          }
 259   2          
 260   2          default :
 261   2          {
 262   3            break;
 263   3          }
 264   2          
 265   2        }
 266   1        
 267   1        
 268   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    818    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
