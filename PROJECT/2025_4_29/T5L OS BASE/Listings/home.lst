C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HOME
OBJECT MODULE PLACED IN .\Objects\home.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\home.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.
                    -\APP;.\PAGE) DEBUG PRINT(.\Listings\home.lst) TABS(2) OBJECT(.\Objects\home.obj)

line level    source

   1          #include  "home.h"
   2          #include "dgus.h"
   3          #include "qrj.h"
   4          #include "home.h"
   5          
   6          #include <math.h>
   7          
   8          
   9          uint8_t CurrentPageNum[2]={0};  //CurrentPageNum[1]是当前页面
  10          
  11          
  12          float L_M = 0.0;//距离 m
  13          //u16 Time_static_16; //静态的时间由距离得出的
  14          void Prepare_qrj_zx_qy(); //一直运行的 无论哪个状态适用与前三个模式
  15          
  16          /*********************************************************************************
  17          中心模式：求面积和直径  面积是区域模式的四分之一，直径是区域模式的二分之一
  18          区域模式：求面积和直径  
  19          气溶胶模式：求体积
  20          ********************************************************************************/
  21          float Tanx=0.4557;
  22          float pai=3.1415;
  23          float Tan_zhongxin=0.04366094;
  24          float zhongxin_35mm=0.4008159;  //=0.0175m/tan2.5
  25          
  26          float L_m_D_V_S=0.00;       //距离 单位:M
  27          float Square=0.00;      //面积 单位：M^2
  28          float D=0.00;         //直径 单位：M
  29          float Volume=0.00;          //气溶胶体积 单位：M^3
  30          
  31          
  32          u8 last_page;
  33          //放在主函数里循环执行当前页面的程序
  34          void ReadCurrentPage_run()    
  35          {
  36   1      
  37   1        
  38   1        ReadDGUS(0x14,(uint8_t *)&CurrentPageNum,sizeof(CurrentPageNum));
  39   1        switch(CurrentPageNum[1])
  40   1        {
  41   2          case Page_home: 
  42   2          {
  43   3            last_page = CurrentPageNum[1];
  44   3            current_st = 0x01;
  45   3            break;
  46   3          }
  47   2          
  48   2          case Page_qirongjiao:
  49   2          {
  50   3            
  51   3            
  52   3          //  QRJ_prepare();
  53   3            
  54   3            QRJ_Home();
C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 2   

  55   3            Prepare_qrj_zx_qy();
  56   3            
  57   3            break;
  58   3          }
  59   2            
  60   2          case Page_zhongxin:
  61   2          {
  62   3            
  63   3            Prepare_qrj_zx_qy();      
  64   3            
  65   3            
  66   3            break;
  67   3          }
  68   2          
  69   2          case Page_quyu:
  70   2          {
  71   3            
  72   3            Prepare_qrj_zx_qy();
  73   3            
  74   3            break;
  75   3          }
  76   2          
  77   2              
  78   2          case Page_chengxuhua:
  79   2          {
  80   3      
  81   3            break;
  82   3          }
  83   2          
  84   2              
  85   2          case Page_zhiliao:
  86   2          {
  87   3            break;
  88   3          }
  89   2          
  90   2              
  91   2          case Page_shoudong:
  92   2          {   
  93   3      
  94   3            break;
  95   3          }
  96   2                
  97   2          case Page_lianji:
  98   2          {
  99   3        
 100   3            break;
 101   3          }
 102   2          
 103   2              
 104   2          case Page_shezhi:
 105   2          {
 106   3      
 107   3            break;
 108   3          }
 109   2          
 110   2          case Page_chengxuhua_JUMP:
 111   2          {
 112   3            
 113   3            break;
 114   3          }
 115   2              
 116   2            case Page_zhiliao_JUMP:
C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 3   

 117   2          {
 118   3            break;
 119   3          }
 120   2          default:
 121   2          {
 122   3            
 123   3            break;
 124   3          }
 125   2          
 126   2        }
 127   1        
 128   1      }
 129          
 130          
 131          
 132          
 133          
 134          
 135          //void S_D_Surfaces_All()
 136          //{
 137          
 138          //  L_m =  (float)(L_int/1000.000)+zhongxin_35mm;
 139          //  if(W_S[0]==2)//zx
 140          //  {
 141          //  D = Tan_zhongxin*2*L_m;
 142          //  Square  = (float)(pow(L_m*Tan_zhongxin,2)*pai); 
 143          //  }
 144          //  else 
 145          //  {
 146          //  D = Tanx*2*L_m;
 147          //  Square  = (float)(pow(L_m*Tanx,2)*pai); 
 148          //  }
 149          //  Volume  = Square*L_m/3.00;
 150          //}
 151          
 152          
 153          
 154          /**************************************************
 155          距离 换算 为功率大小
 156          形参为毫米
 157          *******************************************************/
 158          double change_P_uW=0.0; //lg change_P_uW_doing
 159          float change_P_uW_doing=0.0;  //根据距离在推出的功率
 160          //double change_P_mW_First=0.0;
 161          
 162          void L_mm_TO_P_uw(u16 L_mm_TO_P,u8 current_page)    //形式参数毫米
 163          {
 164   1        u8 L_mm_TO_P_uw_FLAG=0;
 165   1        double BEISHU=0.00000;
 166   1        double L_CM;
 167   1        double mihanshu=0.0;
 168   1        
 169   1        
 170   1        L_CM=L_mm_TO_P/10;
 171   1        
 172   1        if(L_CM<=10&& L_CM>=5) L_mm_TO_P_uw_FLAG=1;
 173   1          else  if(L_CM<=20&& L_CM>10) L_mm_TO_P_uw_FLAG=2;
 174   1            else  if(L_CM<=100&& L_CM>20) L_mm_TO_P_uw_FLAG=3;
 175   1            else  if(L_CM<=300&& L_CM>100) L_mm_TO_P_uw_FLAG=4;
 176   1              else L_mm_TO_P_uw_FLAG=5;
 177   1        
 178   1        /***66300.18x^-1.86****/
C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 4   

 179   1        switch(L_mm_TO_P_uw_FLAG)
 180   1        {
 181   2          case 1:
 182   2          {
 183   3            mihanshu = pow((double)(L_CM),-1.6);
 184   3            BEISHU = 36527.86*mihanshu;
 185   3            change_P_uW_doing=BEISHU;
 186   3            break;
 187   3          }
 188   2          
 189   2          
 190   2              case 2:
 191   2          {
 192   3            mihanshu = pow((double)(L_CM),-1.85);
 193   3            BEISHU = 65617.44*mihanshu;
 194   3            change_P_uW_doing=BEISHU;
 195   3            break;
 196   3          }
 197   2          
 198   2              case 3:
 199   2          {
 200   3            mihanshu = pow((double)(L_CM),-1.81);
 201   3            BEISHU = 57622.25*mihanshu;
 202   3            change_P_uW_doing=BEISHU;
 203   3            break;
 204   3          }
 205   2          
 206   2              case 4:
 207   2          {
 208   3            mihanshu = pow((double)(L_CM),-2);
 209   3            BEISHU = 139224.07*mihanshu;
 210   3            change_P_uW_doing=BEISHU;
 211   3            break;
 212   3          }
 213   2              
 214   2          default:
 215   2          {
 216   3            L_mm_TO_P_uw_FLAG=0x0a;
 217   3          }
 218   2        }
 219   1        
 220   1        if(Page_qirongjiao==current_page || Page_quyu==current_page)
 221   1        {
 222   2          change_P_uW_doing=change_P_uW_doing*0.6;  //气溶胶和区域需要乘0.6
 223   2        }
 224   1        //if(W_S[0]!=2&&MODE==1)change_P_mW_doing=change_P_mW_doing*0.6;  //气溶胶和区域需要乘0.6
 225   1      //  change_P_mW_First=change_P_mW_doing/1000;   //uw变mw
 226   1      //  change_P_uW=log10(change_P_uW_doing); //用在后期画图判断的时候
 227   1      //  P_FINISH=change_P_mW_First;//uw变mw
 228   1      
 229   1      }
 230          
 231          
 232          //距离、功率、体积、直径、面积
 233          void Prepare_qrj_zx_qy()  //一直运行的 无论哪个状态适用与前三个模式
 234          {
 235   1            L_mm_TO_P_uw(L_int,CurrentPageNum[1]);  //根据距离得到功率 
 236   1            WriteDGUS(0x2600,(uint8_t *)&change_P_uW_doing,sizeof(change_P_uW_doing));    /*********功率*************
             -***/
 237   1            L_M = (float)(L_int/1000.00f);  //m数据/*********距离****************/
 238   1              
 239   1        if(CurrentPageNum[1]==Page_qirongjiao)
C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 5   

 240   1        {
 241   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 242   2            D = Tanx*2*L_m_D_V_S;
 243   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 244   2            Volume  = Square*L_m_D_V_S/3.00;
 245   2            WriteDGUS(0x2850,(uint8_t *)&(Volume),sizeof(Volume));  //气溶胶为体积
 246   2        }
 247   1        else if(CurrentPageNum[1]==Page_zhongxin)
 248   1        {
 249   2                
 250   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 251   2            D = Tan_zhongxin*2*L_m_D_V_S;
 252   2            Square  = (float)(pow(L_m_D_V_S*Tan_zhongxin,2)*pai); 
 253   2            
 254   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 255   2        }
 256   1        else if(CurrentPageNum[1]==Page_quyu)
 257   1        {
 258   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 259   2            D = Tanx*2*L_m_D_V_S;
 260   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 261   2            
 262   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 263   2        }
 264   1        
 265   1            WriteDGUS(0x2500, (uint8_t *)&L_M,sizeof(L_M)); 
 266   1            WriteDGUS(0x2840,(uint8_t *)&(D),sizeof(D));      //直径
 267   1        
 268   1        
 269   1      }
 270          
 271          
 272          
 273          
 274          float mJ_doing=0.0; //已照射的mj
 275          u32 time_100ms=0; //100ms的中断标志位
 276          u32 time_doing=0;//已经照射的时间
 277          //气溶胶、中心、区域 run函数
 278          void QRJ_ZX__QY_RUN()           //放在QRJ_run
 279          {
 280   1        u16 ResTime_sec;
 281   1        u16 ResTime_min;  
 282   1        
 283   1        if(time_100ms%100==0) //100ms
 284   1        {
 285   2          
 286   2          mJ_doing=mJ_doing+(change_P_uW_doing/1000.00f)*0.1; //每0.1秒累加当前的mj辐射量
 287   2          if(time_100ms>=1000)  //1s
 288   2          {
 289   3            time_100ms=0;
 290   3            time_doing++; //工作时长
 291   3            
 292   3            TIME_static--;
 293   3        
 294   3          
 295   3      
 296   3          }
 297   2          
 298   2          QRJ_mm_to_s(L_int); //根据距离和功率得到时间
 299   2        
 300   2          ResTime_min=(u16)(TIME_static)/16;
 301   2          ResTime_sec=(u16)(TIME_static)%16;
C51 COMPILER V9.59.0.0   HOME                                                              04/28/2025 19:11:40 PAGE 6   

 302   2      
 303   2          WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 304   2          WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 305   2          //总时间 等于剩余时间加上已经工作的时间
 306   2          ResTime_min=(u16)(TIME_static+time_doing)/16;
 307   2          ResTime_sec=(u16)(TIME_static+time_doing)%16;
 308   2          WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 309   2          WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 310   2          
 311   2          WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
 312   2        }
 313   1        
 314   1        
 315   1        
 316   1        
 317   1        
 318   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1885    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     59      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
