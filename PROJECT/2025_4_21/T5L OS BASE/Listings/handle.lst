C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HANDLE
OBJECT MODULE PLACED IN .\Objects\handle.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\handle.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.
                    -\APP) DEBUG OBJECTEXTEND PRINT(.\Listings\handle.lst) TABS(2) OBJECT(.\Objects\handle.obj)

line level    source

   1          /******************************************************************************
   2          * 文 件 名   : handle.c
   3          * 版 本 号   : V1.0
   4          * 作    者   : pinot
   5          * 生成日期   : 2019年11月27日
   6          * 功能描述   : 逻辑处理
   7          * 修改历史   :
   8          * 日    期   :
   9          * 作    者   :
  10          * 修改内容   :
  11          ******************************************************************************/
  12          
  13          /*****************************************************************************
  14          自定义头文件*/
  15          #include "handle.h"
  16          
  17          
  18          /*****************************************************************************
  19          全局变量*/
  20          //内部RAM
  21          uint8_t value0F00[4] = {0};
  22          uint8_t xp_status=0;
  23          
  24          //外部RAM
  25          typedef struct dlt_645_8283
  26          {
  27              uint8_t st_byte1;//帧起始符
  28              uint8_t st_byte2;//帧起始符
  29              uint8_t lenth;//长度
  30              uint8_t func;//类型
  31              uint8_t addr1;//地址
  32              uint8_t addr2;//地址  
  33              uint8_t edata[250];//数据内容
  34          }dl_t_645_8283_body;
  35          dl_t_645_8283_body xdata s_dl_t_645_8283_body={0};
  36          
  37          #define FRAME_BUFFER_LEN 255
  38          uint8_t xdata frame_buf[FRAME_BUFFER_LEN];//用来存取一帧数据
  39          uint8_t xdata frame_buf1[FRAME_BUFFER_LEN]=0;//用来存取一帧数据
  40          #define DLT_645_LEAST_LEN 7
  41          
  42          
  43          //代码空间
  44          uint8_t code CUart2[] = "Uart2Init Done!!!123";
  45          uint8_t code CUart3[] = "Uart3Init Done!!!";
  46          uint8_t code CUart4[] = "Uart4Init Done!!!";
  47          uint8_t code CUart5[] = "Uart5Init Done!!!";
  48          
  49          
  50          //解析到一帧数据可能出现的情况
  51          typedef enum frame_result
  52          {
  53              UNKNOWN,
  54              OK,           //成功找到一帧
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 2   

  55              UNFINISHED,   //未接收完成
  56              ERROR,        //不满足此协议
  57          }frame_result_t;
  58          
  59          //定义协议类型
  60          typedef enum protocol_type
  61          {
  62              PROTOCOL_UNKNOWN,
  63              PROTOCOL_DL_T_698,
  64              PROTOCOL_DL_T_645,
  65              PROTOCOL_OTHER,
  66          }protocol_type_t;
  67          
  68          #if 0
              /*****************************************************************************
              控制亮度*/
              void SetBlight(uint8_t n)
              {
              //  uint8_t temp[4]={0};
                WriteDGUS(DHW_LEDCFG,(uint8_t *)&n,sizeof(n));
              //  do
              //  {
              //    DelayMs(5);
              //    ReadDGUS(DHW_LEDNOW,temp,2);//设置亮度与获取到的亮度不一致
              //  }while(!(temp[1]==n));
              }
              /*****************************************************************************
              控制伴音*/
              void SetVoice(int8_t status)
              {
                uint8_t temp[4]={0};
                ReadDGUS(DHW_SYSCFG,temp,sizeof(temp));
                temp[0]=0x5A;
                if(1==status){temp[3]&=0xF7;}
                else if(2==status){temp[3]|=0x08;}
                else{return;}
                WriteDGUS(DHW_SYSCFG,temp,sizeof(temp));
                do
                {
                  DelayMs(5);
                  ReadDGUS(DHW_SYSCFG,temp,1);
                }while(temp[0]!=0);
              }
              
              #endif
 100          
 101          
 102          /*****************************************************************************
 103          判断按键值是否有上传*/
 104          int8_t GetValue0F00(void)
 105          {
 106   1        uint8_t cleanData[4]={0};
 107   1        ReadDGUS(DHW_0F00,value0F00,sizeof(value0F00));
 108   1        if(0x5A == value0F00[0])
 109   1        {
 110   2          WriteDGUS(DHW_0F00,cleanData,sizeof(cleanData));
 111   2          return 1;
 112   2        }
 113   1        return 0;
 114   1      }
 115          /*****************************************************************************
 116          串口初次打印*/
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 3   

 117          void InitUartSend(void)
 118          {
 119   1        Uart2SendStr(CUart2,sizeof(CUart2));
 120   1      //  Uart3SendStr(CUart3,sizeof(CUart3));
 121   1      //  Uart4SendStr(CUart4,sizeof(CUart4));
 122   1      //  Uart5SendStr(CUart5,sizeof(CUart5));
 123   1      }
 124          
 125          #if 0
              /*****************************************************************************
              跳转指定页面*/
              void JumpPage(uint16_t pageId)
              {
                uint8_t temp[4]={0x5A,0x01,0,0};
                temp[2]=(uint8_t)(pageId>>8);
                temp[3]=pageId;
                WriteDGUS(DHW_SPAGE,temp,sizeof(temp));
                do
                {
                  DelayMs(5);
                  ReadDGUS(DHW_SPAGE,temp,1);
                }while(temp[0]!=0);
              }
              #endif
 141          
 142          
 143          /*****************************************************************************
 144          按键按压之后处理流程*/
 145          void TouchHandle(void)
 146          {
 147   1        uint8_t temp[16]={0};
 148   1        uint16_t flag=0;
 149   1        uint16_t iconid=0;
 150   1        uint16_t getDar=0;
 151   1        getDar = value0F00[1]<<8|value0F00[2];
 152   1        LOG((uint8_t *)&getDar,sizeof(getDar));
 153   1        
 154   1        s_dl_t_645_8283_body.st_byte1=0x5A;
 155   1        s_dl_t_645_8283_body.st_byte2=0xA5;
 156   1        s_dl_t_645_8283_body.lenth=value0F00[3]*2+3;  
 157   1        s_dl_t_645_8283_body.func=0x83; 
 158   1        s_dl_t_645_8283_body.addr1=value0F00[1];
 159   1        s_dl_t_645_8283_body.addr2=value0F00[2];
 160   1        ReadDGUS(getDar,(uint8_t *)&s_dl_t_645_8283_body.edata[0],value0F00[3]*2);
 161   1        Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 162   1      
 163   1      //  switch(getDar)
 164   1      //  {
 165   1      //    default:
 166   1      //    break;
 167   1      //  }
 168   1      }
 169          
 170          /*****************************************************************************
 171          功能：回传数据*/
 172          void dlt645_handle(void)
 173          {
 174   1        uint16_t ADDR=0;
 175   1      
 176   1        ADDR = ((uint16_t)(s_dl_t_645_8283_body.addr1))<<8 | s_dl_t_645_8283_body.addr2;
 177   1      
 178   1        if(s_dl_t_645_8283_body.func == 0x82)
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 4   

 179   1        {
 180   2          WriteDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata),s_dl_t_645_8283_body.lenth-3);
 181   2          s_dl_t_645_8283_body.lenth=3;
 182   2          s_dl_t_645_8283_body.addr1=0x4F;
 183   2          s_dl_t_645_8283_body.addr2=0x4B;
 184   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 185   2        }
 186   1        else if(s_dl_t_645_8283_body.func == 0x83)
 187   1        {
 188   2          ReadDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata[1]),s_dl_t_645_8283_body.edata[0]*2);
 189   2          s_dl_t_645_8283_body.lenth+=s_dl_t_645_8283_body.edata[0]*2;
 190   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 191   2        }
 192   1        
 193   1      }
 194          /*****************************************************************************
 195          功能:检索一帧数据将值赋给结构体*/
 196          uint8_t parse_dlt645_frame(uint8_t *p_frame, uint16_t frame_len, uint8_t* sframe_body)
 197          {
 198   1          uint16_t temp16_t = 0;//一帧数据的总长度
 199   1          uint16_t i = 0;
 200   1      
 201   1          if(1){
 202   2              memcpy(sframe_body,p_frame, frame_len);
 203   2              return 1;
 204   2          }
 205   1         // return 0;     //上面if(1)永远都成立，执行不到这一行
 206   1      } 
 207          /*****************************************************************************
 208          功能:从缓存区buf中检索dlt645帧数据*/
 209          /*
 210           * 将一帧数据读取到frame_buf中     
 211           * line:缓存区0x7F开头的数据
 212           * out:将捡出来的帧复制到该数组中
 213           * frame_len:捡出来的帧的长度，
 214           * line_len:缓存区buf中0x7F开头的数据长度
 215           **/
 216          frame_result_t find_dlt645_frame(uint8_t* line, uint8_t* out, uint16_t* frame_len, uint16_t line_len) {
 217   1          uint16_t frame_length = 0;//一帧数据的总长度
 218   1          uint16_t temp_len = 0;
 219   1      
 220   1          if (line_len < DLT_645_LEAST_LEN) {
 221   2              return UNFINISHED;
 222   2          }
 223   1          //判断第0位
 224   1          if (line[0] != 0x5A) {  
 225   2              return ERROR;
 226   2          }
 227   1          if (line[1] != 0xA5) {  
 228   2              return ERROR;
 229   2          }   
 230   1          frame_length = line[2]+3;
 231   1          
 232   1          if (frame_length <= line_len) {
 233   2                  //检到一帧数据                
 234   2                  for (temp_len = 0; temp_len < frame_length; temp_len ++) {
 235   3                      out[temp_len] = *line;
 236   3                      line++;
 237   3                  }
 238   2                  *frame_len = frame_length;
 239   2                  return OK;
 240   2          } else {
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 5   

 241   2              //数据还没接收完整
 242   2              return UNFINISHED;
 243   2          }
 244   1      }
 245          
 246          /*****************************************************************************
 247          功能:协议数据解析*/
 248          void ParseBuffer(void)
 249          {
 250   1          uint16_t frame_length = 0;//一帧数据的总长度
 251   1          uint16_t i = 0, temp_len = 0;
 252   1          uint8_t has_content = 0;//buf中是否有数据
 253   1          uint8_t frame_error = 0;//缓存区当前的数据对所有协议都不满足
 254   1          uint8_t*  p_buf= Uart2_Rx;
 255   1          protocol_type_t protl_type = PROTOCOL_UNKNOWN;
 256   1          frame_result_t find_frame_re = UNKNOWN;
 257   1      
 258   1          //用来保存每个协议解析后的结果 
 259   1          //frame_results[0] 保存PROTOCOL_DL_T_645协议解析结果
 260   1          //frame_results[1] 保存PROTOCOL_DL_T_698协议解析结果
 261   1          frame_result_t frame_results[2] = {UNKNOWN, UNKNOWN}; 
 262   1      
 263   1          has_content = uart2_rx_count > 2;
 264   1          while (has_content) {
 265   2              p_buf = Uart2_Rx;
 266   2              //检索0x5A开头的数据
 267   2              while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 268   3                  p_buf ++;
 269   3              }
 270   2              if (p_buf == Uart2_Rx + uart2_rx_count) {
 271   3                  //检索当前包数据，都不包含，清空
 272   3                  uart2_rx_count = 0;
 273   3                  break;
 274   3              }
 275   2              //Uart4_Rx中剩余的数据长度
 276   2              temp_len = uart2_rx_count - (p_buf - Uart2_Rx);
 277   2      
 278   2              //以下处理不包含校验
 279   2              switch(protl_type) {
 280   3                  case PROTOCOL_UNKNOWN:
 281   3                      memset(frame_buf,0,sizeof(frame_buf));
 282   3                      find_frame_re = UNKNOWN;
 283   3                      frame_error = 0;
 284   3                      frame_length = 0;
 285   3                      for (i = 0; i < 3; i ++) {
 286   4                          frame_results[i] = UNKNOWN;
 287   4                      }
 288   3                      
 289   3                  case PROTOCOL_DL_T_645:
 290   3                      find_frame_re = find_dlt645_frame(p_buf, frame_buf, &frame_length, temp_len);
 291   3      
 292   3                      frame_results[0] = find_frame_re;
 293   3                      if (find_frame_re == OK) {
 294   4                            if (parse_dlt645_frame(frame_buf, frame_length, (uint8_t *)&s_dl_t_645_8283_body)) {
 295   5                                //解析到一包有效数据
 296   5                              dlt645_handle();
 297   5                              memset(&s_dl_t_645_8283_body, 0, sizeof(dl_t_645_8283_body));
 298   5                            }
 299   4                            break;
 300   4                      }
 301   3      
 302   3                  case PROTOCOL_OTHER:
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 6   

 303   3                      //此处添加其他协议解析
 304   3                      //break;
 305   3                      
 306   3                  default :
 307   3                      if (frame_results[0] == ERROR ) {
 308   4                          //缓存区的数据不满足现有协议的解析
 309   4                          //继续找下一个0x7F起始符
 310   4                          p_buf ++;//跳过当前的0x7F
 311   4                          //检索0x7F开头的数据
 312   4                          while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 313   5                              p_buf ++;
 314   5                          }
 315   4                          
 316   4                          if (p_buf == Uart2_Rx + uart2_rx_count) {
 317   5                              //检索当前包数据，都不包含，清空
 318   5                              uart2_rx_count = 0;
 319   5                              break;
 320   5                          }
 321   4      
 322   4                          //找到下一条0x5A开头的数据帧
 323   4                          frame_error = 1;
 324   4                      }
 325   3                      break;
 326   3              }
 327   2      
 328   2              //当成功检索到一帧数据或缓存区的数据不满足现有协议的解析
 329   2              //buf中剩余的有效数据前移
 330   2              if (find_frame_re == OK || frame_error) {
 331   3                  //uart_rcvd_buf剩余的数据长度
 332   3                  temp_len = uart2_rx_count - (p_buf - Uart2_Rx) - frame_length;
 333   3                  if (temp_len > 0) {
 334   4                      //当前uart_rcvd_buf中剩余的数据前移
 335   4                      for (i = 0; i < temp_len; i ++) {
 336   5                          Uart2_Rx[i] = *(p_buf + frame_length + i);
 337   5                          *(p_buf + frame_length + i) = 0x00;
 338   5                      }
 339   4                      has_content = 1;//继续循环解析
 340   4                  } else {
 341   4                      //解析过的位清空
 342   4                      for (i = 0; i < (p_buf - Uart2_Rx) + frame_length; i ++) {
 343   5                          Uart2_Rx[i] = 0x00;
 344   5                      }
 345   4                      has_content = 0;
 346   4                  }
 347   3                  uart2_rx_count = temp_len;
 348   3              } else {
 349   3                  has_content = 0;
 350   3              }
 351   2          }
 352   1      }
 353          
 354          
 355          /*****************************************************************************
 356          主流程*/
 357          void HandleProc(void)
 358          {
 359   1          if(GetValue0F00())    //检测是否有触摸上传数据
 360   1          {
 361   2            TouchHandle();
 362   2          }
 363   1          ParseBuffer();
 364   1      }
C51 COMPILER V9.59.0.0   HANDLE                                                            04/21/2025 17:51:45 PAGE 7   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1592    ----
   CONSTANT SIZE    =     97    ----
   XDATA SIZE       =    771      68
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
