C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HOME
OBJECT MODULE PLACED IN .\Objects\home.obj
COMPILER INVOKED BY: D:\Keil_V5_C51\C51\BIN\C51.EXE PAGE\home.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\A
                    -PP;.\PAGE) DEBUG PRINT(.\Listings\home.lst) TABS(2) OBJECT(.\Objects\home.obj)

line level    source

   1          #include  "home.h"
   2          #include "dgus.h"
   3          #include "qrj.h"
   4          #include "sz.h"
   5          
   6          #include <math.h>
   7          
   8          #include "start_win.h"
   9          uint8_t CurrentPageNum[2]={0};  //CurrentPageNum[1]是当前页面
  10          
  11          float L_M = 0.0;//距离 m
  12          //u16 Time_static_16; //静态的时间由距离得出的
  13          void Prepare_qrj_zx_qy(); //一直运行的 无论哪个状态适用与前三个模式
  14          
  15          /*********************************************************************************
  16          中心模式：求面积和直径  面积是区域模式的四分之一，直径是区域模式的二分之一
  17          区域模式：求面积和直径  
  18          气溶胶模式：求体积
  19          ********************************************************************************/
  20          float Tanx=0.4557;
  21          float pai=3.1415;
  22          float Tan_zhongxin=0.04366094;
  23          float zhongxin_35mm=0.4008159;  //=0.0175m/tan2.5
  24          
  25          float L_m_D_V_S=0.00;       //距离 单位:M
  26          float Square=0.00;      //面积 单位：M^2
  27          float D=0.00;         //直径 单位：M
  28          float Volume=0.00;          //气溶胶体积 单位：M^3
  29          
  30          
  31          u8 last_page;
  32          //放在主函数里循环执行当前页面的程序
  33          void ReadCurrentPage_run()    
  34          {
  35   1      
  36   1        
  37   1        ReadDGUS(0x14,(uint8_t *)&CurrentPageNum,sizeof(CurrentPageNum));
  38   1        switch(CurrentPageNum[1])
  39   1        {
  40   2          case Page_home: 
  41   2          {
  42   3            last_page = CurrentPageNum[1];
  43   3            current_st = 0x01;
  44   3            break;
  45   3          }
  46   2          
  47   2          case Page_qirongjiao:
  48   2          {
  49   3            
  50   3            
  51   3          //  QRJ_prepare();
  52   3            
  53   3            Draw_chart();   //开启画图
  54   3            
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 2   

  55   3            
  56   3            QRJ_Home();
  57   3            Prepare_qrj_zx_qy();
  58   3            
  59   3            break;
  60   3          }
  61   2            
  62   2          case Page_zhongxin:
  63   2          {
  64   3            
  65   3            Prepare_qrj_zx_qy();      
  66   3            
  67   3            
  68   3            break;
  69   3          }
  70   2          
  71   2          case Page_quyu:
  72   2          {
  73   3            
  74   3            Prepare_qrj_zx_qy();
  75   3            
  76   3            break;
  77   3          }
  78   2          
  79   2              
  80   2          case Page_chengxuhua:
  81   2          {
  82   3      
  83   3            break;
  84   3          }
  85   2          
  86   2              
  87   2          case Page_zhiliao:
  88   2          {
  89   3            break;
  90   3          }
  91   2          
  92   2              
  93   2          case Page_shoudong:
  94   2          {   
  95   3      
  96   3            break;
  97   3          }
  98   2                
  99   2          case Page_lianji:
 100   2          {
 101   3        
 102   3            break;
 103   3          }
 104   2          
 105   2              
 106   2          case Page_shezhi:
 107   2          {
 108   3            SZ_Home();
 109   3            break;
 110   3          }
 111   2          
 112   2          case Page_chengxuhua_JUMP:
 113   2          {
 114   3            
 115   3            break;
 116   3          }
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 3   

 117   2              
 118   2            case Page_zhiliao_JUMP:
 119   2          {
 120   3            break;
 121   3          }
 122   2          default:
 123   2          {
 124   3            
 125   3            break;
 126   3          }
 127   2          
 128   2        }
 129   1        
 130   1      }
 131          
 132          
 133          
 134          
 135          
 136          
 137          //void S_D_Surfaces_All()
 138          //{
 139          
 140          //  L_m =  (float)(L_int/1000.000)+zhongxin_35mm;
 141          //  if(W_S[0]==2)//zx
 142          //  {
 143          //  D = Tan_zhongxin*2*L_m;
 144          //  Square  = (float)(pow(L_m*Tan_zhongxin,2)*pai); 
 145          //  }
 146          //  else 
 147          //  {
 148          //  D = Tanx*2*L_m;
 149          //  Square  = (float)(pow(L_m*Tanx,2)*pai); 
 150          //  }
 151          //  Volume  = Square*L_m/3.00;
 152          //}
 153          
 154          
 155          
 156          /**************************************************
 157          距离 换算 为功率大小
 158          形参为毫米
 159          *******************************************************/
 160          //double change_P_uW=0.0; //lg change_P_uW_doing
 161          double change_P_uW_doing=0.0; //根据距离在推出的功率
 162          //double change_P_mW_First=0.0;
 163          
 164          void L_mm_TO_P_uw(u16 L_mm_TO_P,u8 current_page)    //形式参数毫米
 165          {
 166   1        u8 L_mm_TO_P_uw_FLAG=0;
 167   1        double BEISHU=0.00000;
 168   1        double L_CM;
 169   1        double mihanshu=0.0;
 170   1        
 171   1        
 172   1        L_CM=L_mm_TO_P/10;
 173   1        
 174   1        if(L_CM<=10&& L_CM>=5) L_mm_TO_P_uw_FLAG=1;
 175   1          else  if(L_CM<=20&& L_CM>10) L_mm_TO_P_uw_FLAG=2;
 176   1            else  if(L_CM<=100&& L_CM>20) L_mm_TO_P_uw_FLAG=3;
 177   1            else  if(L_CM<=300&& L_CM>100) L_mm_TO_P_uw_FLAG=4;
 178   1              else L_mm_TO_P_uw_FLAG=5;
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 4   

 179   1        
 180   1        /***66300.18x^-1.86****/
 181   1        switch(L_mm_TO_P_uw_FLAG)
 182   1        {
 183   2          case 1:
 184   2          {
 185   3            mihanshu = pow((double)(L_CM),-1.6);
 186   3            BEISHU = 36527.86*mihanshu;
 187   3            change_P_uW_doing=BEISHU;
 188   3            break;
 189   3          }
 190   2          
 191   2          
 192   2              case 2:
 193   2          {
 194   3            mihanshu = pow((double)(L_CM),-1.85);
 195   3            BEISHU = 65617.44*mihanshu;
 196   3            change_P_uW_doing=BEISHU;
 197   3            break;
 198   3          }
 199   2          
 200   2              case 3:
 201   2          {
 202   3            mihanshu = pow((double)(L_CM),-1.81);
 203   3            BEISHU = 57622.25*mihanshu;
 204   3            change_P_uW_doing=BEISHU;
 205   3            break;
 206   3          }
 207   2          
 208   2              case 4:
 209   2          {
 210   3            mihanshu = pow((double)(L_CM),-2);
 211   3            BEISHU = 139224.07*mihanshu;
 212   3            change_P_uW_doing=BEISHU;
 213   3            break;
 214   3          }
 215   2              
 216   2          default:
 217   2          {
 218   3            L_mm_TO_P_uw_FLAG=0x0a;
 219   3          }
 220   2        }
 221   1        
 222   1        if(Page_qirongjiao==current_page || Page_quyu==current_page)
 223   1        {
 224   2          change_P_uW_doing=change_P_uW_doing*0.6;  //气溶胶和区域需要乘0.6
 225   2        }
 226   1        //if(W_S[0]!=2&&MODE==1)change_P_mW_doing=change_P_mW_doing*0.6;  //气溶胶和区域需要乘0.6
 227   1      //  change_P_mW_First=change_P_mW_doing/1000;   //uw变mw
 228   1      //  change_P_uW=log10(change_P_uW_doing); //用在后期画图判断的时候
 229   1      //  P_FINISH=change_P_mW_First;//uw变mw
 230   1      
 231   1      }
 232          
 233          
 234          
 235          
 236          u16 baifenbi_T=0;
 237          //距离、功率、体积、直径、面积
 238          void Prepare_qrj_zx_qy()  //一直运行的 无论哪个状态适用与前三个模式
 239          {
 240   1      
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 5   

 241   1            L_mm_TO_P_uw(L_int,CurrentPageNum[1]);  //根据距离得到功率 
 242   1            WriteDGUS(0x2600,(uint8_t *)&change_P_uW_doing,sizeof(change_P_uW_doing));    /*********功率*************
             -***/
 243   1            L_M = (float)(L_int/1000.00f);  //m数据/*********距离****************/
 244   1              
 245   1        if(CurrentPageNum[1]==Page_qirongjiao)
 246   1        {
 247   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 248   2            D = Tanx*2*L_m_D_V_S;
 249   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 250   2            Volume  = Square*L_m_D_V_S/3.00;
 251   2            WriteDGUS(0x2850,(uint8_t *)&(Volume),sizeof(Volume));  //气溶胶为体积
 252   2          
 253   2              //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 254   2        }
 255   1        else if(CurrentPageNum[1]==Page_zhongxin)
 256   1        {
 257   2                
 258   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 259   2            D = Tan_zhongxin*2*L_m_D_V_S;
 260   2            Square  = (float)(pow(L_m_D_V_S*Tan_zhongxin,2)*pai); 
 261   2            
 262   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 263   2          
 264   2            //        baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 265   2        }
 266   1        else if(CurrentPageNum[1]==Page_quyu)
 267   1        {
 268   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 269   2            D = Tanx*2*L_m_D_V_S;
 270   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 271   2            
 272   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 273   2          
 274   2                  //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 275   2        }
 276   1        
 277   1            WriteDGUS(0x2500, (uint8_t *)&L_M,sizeof(L_M)); 
 278   1            WriteDGUS(0x2840,(uint8_t *)&(D),sizeof(D));      //直径
 279   1      
 280   1            //WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 281   1      }
 282          
 283          
 284          
 285          
 286          float mJ_doing=0.0; //已照射的mj
 287          u32 time_100ms=0; //100ms的中断标志位
 288          u32 time_doing=0;//已经照射的时间
 289          //气溶胶、中心、区域 run函数
 290          
 291          void QRJ_ZX__QY_RUN(Callback_u16 callback_u16)            //放在QRJ_run
 292          {
 293   1        u16 ResTime_sec;
 294   1        u16 ResTime_min;  
 295   1        static u32 t_1=0;
 296   1      if(time_100ms)      //100ms老是不好用解决方式 ： 定时器里设定100ms而不是1ms
 297   1      {
 298   2          time_100ms=0;
 299   2          //uJ_doing+=143;
 300   2          //mJ_doing=mJ_doing+(change_P_uW_doing/1000); //每0.1秒累加当前的mj辐射量
 301   2          mJ_doing=mJ_doing+(change_P_uW_doing/10000.0f); 
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 6   

 302   2          t_1++;
 303   2          if(t_1>=10) ////1s
 304   2          {
 305   3            t_1=0;
 306   3        //    mJ_doing=mJ_doing+(change_P_uW_doing/1000);
 307   3          //  time_100ms=0;
 308   3            time_doing++; //工作时长  
 309   3            //TIME_static--;
 310   3          }
 311   2          callback_u16(L_int);
 312   2         // QRJ_mm_to_s(L_int); //根据距离和功率得到时间
 313   2        
 314   2          ResTime_min=(u16)(TIME_static)/60;
 315   2          ResTime_sec=(u16)(TIME_static)%60;
 316   2      
 317   2          WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 318   2          WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 319   2          
 320   2          //总时间 等于剩余时间加上已经工作的时间
 321   2          ResTime_min=(u16)(TIME_static+time_doing)/60;
 322   2          ResTime_sec=(u16)(TIME_static+time_doing)%60;
 323   2          WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 324   2          WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 325   2          
 326   2      
 327   2          WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
 328   2          
 329   2          if(mJ_doing*1000.0f > qirongjiao_j){mJ_doing=qirongjiao_j/1000.0f;} //防止照射过多
 330   2          baifenbi_T = ((mJ_doing*1000.00*100) / qirongjiao_j ) ;
 331   2          WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 332   2          
 333   2        } 
 334   1      }
 335          
 336          
 337          
 338          
 339          
 340          /********************************************读取当前页面并锁定*************************************/
 341          /****************************************
 342          滑动页面 00
 343          返回键 01
 344          增量调制（log值） 04
 345          *****************************************/
 346          
 347          void Lock_current_page_zengliang(u8 id_1,u8 daima_1);
 348          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1);
 349          u8 st_current[2]={0};
 350          static struct{
 351            u16 Head ;
 352            u8 page_0;//固定为0x00
 353            u8 page_1;
 354            
 355            u8 touch_id;
 356            u8 touch_daima;
 357          
 358            u16 mode;
 359          
 360          }PageLock;
 361          
 362          
 363          void PageLock_Init()  //初始化
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 7   

 364          {
 365   1        PageLock.Head=0x5aa5;
 366   1        PageLock.page_0=0x00;
 367   1      }
 368          
 369          
 370          
 371            u16 Current_Lock=0;   //0表示未上锁
 372            u16 mode_close = 0x0000;
 373            u16 mode_open = 0x0001;
 374          
 375            u16 ControlPageLock_Adress = 0xb0;
 376          
 377            u8 PageSliding = 0x0b;
 378            u8 Returnkey = 0x05;
 379            //u8 zengliang=0x03;
 380          
 381          
 382          void Lock_current_page()
 383          {
 384   1        if(CurrentPageNum[1] == Page_qirongjiao)
 385   1        {
 386   2          Lock_current_page_zengliang(0x04,0x02); //锁住增量调制 log值
 387   2          //WriteDGUS(0x5105,(uint8_t *)&(icon[0]),sizeof(icon[0]));//隐藏图标
 388   2        }
 389   1      //  if(MODE==1)       
 390   1      //  {
 391   1      //        if(W_S[0]==1)//气溶胶
 392   1      //    {
 393   1      //    WriteDGUS(0x5105,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 394   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 395   1      //    }
 396   1      //    else if(W_S[0]==2)//zx
 397   1      //    {
 398   1      //    WriteDGUS(0x5106,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 399   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 400   1      //    }
 401   1      //        else if(W_S[0]==3)//qy
 402   1      //    {
 403   1      //          WriteDGUS(0x5107,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 404   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 405   1      
 406   1      //    }
 407   1      //  }
 408   1        
 409   1        //ReadDGUS(ReadCurrentPage_Adress,(uint8_t *)&Current_page,sizeof(Current_page)); //返回值 00 06
 410   1        PageLock.page_1=CurrentPageNum[1];
 411   1        PageLock.touch_id=0x00;     //滑动翻页设置为 0位置
 412   1        PageLock.touch_daima=PageSliding;
 413   1        PageLock.mode=mode_close;
 414   1      
 415   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 416   1        while(1)
 417   1        {
 418   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 419   2          if(st_current[0]==st_current[1])
 420   2          {break;}
 421   2        }
 422   1        
 423   1        PageLock.touch_id=0x01;   //返回键 设置为1位置
 424   1        PageLock.touch_daima=Returnkey;
 425   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 8   

 426   1        while(1)
 427   1        {
 428   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 429   2          if(st_current[0]==st_current[1])
 430   2          {break;}
 431   2        }
 432   1        Current_Lock=1;
 433   1      
 434   1      }
 435          
 436          void Unlock_current_page()
 437          {
 438   1      
 439   1        if(Current_Lock==1) //先判断是否上锁
 440   1        {
 441   2            if(CurrentPageNum[1] == Page_qirongjiao)
 442   2          {
 443   3          //WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 444   3            Unlock_current_page_zengliang(0x04,0x02);
 445   3          }
 446   2      //      if(MODE==1)       
 447   2      //  {
 448   2      //    if(W_S[0]==1)//气溶胶
 449   2      //    {
 450   2      //    WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 451   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 452   2      //    }
 453   2      //    else if(W_S[0]==2)//zx
 454   2      //    {
 455   2      //          WriteDGUS(0x5106,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 456   2      //        Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 457   2      
 458   2      //    }
 459   2      //        else if(W_S[0]==3)//qy
 460   2      //    {
 461   2      //    WriteDGUS(0x5107,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 462   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 463   2      //    }
 464   2      //  }
 465   2        
 466   2      
 467   2            PageLock.page_1=CurrentPageNum[1];  //解锁返回键
 468   2            PageLock.mode=mode_open;
 469   2            PageLock.touch_daima=Returnkey; 
 470   2            PageLock.touch_id=0x01; 
 471   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 472   2          while(1)
 473   2        {
 474   3          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 475   3          if(st_current[0]==st_current[1])
 476   3          {break;}
 477   3        }
 478   2            PageLock.touch_daima=PageSliding;   //解锁滑动模块
 479   2            PageLock.touch_id=0x00;   
 480   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 481   2        while(1)
 482   2        {
 483   3          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 484   3          if(st_current[0]==st_current[1])
 485   3          {break;}
 486   3        }
 487   2            Current_Lock=0;
C51 COMPILER V9.59.0.0   HOME                                                              05/07/2025 23:55:57 PAGE 9   

 488   2      
 489   2        }
 490   1        
 491   1      
 492   1      }
 493          
 494          //锁住增量 
 495          void Lock_current_page_zengliang(u8 id_1,u8 daima_1)
 496          {
 497   1      
 498   1        PageLock.page_1=CurrentPageNum[1];
 499   1        PageLock.touch_id=id_1;     //调节log mj的触控增量锁住
 500   1        PageLock.touch_daima=daima_1;
 501   1        PageLock.mode=mode_close;
 502   1      
 503   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 504   1        while(1)
 505   1        {
 506   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 507   2          if(st_current[0]==st_current[1])
 508   2          {break;}
 509   2        }
 510   1      }
 511          
 512          
 513          
 514          //解锁增量
 515          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1)
 516          {
 517   1        
 518   1        PageLock.page_1=CurrentPageNum[1];
 519   1        PageLock.touch_id=id_1;   //返回键 设置为1位置
 520   1        PageLock.touch_daima=daima_1;
 521   1        PageLock.mode=mode_open;
 522   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 523   1          while(1)
 524   1        {
 525   2          ReadDGUS(ControlPageLock_Adress,(uint8_t *)&st_current,sizeof(st_current));
 526   2          if(st_current[0]==st_current[1])
 527   2          {break;}
 528   2        }
 529   1      }
 530          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2666    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     81      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
