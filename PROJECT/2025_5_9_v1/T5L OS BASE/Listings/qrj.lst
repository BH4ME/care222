C51 COMPILER V9.59.0.0   QRJ                                                               05/09/2025 19:35:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE QRJ
OBJECT MODULE PLACED IN .\Objects\qrj.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\qrj.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\
                    -APP;.\PAGE) DEBUG PRINT(.\Listings\qrj.lst) TABS(2) OBJECT(.\Objects\qrj.obj)

line level    source

   1          #include  "qrj.h"
   2          #include "dgus.h"
   3          #include "home.h"
   4          //气溶胶消毒
   5          double TIME_static=0.0;
   6          void QRJ_mm_to_s(u16 L_T);
   7          
   8          u16 icon[4]={0x00,0x01,0x02,0x03};
   9          
  10          u8 current_st;
  11          //初始化0x00，第一次进入界面0x01，就绪态0x02（第一次进入界面只运行一次后，未执行任务），运行态0x03开始，
  12          //运行态暂停0x04，运行态结束0x05,复位0x06
  13          /*******************************************************
  14          //开机初始化QRJ_Init 只运行一次
  15          第一次进入界面（从别的页面跳转过来的），或者点击复位按键 QRJ_Reset 只运行一次
  16          在当前页面但未进行任务及未开始或未处于暂停状态QRJ_prepare
  17          进行任务中（处于开始或暂停状态，任务完成仍为开始状态）QRJ_run 但只有按键按的时候才执行
  18          ******************************************************/
  19          
  20          void QRJ_done() //正常照射完成
  21          {
  22   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  23   1      }
  24          
  25          
  26          void QRJ_run()  //按下操作 正在照射   
  27          {
  28   1        //QRJ_ZX__QY_RUN();
  29   1        QRJ_ZX__QY_RUN(QRJ_mm_to_s);  
  30   1      
  31   1        //触发 照射完成
  32   1        if(mJ_doing*1000 >= qirongjiao_j  ||  TIME_static<=0  ||  baifenbi_T >=100)
  33   1        {
  34   2          
  35   2        
  36   2          
  37   2          current_st = 0x05;  //状态位设置为 自然完成 
  38   2        }
  39   1        
  40   1      }
  41          
  42          
  43          
  44          void QRJ_INIT()   //开机初始化
  45          {
  46   1        current_st = 0x00;
  47   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));
  48   1      }
  49          
  50          
  51          
  52          //u8 last_page;
  53          //主要功能解锁触控单元
  54          void  QRJ_Set()       //每次进入页面初始化
C51 COMPILER V9.59.0.0   QRJ                                                               05/09/2025 19:35:34 PAGE 2   

  55          {
  56   1      
  57   1      }
  58          
  59          
  60          void  QRJ_Reset()       //按下复位键 只进行一次 
  61          {
  62   1        
  63   1        mJ_doing = 0; //总照射能量 
  64   1        WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
  65   1        
  66   1        baifenbi_T = 0; //完成百分比为0
  67   1        WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    
  68   1        
  69   1        time_doing=0; //已进行 的时间置为0
  70   1        
  71   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  72   1         
  73   1        
  74   1      }
  75            
  76          //    L_int   mm
  77          
  78          float qirongjiao_j=0.0;
  79          
  80          void QRJ_prepare()  //在当前页面 但未操作
  81          {
  82   1        u16 ResTime_sec;
  83   1        u16 ResTime_min;  
  84   1        u16 QRJ_mj; 
  85   1      
  86   1      
  87   1        ReadDGUS(0x5100,(uint8_t *)&QRJ_mj,sizeof(QRJ_mj));   //读取杀灭log值 范围1~5
  88   1        switch(QRJ_mj)
  89   1        {
  90   2          case 1:
  91   2          {
  92   3            qirongjiao_j  = 500;      //单位是uj 而不是mj
  93   3            break;
  94   3          }
  95   2              case 2:
  96   2          {
  97   3            qirongjiao_j  = 1000;
  98   3            break;
  99   3          }
 100   2              case 3:
 101   2          {
 102   3            qirongjiao_j  = 1500;
 103   3            break;
 104   3          }
 105   2              case 4:
 106   2          {
 107   3            qirongjiao_j  = 2500;
 108   3            break;
 109   3          }
 110   2              case 5:
 111   2          {
 112   3            qirongjiao_j  = 4000;
 113   3            break;
 114   3          }
 115   2        }
 116   1        
C51 COMPILER V9.59.0.0   QRJ                                                               05/09/2025 19:35:34 PAGE 3   

 117   1        QRJ_mm_to_s(L_int); //根据距离和功率得到时间
 118   1        
 119   1        ResTime_min=(u16)(TIME_static)/60;
 120   1        ResTime_sec=(u16)(TIME_static)%60;
 121   1        WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 122   1        WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 123   1        WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 124   1        WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 125   1      
 126   1      }
 127            
 128            
 129            
 130          /******************输入距离给出时间 mm->s*********/
 131          
 132          
 133          void QRJ_mm_to_s(u16 L_T) 
 134          {
 135   1        u8 L_T_S_FLAG;
 136   1        double L_CM;
 137   1        L_CM=L_T/10.0;
 138   1        if(L_CM<400 && L_CM>5) L_T_S_FLAG=1;    //在5cm~4m范围
 139   1              else L_T_S_FLAG=5;
 140   1      
 141   1        if(current_st!=0x03)  //不等于运行态
 142   1        {
 143   2        switch(L_T_S_FLAG)
 144   2        {
 145   3          case 1:
 146   3          {
 147   4            TIME_static=qirongjiao_j/change_P_uW_doing;
 148   4            break;
 149   4          }
 150   3      
 151   3              default:
 152   3          {
 153   4            L_T_S_FLAG=6;
 154   4            
 155   4            break;
 156   4          }
 157   3        }
 158   2      }
 159   1        
 160   1        else  //运行态
 161   1          
 162   1        {
 163   2          
 164   2          switch(L_T_S_FLAG)
 165   2        {
 166   3          case 1:
 167   3          {
 168   4            //TIME_static=((float)(qirongjiao_j *100- uJ_doing))  / (14.3f*100) ;
 169   4            TIME_static=((float)(qirongjiao_j - mJ_doing*1000)) / (change_P_uW_doing) ;
 170   4            break;
 171   4          }
 172   3      
 173   3              default:
 174   3          {
 175   4            L_T_S_FLAG=6;
 176   4            
 177   4            break;
 178   4          }
C51 COMPILER V9.59.0.0   QRJ                                                               05/09/2025 19:35:34 PAGE 4   

 179   3        }
 180   2          
 181   2        
 182   2        }
 183   1          
 184   1        
 185   1      }
 186          
 187          
 188          
 189          
 190          
 191          void QRJ_stop()
 192          {
 193   1        
 194   1      }
 195          
 196          
 197          
 198          
 199          
 200          void QRJ_Home() //循环运行
 201          {
 202   1        
 203   1          if(last_page!=CurrentPageNum[1])  //第一次进入页面
 204   1        {
 205   2          last_page=CurrentPageNum[1];  
 206   2          current_st = 0x01;
 207   2        }
 208   1      //  else 
 209   1      //  {
 210   1      //    
 211   1      //  } 
 212   1        
 213   1        switch(current_st)    //在handle.c触摸反馈中检测
 214   1        {
 215   2          case 0:   //开机初始化状态
 216   2          {
 217   3            current_st = 0x01;  //初始化成功，跳转到第一次初始化态
 218   3          //  break;
 219   3          }
 220   2          
 221   2          case 1:   //第一次初始化态
 222   2          {
 223   3            current_st = 0x02;  //第一次初始化成功，跳转到就绪态
 224   3            QRJ_Set();
 225   3            
 226   3          //  break;
 227   3          }
 228   2          
 229   2          case 2:   //就绪态
 230   2          {
 231   3            QRJ_prepare();
 232   3            break;
 233   3          }
 234   2          
 235   2              case 3:   //运行态开始
 236   2          {
 237   3            UV=1;
 238   3            QRJ_run();
 239   3            break;
 240   3          }
C51 COMPILER V9.59.0.0   QRJ                                                               05/09/2025 19:35:34 PAGE 5   

 241   2          
 242   2              case 4:   //运行态暂停
 243   2          {
 244   3            UV=0;
 245   3            QRJ_stop();
 246   3            break;
 247   3          }
 248   2          
 249   2              case 5:   //运行态结束 此为自然结束不包含复位
 250   2          {
 251   3            UV=0;
 252   3            QRJ_done(); 
 253   3            break;
 254   3          }
 255   2              case 6:   //运行态复位 只进行一次 然后跳转到第一次初始化
 256   2          {
 257   3            UV=0;
 258   3            QRJ_Reset();  //只运行一次
 259   3            Unlock_current_page();//解锁
 260   3            
 261   3        //    WriteDGUS(0x5105,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 262   3            current_st = 0x01;  // 置位 到第一次初始化    
 263   3            break;
 264   3          }
 265   2          
 266   2          default :
 267   2          {
 268   3            break;
 269   3          }
 270   2          
 271   2        }
 272   1        
 273   1        
 274   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    835    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     17      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
