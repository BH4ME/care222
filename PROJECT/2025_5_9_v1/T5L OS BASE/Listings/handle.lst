C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HANDLE
OBJECT MODULE PLACED IN .\Objects\handle.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\handle.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sour
                    -ces;.\APP;.\PAGE) DEBUG PRINT(.\Listings\handle.lst) TABS(2) OBJECT(.\Objects\handle.obj)

line level    source

   1          /******************************************************************************
   2          * 文 件 名   : handle.c
   3          * 版 本 号   : V1.0
   4          * 作    者   : pinot
   5          * 生成日期   : 2019年11月27日
   6          * 功能描述   : 逻辑处理
   7          * 修改历史   :
   8          * 日    期   :
   9          * 作    者   :
  10          * 修改内容   :
  11          ******************************************************************************/
  12          
  13          /*****************************************************************************
  14          自定义头文件*/
  15          #include "handle.h"
  16          #include  "i2c.h"
  17          #include "home.h"
  18          
  19          #include "qrj.h"
  20          #include "interactive.h"
  21          #include "sz.h"
  22          /*****************************************************************************
  23          全局变量*/
  24          //内部RAM
  25          uint8_t value0F00[4] = {0};
  26          uint8_t xp_status=0;
  27          
  28          //外部RAM
  29          typedef struct dlt_645_8283
  30          {
  31              uint8_t st_byte1;//帧起始符
  32              uint8_t st_byte2;//帧起始符
  33              uint8_t lenth;//长度
  34              uint8_t func;//类型
  35              uint8_t addr1;//地址
  36              uint8_t addr2;//地址  
  37              uint8_t edata[250];//数据内容
  38          }dl_t_645_8283_body;
  39          dl_t_645_8283_body xdata s_dl_t_645_8283_body={0};
  40          
  41          
  42          
  43          //后期函数封装方便在别的.c文件中访问结构体
  44          u8 get_data1(void) {
  45   1          return s_dl_t_645_8283_body.edata[1]; //低字节
  46   1      }
  47          
  48          
  49          
  50          
  51          #define FRAME_BUFFER_LEN 255
  52          uint8_t xdata frame_buf[FRAME_BUFFER_LEN];//用来存取一帧数据
  53          uint8_t xdata frame_buf1[FRAME_BUFFER_LEN]=0;//用来存取一帧数据
  54          #define DLT_645_LEAST_LEN 7
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 2   

  55          
  56          
  57          //代码空间
  58          uint8_t code CUart2[] = "Uart2Init Done!!!123";
  59          uint8_t code CUart3[] = "Uart3Init Done!!!";
  60          uint8_t code CUart4[] = "Uart4Init Done!!!";
  61          uint8_t code CUart5[] = "Uart5Init Done!!!";
  62          
  63          
  64          //解析到一帧数据可能出现的情况
  65          typedef enum frame_result
  66          {
  67              UNKNOWN,
  68              OK,           //成功找到一帧
  69              UNFINISHED,   //未接收完成
  70              ERROR,        //不满足此协议
  71          }frame_result_t;
  72          
  73          //定义协议类型
  74          typedef enum protocol_type
  75          {
  76              PROTOCOL_UNKNOWN,
  77              PROTOCOL_DL_T_698,
  78              PROTOCOL_DL_T_645,
  79              PROTOCOL_OTHER,
  80          }protocol_type_t;
  81          
  82          #if 1
  83          /*****************************************************************************
  84          控制亮度*/
  85          void SetBlight(uint8_t n)
  86          {
  87   1      //  uint8_t temp[4]={0};
  88   1        WriteDGUS(DHW_LEDCFG,(uint8_t *)&n,sizeof(n));
  89   1      //  do
  90   1      //  {
  91   1      //    DelayMs(5);
  92   1      //    ReadDGUS(DHW_LEDNOW,temp,2);//设置亮度与获取到的亮度不一致
  93   1      //  }while(!(temp[1]==n));
  94   1      }
  95          /*****************************************************************************
  96          控制伴音*/
  97          void SetVoice(int8_t status)
  98          {
  99   1        uint8_t temp[4]={0};
 100   1        ReadDGUS(DHW_SYSCFG,temp,sizeof(temp));
 101   1        temp[0]=0x5A;
 102   1        if(1==status){temp[3]&=0xF7;}
 103   1        else if(2==status){temp[3]|=0x08;}
 104   1        else{return;}
 105   1        WriteDGUS(DHW_SYSCFG,temp,sizeof(temp));
 106   1        do
 107   1        {
 108   2          DelayMs(5);
 109   2          ReadDGUS(DHW_SYSCFG,temp,1);
 110   2        }while(temp[0]!=0);
 111   1      }
 112          
 113          #endif
 114          
 115          
 116          /*****************************************************************************
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 3   

 117          判断按键值是否有上传*/
 118          int8_t GetValue0F00(void)
 119          {
 120   1        uint8_t cleanData[4]={0};
 121   1        ReadDGUS(DHW_0F00,value0F00,sizeof(value0F00));
 122   1        if(0x5A == value0F00[0])
 123   1        {
 124   2          WriteDGUS(DHW_0F00,cleanData,sizeof(cleanData));
 125   2          return 1;
 126   2        }
 127   1        return 0;
 128   1      }
 129          /*****************************************************************************
 130          串口初次打印*/
 131          void InitUartSend(void)
 132          {
 133   1        Uart2SendStr(CUart2,sizeof(CUart2));
 134   1      //  Uart3SendStr(CUart3,sizeof(CUart3));
 135   1      //  Uart4SendStr(CUart4,sizeof(CUart4));
 136   1      //  Uart5SendStr(CUart5,sizeof(CUart5));
 137   1      }
 138          
 139          #if 1
 140          /*****************************************************************************
 141          跳转指定页面*/
 142          void JumpPage(uint16_t pageId)
 143          {
 144   1        uint8_t temp[4]={0x5A,0x01,0,0};
 145   1        temp[2]=(uint8_t)(pageId>>8);
 146   1        temp[3]=pageId;
 147   1        WriteDGUS(DHW_SPAGE,temp,sizeof(temp));
 148   1        do
 149   1        {
 150   2          DelayMs(5);
 151   2          ReadDGUS(DHW_SPAGE,temp,1);
 152   2        }while(temp[0]!=0);
 153   1      }
 154          #endif
 155          
 156          typedef void (*Callback_void) (void);
 157          
 158          void QRJ_ZX_QY_HANDLE(Callback_void Reset,u16 log_icon,uint16_t getDar)
 159          {
 160   1        if(getDar==0x3010)  //按下开始暂停 但不知道是哪个
 161   1            {
 162   2              //QRJ_run();
 163   2              
 164   2              
 165   2                if(get_data1()==0x01) //读取数据  开始
 166   2                {
 167   3                  if(current_st==0x05)  //自然结束
 168   3                  {
 169   4                    //QRJ_Reset();
 170   4                    Reset();
 171   4                    current_st = 0x03;
 172   4                    Lock_current_page();
 173   4                    WriteDGUS(0x3010,(uint8_t *)&icon[1],sizeof(icon[1]));  //图标 变开始
 174   4                  }
 175   3                  else  if(current_st == 0x02){current_st = 0x03;Lock_current_page();}  //由就绪态来的
 176   3                  
 177   3                  else if(current_st == 0x04){current_st = 0x03;}//由暂停来的
 178   3                }
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 4   

 179   2                else if(get_data1()==0x00)  //暂停
 180   2                {
 181   3                  current_st = 0x04;
 182   3                  
 183   3                }
 184   2                else current_st = 0x01;
 185   2              
 186   2            }
 187   1            else if(getDar==0x3020) //按下复位建
 188   1            {
 189   2              current_st = 0x06;  //复位
 190   2      
 191   2            }
 192   1            else if(getDar==0x5100) //按下log按键值
 193   1            {
 194   2              WriteDGUS(log_icon,(uint8_t *)&(icon[1]),sizeof(icon[1]));  //出现log图标
 195   2            //  WriteDGUS(qrj_log_icon,(uint8_t *)&(icon[1]),sizeof(icon[1]));  //出现log图标
 196   2            }
 197   1            
 198   1        
 199   1      }
 200          
 201          
 202          void page_set(uint16_t getDar)
 203          {
 204   1      //u16 char_attend_rtc=0x1300;
 205   1      //        else  if(Page_s[1]==Page_shezhi)
 206   1      //  {
 207   1        
 208   1        
 209   1        
 210   1          switch(CurrentPageNum[1])
 211   1        {
 212   2          case Page_home: 
 213   2          {
 214   3      
 215   3            
 216   3            break;
 217   3          }
 218   2          
 219   2          case Page_qirongjiao:
 220   2          {
 221   3            
 222   3            QRJ_ZX_QY_HANDLE(QRJ_Reset,qrj_log_icon,getDar);
 223   3            
 224   3            break;
 225   3          }
 226   2            
 227   2          case Page_zhongxin:
 228   2          {
 229   3            QRJ_ZX_QY_HANDLE(QRJ_Reset,zx_log_icon,getDar);
 230   3            
 231   3            break;
 232   3          }
 233   2          
 234   2          case Page_quyu:
 235   2          {
 236   3            
 237   3            QRJ_ZX_QY_HANDLE(QRJ_Reset,qy_log_icon,getDar);
 238   3            
 239   3            break;
 240   3          }
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 5   

 241   2          
 242   2              
 243   2          case Page_chengxuhua:
 244   2          {
 245   3      
 246   3            break;
 247   3          }
 248   2          
 249   2              
 250   2          case Page_zhiliao:
 251   2          {
 252   3            break;
 253   3          }
 254   2          
 255   2              
 256   2          case Page_shoudong:
 257   2          {   
 258   3      
 259   3            break;
 260   3          }
 261   2                
 262   2          case Page_lianji:
 263   2          {
 264   3        
 265   3            break;
 266   3          }
 267   2          
 268   2              
 269   2          case Page_shezhi:
 270   2          {
 271   3        if(getDar==0x1440 ||  getDar==0x1441) //屏幕亮度
 272   3        {
 273   4          set_page_LED_write();
 274   4        }
 275   3        else if(getDar==0x1400)   //rtc set finish
 276   3        {
 277   4          RTC_SET_IN(); 
 278   4        }
 279   3        else if(getDar==0x1410)   //治疗预设写入 flash
 280   3        {
 281   4          zhiliao_SET();
 282   4        }
 283   3        else if(getDar==0x1420)   //开机自动启动 
 284   3        {
 285   4          //Sudoopen_set_handle();
 286   4        }
 287   3        else if(getDar==0x1430)         //恢复出厂设置
 288   3        {
 289   4         //reset_data();
 290   4        }
 291   3        else if(getDar==0x1280)     //开关蜂鸣器
 292   3        {
 293   4          if(get_data1()==1)
 294   4          {
 295   5            //open
 296   5            buzzer_open_handle();
 297   5          //  WriteNorFlash_Str(Nor_P_set,(uint8_t *)&(dynamic_static_flag),2);   
 298   5          }
 299   4          
 300   4          else if(get_data1()==0)
 301   4          {
 302   5            //close
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 6   

 303   5            buzzer_close_handle();
 304   5          }
 305   4        
 306   4      
 307   4          //ReadDGUS(0x1280,(uint8_t *)&(dynamic_static_flag),sizeof(dynamic_static_flag));   //判断是静态时间 还是
             -动态时间
 308   4          //WriteNorFlash_Str(Nor_P_set,(uint8_t *)&(dynamic_static_flag),2);   
 309   4      
 310   4        }
 311   3        
 312   3            break;
 313   3          }
 314   2          
 315   2          case Page_chengxuhua_JUMP:
 316   2          {
 317   3            
 318   3            break;
 319   3          }
 320   2              
 321   2            case Page_zhiliao_JUMP:
 322   2          {
 323   3            break;
 324   3          }
 325   2          default:
 326   2          {
 327   3            
 328   3            break;
 329   3          }
 330   2          
 331   2        }
 332   1        
 333   1      
 334   1        
 335   1        
 336   1        
 337   1        
 338   1      }
 339            
 340            
 341          /*****************************************************************************
 342          按键按压之后处理流程*/
 343          void TouchHandle(void)
 344          {
 345   1        uint8_t temp[16]={0};
 346   1        uint16_t flag=0;
 347   1        uint16_t iconid=0;
 348   1        uint16_t getDar=0;
 349   1        getDar = value0F00[1]<<8|value0F00[2];
 350   1        LOG((uint8_t *)&getDar,sizeof(getDar));
 351   1        
 352   1        s_dl_t_645_8283_body.st_byte1=0x5A;
 353   1        s_dl_t_645_8283_body.st_byte2=0xA5;
 354   1        s_dl_t_645_8283_body.lenth=value0F00[3]*2+3;  
 355   1        s_dl_t_645_8283_body.func=0x83; 
 356   1        s_dl_t_645_8283_body.addr1=value0F00[1];
 357   1        s_dl_t_645_8283_body.addr2=value0F00[2];
 358   1        ReadDGUS(getDar,(uint8_t *)&s_dl_t_645_8283_body.edata[0],value0F00[3]*2);  //edata[0] edata[1]读取16bit
 359   1        
 360   1        
 361   1        page_set(getDar);
 362   1        
 363   1        
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 7   

 364   1        
 365   1        
 366   1      //  Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 367   1      
 368   1      //  switch(getDar)
 369   1      //  {
 370   1      //    default:
 371   1      //    break;
 372   1      //  }
 373   1      }
 374          
 375          /*****************************************************************************
 376          功能：回传数据*/
 377          void dlt645_handle(void)
 378          {
 379   1        uint16_t ADDR=0;
 380   1      
 381   1        ADDR = ((uint16_t)(s_dl_t_645_8283_body.addr1))<<8 | s_dl_t_645_8283_body.addr2;
 382   1      
 383   1        if(s_dl_t_645_8283_body.func == 0x82)
 384   1        {
 385   2          WriteDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata),s_dl_t_645_8283_body.lenth-3);
 386   2          s_dl_t_645_8283_body.lenth=3;
 387   2          s_dl_t_645_8283_body.addr1=0x4F;
 388   2          s_dl_t_645_8283_body.addr2=0x4B;
 389   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 390   2        }
 391   1        else if(s_dl_t_645_8283_body.func == 0x83)
 392   1        {
 393   2          ReadDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata[1]),s_dl_t_645_8283_body.edata[0]*2);
 394   2          s_dl_t_645_8283_body.lenth+=s_dl_t_645_8283_body.edata[0]*2;
 395   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 396   2        }
 397   1        
 398   1      }
 399          /*****************************************************************************
 400          功能:检索一帧数据将值赋给结构体*/
 401          uint8_t parse_dlt645_frame(uint8_t *p_frame, uint16_t frame_len, uint8_t* sframe_body)
 402          {
 403   1          uint16_t temp16_t = 0;//一帧数据的总长度
 404   1          uint16_t i = 0;
 405   1      
 406   1          if(1){
 407   2              memcpy(sframe_body,p_frame, frame_len);
 408   2              return 1;
 409   2          }
 410   1         // return 0;     //上面if(1)永远都成立，执行不到这一行
 411   1      } 
 412          /*****************************************************************************
 413          功能:从缓存区buf中检索dlt645帧数据*/
 414          /*
 415           * 将一帧数据读取到frame_buf中     
 416           * line:缓存区0x7F开头的数据
 417           * out:将捡出来的帧复制到该数组中
 418           * frame_len:捡出来的帧的长度，
 419           * line_len:缓存区buf中0x7F开头的数据长度
 420           **/
 421          frame_result_t find_dlt645_frame(uint8_t* line, uint8_t* out, uint16_t* frame_len, uint16_t line_len) {
 422   1          uint16_t frame_length = 0;//一帧数据的总长度
 423   1          uint16_t temp_len = 0;
 424   1      
 425   1          if (line_len < DLT_645_LEAST_LEN) {
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 8   

 426   2              return UNFINISHED;
 427   2          }
 428   1          //判断第0位
 429   1          if (line[0] != 0x5A) {  
 430   2              return ERROR;
 431   2          }
 432   1          if (line[1] != 0xA5) {  
 433   2              return ERROR;
 434   2          }   
 435   1          frame_length = line[2]+3;
 436   1          
 437   1          if (frame_length <= line_len) {
 438   2                  //检到一帧数据                
 439   2                  for (temp_len = 0; temp_len < frame_length; temp_len ++) {
 440   3                      out[temp_len] = *line;
 441   3                      line++;
 442   3                  }
 443   2                  *frame_len = frame_length;
 444   2                  return OK;
 445   2          } else {
 446   2              //数据还没接收完整
 447   2              return UNFINISHED;
 448   2          }
 449   1      }
 450          
 451          /*****************************************************************************
 452          功能:协议数据解析*/
 453          void ParseBuffer(void)
 454          {
 455   1          uint16_t frame_length = 0;//一帧数据的总长度
 456   1          uint16_t i = 0, temp_len = 0;
 457   1          uint8_t has_content = 0;//buf中是否有数据
 458   1          uint8_t frame_error = 0;//缓存区当前的数据对所有协议都不满足
 459   1          uint8_t*  p_buf= Uart2_Rx;
 460   1          protocol_type_t protl_type = PROTOCOL_UNKNOWN;
 461   1          frame_result_t find_frame_re = UNKNOWN;
 462   1      
 463   1          //用来保存每个协议解析后的结果 
 464   1          //frame_results[0] 保存PROTOCOL_DL_T_645协议解析结果
 465   1          //frame_results[1] 保存PROTOCOL_DL_T_698协议解析结果
 466   1          frame_result_t frame_results[2] = {UNKNOWN, UNKNOWN}; 
 467   1      
 468   1          has_content = uart2_rx_count > 2;
 469   1          while (has_content) {
 470   2              p_buf = Uart2_Rx;
 471   2              //检索0x5A开头的数据
 472   2              while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 473   3                  p_buf ++;
 474   3              }
 475   2              if (p_buf == Uart2_Rx + uart2_rx_count) {
 476   3                  //检索当前包数据，都不包含，清空
 477   3                  uart2_rx_count = 0;
 478   3                  break;
 479   3              }
 480   2              //Uart4_Rx中剩余的数据长度
 481   2              temp_len = uart2_rx_count - (p_buf - Uart2_Rx);
 482   2      
 483   2              //以下处理不包含校验
 484   2              switch(protl_type) {
 485   3                  case PROTOCOL_UNKNOWN:
 486   3                      memset(frame_buf,0,sizeof(frame_buf));
 487   3                      find_frame_re = UNKNOWN;
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 9   

 488   3                      frame_error = 0;
 489   3                      frame_length = 0;
 490   3                      for (i = 0; i < 3; i ++) {
 491   4                          frame_results[i] = UNKNOWN;
 492   4                      }
 493   3                      
 494   3                  case PROTOCOL_DL_T_645:
 495   3                      find_frame_re = find_dlt645_frame(p_buf, frame_buf, &frame_length, temp_len);
 496   3      
 497   3                      frame_results[0] = find_frame_re;
 498   3                      if (find_frame_re == OK) {
 499   4                            if (parse_dlt645_frame(frame_buf, frame_length, (uint8_t *)&s_dl_t_645_8283_body)) {
 500   5                                //解析到一包有效数据
 501   5                              dlt645_handle();
 502   5                              memset(&s_dl_t_645_8283_body, 0, sizeof(dl_t_645_8283_body));
 503   5                            }
 504   4                            break;
 505   4                      }
 506   3      
 507   3                  case PROTOCOL_OTHER:
 508   3                      //此处添加其他协议解析
 509   3                      //break;
 510   3                      
 511   3                  default :
 512   3                      if (frame_results[0] == ERROR ) {
 513   4                          //缓存区的数据不满足现有协议的解析
 514   4                          //继续找下一个0x7F起始符
 515   4                          p_buf ++;//跳过当前的0x7F
 516   4                          //检索0x7F开头的数据
 517   4                          while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 518   5                              p_buf ++;
 519   5                          }
 520   4                          
 521   4                          if (p_buf == Uart2_Rx + uart2_rx_count) {
 522   5                              //检索当前包数据，都不包含，清空
 523   5                              uart2_rx_count = 0;
 524   5                              break;
 525   5                          }
 526   4      
 527   4                          //找到下一条0x5A开头的数据帧
 528   4                          frame_error = 1;
 529   4                      }
 530   3                      break;
 531   3              }
 532   2      
 533   2              //当成功检索到一帧数据或缓存区的数据不满足现有协议的解析
 534   2              //buf中剩余的有效数据前移
 535   2              if (find_frame_re == OK || frame_error) {
 536   3                  //uart_rcvd_buf剩余的数据长度
 537   3                  temp_len = uart2_rx_count - (p_buf - Uart2_Rx) - frame_length;
 538   3                  if (temp_len > 0) {
 539   4                      //当前uart_rcvd_buf中剩余的数据前移
 540   4                      for (i = 0; i < temp_len; i ++) {
 541   5                          Uart2_Rx[i] = *(p_buf + frame_length + i);
 542   5                          *(p_buf + frame_length + i) = 0x00;
 543   5                      }
 544   4                      has_content = 1;//继续循环解析
 545   4                  } else {
 546   4                      //解析过的位清空
 547   4                      for (i = 0; i < (p_buf - Uart2_Rx) + frame_length; i ++) {
 548   5                          Uart2_Rx[i] = 0x00;
 549   5                      }
C51 COMPILER V9.59.0.0   HANDLE                                                            05/09/2025 19:35:33 PAGE 10  

 550   4                      has_content = 0;
 551   4                  }
 552   3                  uart2_rx_count = temp_len;
 553   3              } else {
 554   3                  has_content = 0;
 555   3              }
 556   2          }
 557   1      }
 558          
 559          
 560          /*****************************************************************************
 561          主流程*/
 562          void HandleProc(void)
 563          {
 564   1          if(GetValue0F00())    //检测是否有触摸上传数据
 565   1          {
 566   2            TouchHandle();
 567   2          }
 568   1          ParseBuffer();
 569   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2260    ----
   CONSTANT SIZE    =    105    ----
   XDATA SIZE       =    783      91
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
