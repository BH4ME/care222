C51 COMPILER V9.59.0.0   ZX                                                                05/09/2025 19:35:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ZX
OBJECT MODULE PLACED IN .\Objects\zx.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\zx.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\A
                    -PP;.\PAGE) DEBUG PRINT(.\Listings\zx.lst) TABS(2) OBJECT(.\Objects\zx.obj)

line level    source

   1          #include "zx.h"
   2          #include "dgus.h"
   3          #include "home.h"
   4          #include "qrj.h"
   5          
   6          
   7          void ZX_done()  //正常照射完成
   8          {
   9   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  10   1      }
  11          
  12          
  13          void  ZX_Reset()        //按下复位键 只进行一次 
  14          {
  15   1        
  16   1        mJ_doing = 0; //总照射能量 
  17   1        WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
  18   1        
  19   1        baifenbi_T = 0; //完成百分比为0
  20   1        WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    
  21   1        
  22   1        time_doing=0; //已进行 的时间置为0
  23   1        
  24   1        WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));  //图标 变开始
  25   1         
  26   1        
  27   1      }
  28          
  29          void ZX_INIT()    //开机初始化
  30          {
  31   1        //current_st = 0x00;
  32   1        //WriteDGUS(0x3010,(uint8_t *)&icon[0],sizeof(icon[0]));
  33   1      }
  34          
  35          
  36          
  37          void ZX_run() //按下操作 正在照射   
  38          {
  39   1        //QRJ_ZX__QY_RUN();
  40   1        QRJ_ZX__QY_RUN(ZX_mm_to_s); 
  41   1      
  42   1        //触发 照射完成
  43   1        if(mJ_doing*1000 >= zhongxin_j  ||  TIME_static<=0  ||  baifenbi_T >=100)
  44   1        {   
  45   2          current_st = 0x05;  //状态位设置为 自然完成 
  46   2        }
  47   1        
  48   1      }
  49          
  50          
  51          //
  52          void ZX_mm_to_s(u16 L_T)  
  53          {u8 L_T_S_FLAG;
  54   1        double L_CM;
C51 COMPILER V9.59.0.0   ZX                                                                05/09/2025 19:35:34 PAGE 2   

  55   1        L_CM=L_T/10.0;
  56   1        if(L_CM<400 && L_CM>5) L_T_S_FLAG=1;    //在5cm~4m范围
  57   1              else L_T_S_FLAG=5;
  58   1      
  59   1        if(current_st!=0x03)  //不等于运行态
  60   1        {
  61   2        switch(L_T_S_FLAG)
  62   2        {
  63   3          case 1:
  64   3          {
  65   4            TIME_static=zhongxin_j/change_P_uW_doing;
  66   4            break;
  67   4          }
  68   3      
  69   3              default:
  70   3          {
  71   4            L_T_S_FLAG=6;
  72   4            
  73   4            break;
  74   4          }
  75   3        }
  76   2      }
  77   1        
  78   1        else  //运行态
  79   1          
  80   1        {
  81   2          
  82   2          switch(L_T_S_FLAG)
  83   2        {
  84   3          case 1:
  85   3          {
  86   4            //TIME_static=((float)(qirongjiao_j *100- uJ_doing))  / (14.3f*100) ;
  87   4            TIME_static=((float)(zhongxin_j - mJ_doing*1000)) / (change_P_uW_doing) ;
  88   4            break;
  89   4          }
  90   3      
  91   3              default:
  92   3          {
  93   4            L_T_S_FLAG=6;
  94   4            
  95   4            break;
  96   4          }
  97   3        }
  98   2        
  99   2        }
 100   1      }
 101          
 102          
 103          
 104          float zhongxin_j=0.0;
 105          
 106          void  ZX_prepare()  //在当前页面 但未操作
 107          {
 108   1        u16 ResTime_sec;
 109   1        u16 ResTime_min;  
 110   1        u16 ZX_mj;  
 111   1      
 112   1      
 113   1        ReadDGUS(0x5101,(uint8_t *)&ZX_mj,sizeof(ZX_mj));   //读取杀灭log值 范围1~5
 114   1        switch(ZX_mj)
 115   1        {
 116   2          case 1:
C51 COMPILER V9.59.0.0   ZX                                                                05/09/2025 19:35:34 PAGE 3   

 117   2          {
 118   3            zhongxin_j  = 1000;     //单位是uj 而不是mj
 119   3            break;
 120   3          }
 121   2              case 2:
 122   2          {
 123   3            zhongxin_j  = 2000;
 124   3            break;
 125   3          }
 126   2              case 3:
 127   2          {
 128   3            zhongxin_j  = 3000;
 129   3            break;
 130   3          }
 131   2              case 4:
 132   2          {
 133   3            zhongxin_j  = 5000;
 134   3            break;
 135   3          }
 136   2              case 5:
 137   2          {
 138   3            zhongxin_j  = 7000;
 139   3            break;
 140   3          }
 141   2        }
 142   1        
 143   1        ZX_mm_to_s(L_int);  //根据距离和功率得到时间
 144   1        
 145   1        ResTime_min=(u16)(TIME_static)/60;
 146   1        ResTime_sec=(u16)(TIME_static)%60;
 147   1        WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 148   1        WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 149   1        WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 150   1        WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 151   1      
 152   1      }
 153          
 154          
 155          
 156          
 157          
 158          
 159          
 160          //主要功能解锁触控单元
 161          void  ZX_Set()        //每次进入页面初始化
 162          {
 163   1      
 164   1      }
 165          
 166          
 167          
 168          void  ZX_stop()       //每次进入页面初始化
 169          {
 170   1      
 171   1      }
 172          
 173          
 174          void ZX_Home()  //循环运行
 175          {
 176   1        
 177   1          if(last_page!=CurrentPageNum[1])  //第一次进入页面
 178   1        {
C51 COMPILER V9.59.0.0   ZX                                                                05/09/2025 19:35:34 PAGE 4   

 179   2          last_page=CurrentPageNum[1];  
 180   2          current_st = 0x01;
 181   2        }
 182   1      
 183   1        switch(current_st)    //在handle.c触摸反馈中检测
 184   1        {
 185   2          case 0:   //开机初始化状态
 186   2          {
 187   3            current_st = 0x01;  //初始化成功，跳转到第一次初始化态
 188   3          //  break;
 189   3          }
 190   2          
 191   2          case 1:   //第一次初始化态
 192   2          {
 193   3            current_st = 0x02;  //第一次初始化成功，跳转到就绪态
 194   3            ZX_Set();
 195   3            
 196   3          //  break;
 197   3          }
 198   2          
 199   2          case 2:   //就绪态
 200   2          {
 201   3            ZX_prepare();
 202   3            break;
 203   3          }
 204   2          
 205   2              case 3:   //运行态开始
 206   2          {
 207   3            UV=1;
 208   3            ZX_run();
 209   3            break;
 210   3          }
 211   2          
 212   2              case 4:   //运行态暂停
 213   2          {
 214   3            UV=0;
 215   3            ZX_stop();
 216   3            break;
 217   3          }
 218   2          
 219   2              case 5:   //运行态结束 此为自然结束不包含复位
 220   2          {
 221   3            UV=0;
 222   3            ZX_done();  
 223   3            break;
 224   3          }
 225   2              case 6:   //运行态复位 只进行一次 然后跳转到第一次初始化
 226   2          {
 227   3            UV=0;
 228   3            ZX_Reset(); //只运行一次
 229   3            Unlock_current_page();//解锁
 230   3            current_st = 0x01;  // 置位 到第一次初始化    
 231   3            break;
 232   3          }
 233   2          
 234   2          default :
 235   2          {
 236   3            break;
 237   3          }
 238   2          
 239   2        }
 240   1        
C51 COMPILER V9.59.0.0   ZX                                                                05/09/2025 19:35:34 PAGE 5   

 241   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    810    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
