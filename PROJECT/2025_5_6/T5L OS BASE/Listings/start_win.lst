C51 COMPILER V9.59.0.0   START_WIN                                                         05/06/2025 18:30:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE START_WIN
OBJECT MODULE PLACED IN .\Objects\start_win.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE APP\start_win.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sourc
                    -es;.\APP;.\PAGE) DEBUG PRINT(.\Listings\start_win.lst) TABS(2) OBJECT(.\Objects\start_win.obj)

line level    source

   1          #include "start_win.h"
   2          #include <math.h>
   3          #include "qrj.h"
   4          #include "home.h"
   5          typedef struct {
   6              u16 x;  // X坐标 (0-65535)
   7              u16 y;  // Y坐标 (0-65535) 
   8          } DgusPoint;
   9          
  10          
  11          typedef struct {
  12              u16  cmd_type_line;     //  (0x00)    // (固定0x02)
  13              u16  chart_num;     // 条数
  14              u16  color;        // RGB565颜色值
  15              DgusPoint points[2];    // 两个坐标点
  16              u16   end_marker;   // 结束标志 (0xFF)
  17            //  u8   reserved;     //  (0x00)
  18          } DgusLineCommand;
  19          
  20          
  21          
  22          typedef struct {
  23              DgusPoint points;    // 坐标点
  24              u16   end_marker;   // 结束标志 (0xFF)
  25            //  u8   reserved;     //  (0x00)
  26          } Dguspoint_update;
  27          
  28          
  29          Dguspoint_update point_update;
  30          
  31          static  DgusLineCommand Line[2];  //初始化两个图像表
  32          
  33          
  34          //初始化
  35          void start_win_Init() //初始化只运行一次
  36          {
  37   1      
  38   1        Line[0].cmd_type_line = 0X0002;
  39   1        Line[0].end_marker = 0xff00;
  40   1        Line[0].chart_num = 0x0001;
  41   1        
  42   1        Line[1].cmd_type_line = 0X0002;
  43   1        Line[1].end_marker = 0xff00;
  44   1        Line[1].chart_num = 0x0001;
  45   1        
  46   1        point_update.end_marker= 0xff00;
  47   1      }
  48          
  49          
  50          
  51          //获取Y的坐标
  52          u16 Y_log_calculate(double P_uW)  //根据功率大小计算Y值的大小（纵坐标）
  53          {
  54   1        
C51 COMPILER V9.59.0.0   START_WIN                                                         05/06/2025 18:30:28 PAGE 2   

  55   1        static double P_log_uW; //log 0.11x~3.22x
  56   1        P_log_uW=log10(P_uW); //P_uW 1.3~1666
  57   1        /*******************************计算Y坐标结果值为像素**********************************/
  58   1      
  59   1        if(P_log_uW>=0) // 0.11x~3.22x 量化到[0,120]
  60   1        {
  61   2          
  62   2          return tubiao_zuoxia_y - (((double)(P_log_uW - 0.11f))/3.11f)*120;
  63   2        }
  64   1        else
  65   1          return tubiao_zuoxia_y;
  66   1      }
  67          
  68          
  69          //获取X的坐标
  70          u16 X_calculate_1s=0;//定时器中
  71          static u8 num_dian = 0; //已经写入点的数量 复位要将其设为0
  72          u16 X_calculate()   //正常是返回X地址，错误代码0x0000/0xffff/0xfffe
  73          {
  74   1        static u8 wait_1s = 0;  
  75   1        static u8 doing_1s = 0;
  76   1        static u16 last_y=0;
  77   1        if(X_calculate_1s>=10)  //1s
  78   1        {
  79   2          doing_1s++;
  80   2          X_calculate_1s=0;
  81   2          if(num_dian==0) //first第一次写入点位置是固定好的
  82   2          {
  83   3            num_dian++;
  84   3            last_y = tubiao_zuoshang_x;
  85   3            return tubiao_zuoshang_x;
  86   3          }
  87   2          else if(TIME_static>=tubiao_chang-last_y+10)//大于580
  88   2          {
  89   3            //限制了最大290个点
  90   3            wait_1s = TIME_static/(tubiao_chang-last_y+10)+1 ;
  91   3            if(doing_1s >= wait_1s)
  92   3            {
  93   4              doing_1s=0;
  94   4              num_dian++;
  95   4              last_y = last_y+0x02;
  96   4                if(last_y>tubiao_zuoshang_y || last_y<tubiao_zuoxia_y)
  97   4                {
  98   5                  return 0xfffe;
  99   5                }
 100   4              return last_y;
 101   4            }
 102   3          }
 103   2          else if(TIME_static<=tubiao_chang-last_y+10 && TIME_static>=(tubiao_chang-last_y+10)/2)//290~580
 104   2          {
 105   3            wait_1s = 2;
 106   3            if(doing_1s >= wait_1s)
 107   3            {
 108   4              doing_1s=0;
 109   4              num_dian++;
 110   4              last_y = last_y+0x02;
 111   4                if(last_y>tubiao_zuoshang_y || last_y<tubiao_zuoxia_y)
 112   4                {
 113   5                  return 0xfffe;
 114   5                }
 115   4              return last_y;
 116   4            }
C51 COMPILER V9.59.0.0   START_WIN                                                         05/06/2025 18:30:28 PAGE 3   

 117   3            return 0;
 118   3          }else if(TIME_static<=(tubiao_chang-last_y+10)/2)//<290 
 119   2          {
 120   3              wait_1s = (tubiao_chang-last_y+10)/TIME_static;
 121   3              doing_1s=0;
 122   3              num_dian++;
 123   3              last_y = last_y+wait_1s;
 124   3            
 125   3                if(last_y>tubiao_zuoshang_y || last_y<tubiao_zuoxia_y)  //超出量程范围则认为有问题
 126   3                {
 127   4                  return 0xfffe;
 128   4                }
 129   3        
 130   3              return last_y;
 131   3          }
 132   2          return 0;
 133   2        }
 134   1      
 135   1        
 136   1        if(num_dian>num_maxdian)  //如果点数大于最大值290则认为有问腿
 137   1        {
 138   2          return 0xffff;
 139   2        }
 140   1            return 0;
 141   1      }
 142          
 143          
 144          
 145          //逻辑上根据时间去判断是否需要取样，再进行对y轴的取样工作
 146          //获得X Y的坐标
 147          DgusPoint point_get;
 148          u8 get_X_Y(DgusPoint *point)
 149          {
 150   1        point->x=X_calculate();
 151   1        if(point->x != 0 || point->x != 0xffff || point->x != 0xfffe )  //排除三个error
 152   1        {
 153   2          //x坐标获取正常 则获取Y的坐标
 154   2          point->y =   Y_log_calculate(change_P_uW_doing);
 155   2          return 1;
 156   2        }
 157   1        return 0;
 158   1      }
 159          
 160          
 161          //  chart[0]=(u8)(chart_num_2>>8);
 162          //  chart[1]=(u8)(chart_num_2&0xff);
 163          //先写入两个点之后，每次只更新一个点
 164          
 165          u16 Adress_line_1 = 0xb007; //CHART_1_ADDR + 0x07    复位后要置0xb007
 166          u16 Adress_line_2 = 0x5507; //CHART_2_ADDR + 0x07
 167          void update_point(const DgusPoint *point,u8 line_num)
 168          {
 169   1        switch(line_num)
 170   1        {
 171   2          case 0: //曲线1
 172   2          {
 173   3            
 174   3            if(get_X_Y(point))  //获取XY坐标成功返回1
 175   3            {
 176   4              WriteDGUS(Adress_line_1,(uint8_t *)&point,sizeof(point));
 177   4              //num_dian
 178   4              Adress_line_1 += 0x2; 
C51 COMPILER V9.59.0.0   START_WIN                                                         05/06/2025 18:30:28 PAGE 4   

 179   4            }
 180   3            break;
 181   3          }
 182   2          case 1:
 183   2          {
 184   3            
 185   3            break;
 186   3          }
 187   2          
 188   2          default :
 189   2          {
 190   3            
 191   3            break;
 192   3          }
 193   2        }
 194   1      
 195   1      } 
 196          
 197          
 198          void Draw_chart(u8 line_num)  //分第1，2条曲线
 199          {
 200   1        switch(line_num)
 201   1        {
 202   2          case 0: //曲线1
 203   2          {
 204   3            
 205   3            break;
 206   3          }
 207   2          case 1:
 208   2          {
 209   3            
 210   3            break;
 211   3          }
 212   2          
 213   2          default :
 214   2          {
 215   3            
 216   3            break;
 217   3          }
 218   2        }
 219   1        
 220   1      }
 221          
 222          //void sys_write_chart_zhexian_Two(u16 x1,u16 y1,u16 x2,u16 y2)   //输入2个点
 223          //{
 224          //  #define CHART_ADDR    0xb000  //动态曲线功能所对应的系统变量接口地址
 225          //  //#define CHART_NUM     0xff        //线段数数据,我们只写入chart_id指定的曲线通道,即1个
 226          //  //#define POINT_NUM     1       //一次性写入多少个数据点
 227          //  #define colour 0Xffff
 228          //  u8 chart_cmd[16] = {0x00,0x02};
 229          //  chart_cmd[2]=(u8)(chart_num>>8);
 230          //  chart_cmd[3]=(u8)(chart_num&0xff);
 231          //  chart_cmd[4] = (u8)(colour>>8);//曲线通道id
 232          //  chart_cmd[5] = (u8)(colour&0xff);//一次性写入多少个数据点
 233          //  chart_cmd[6] = (u8)(x1>>8);//x1
 234          //  chart_cmd[7] = (u8)(x1&0xff);
 235          //  chart_cmd[8] = (u8)(y1>>8);//y1
 236          //  chart_cmd[9] = (u8)(y1&0xff);
 237          //  chart_cmd[10] = (u8)(x2>>8);//x2
 238          //  chart_cmd[11] = (u8)(x2&0xff);
 239          //  chart_cmd[12] = (u8)(y2>>8);//y2
 240          //  chart_cmd[13] = (u8)(y2&0xff);
C51 COMPILER V9.59.0.0   START_WIN                                                         05/06/2025 18:30:28 PAGE 5   

 241          //    chart_cmd[14] = (u8)0xff;//y2
 242          //  chart_cmd[15] = (u8)0x00;     //0xa007 
 243          ////  y1=y2;
 244          ////  x1=x2;
 245          //  Adress_Now=CHART_ADDR+0x7;chart_num++;
 246          //  //发送命令
 247          //  WriteDGUS(CHART_ADDR,chart_cmd,sizeof(chart_cmd));
 248          //}
 249          //void sys_write_chart_zhexian_Two_Cankao(u16 x1,u16 y1,u16 x2,u16 y2)    //输入2个点
 250          //{
 251          //  #define CHART_ADDR_cankao   0x5500  //动态曲线功能所对应的系统变量接口地址
 252          //  #define CHART_NUM_cankao      0xff        //线段数数据,我们只写入chart_id指定的曲线通道,即1个
 253          //  //#define POINT_NUM     1       //一次性写入多少个数据点
 254          //  #define colour_cankao 0X8410
 255          //  u8 chart_cmd[16] = {0x00,0x02,0x0f,CHART_NUM_cankao};
 256          //  chart_cmd[4] = (u8)(colour_cankao>>8);//曲线通道id
 257          //  chart_cmd[5] = (u8)(colour_cankao&0xff);//一次性写入多少个数据点
 258          //  chart_cmd[6] = (u8)(x1>>8);//x1
 259          //  chart_cmd[7] = (u8)(x1&0xff);
 260          //  chart_cmd[8] = (u8)(y1>>8);//y1
 261          //  chart_cmd[9] = (u8)(y1&0xff);
 262          //  chart_cmd[10] = (u8)(x2>>8);//x2
 263          //  chart_cmd[11] = (u8)(x2&0xff);
 264          //  chart_cmd[12] = (u8)(y2>>8);//y2
 265          //  chart_cmd[13] = (u8)(y2&0xff);
 266          //  chart_cmd[14] = (u8)0xff;//y2
 267          //  chart_cmd[15] = (u8)0x00;     //0xa007 
 268          ////  y1=y2;
 269          ////  x1=x2;
 270          //  //Adress_Now=0xa007;
 271          //  //发送命令
 272          //  WriteDGUS(CHART_ADDR_cankao,chart_cmd,sizeof(chart_cmd));
 273          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    892    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     57       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
