C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE APP\i2c.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.\A
                    -PP;.\PAGE) DEBUG PRINT(.\Listings\i2c.lst) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          
   2          #include  "i2c.h"
   3          //#include "sys.h"
   4          #include "dgus.h"
   5          //#include "sys_params.h"
   6          
   7          
   8          //bit RTC_Flog=0;
   9          void      RTC_Set_Time();   
  10          #define  u8   unsigned char  
  11          //#define  s8     signed char
  12          #define  u16  unsigned int 
  13          //#define  s16    signed int
  14          #define  u32  unsigned long 
  15          //#define  s32    signed long
  16          //#define  u64  unsigned long long
  17          
  18          u16 SysTick_RTC=0;
  19          
  20          
  21          u8  Select_rtc=SELECT_RTC_TYPE; //选择RTC类型
  22          #if SELECT_RTC_TYPE   
  23          //===========================
  24          void Delayus() {u8 i;for(i=0;i<80;i++);}  //50
  25          //===========================
  26          void SDA_IN()  {P3MDOUT=P3MDOUT&0xF7;}
  27          //===========================
  28          void SDA_OUT() {P3MDOUT=P3MDOUT|0x08;}
  29          //===========================
  30          
  31          
  32          /**********************设置界面写入rtc检测*************************
  33          当提交键按下后运行此函数，先将年月日时分秒写入到9d地址，然后在将9c写入5aa5
  34          配合rx8130
  35          ********************************************************************/
  36          void RTC_SET_IN()
  37          {
  38   1        u8 RTC_H[4];  //2023 02 18  年月日
  39   1                      //0  1  2  3
  40   1        u8 RTC_L[4];  //00  12 45 23  时分秒
  41   1                      //0   1  2  3
  42   1        
  43   1       u8 RTC_6[6]={0};
  44   1        static u8 RTC_9C[2]={0x5a,0xa5};
  45   1         u32 RTC_H_HEX;
  46   1        static u32 RTC_L_HEX;
  47   1        //long i;
  48   1      // u64 RTC_8;
  49   1        ReadDGUS(0X1300,(u8 *)&RTC_H,sizeof(RTC_H));
  50   1        ReadDGUS(0X1305,(u8 *)&RTC_L,sizeof(RTC_L));
  51   1        
  52   1      
  53   1      //RTC[2]=0x12;
  54   1      //RTC[3]=0x66;
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 2   

  55   1      //RTC[4]=0x37;
  56   1      //RTC[5]=0x06;
  57   1      //RTC[6]=0x4f;
  58   1      //RTC[7]=0x2b;
  59   1      //RTC_H[0]=0x01;
  60   1      //RTC_H[1]=0x34;
  61   1      //RTC_H[2]=0xb0;
  62   1      //RTC_H[3]=0x4b;
  63   1      //    else RTC[4]=1;
  64   1      //  }
  65   1      //  else RTC[3]=1;
  66   1        //RTC_8=(RTC[0]<<56 | RTC[1]<<48  | RTC[2]<<40| RTC[3]<<32  | RTC[4]<<24  | RTC[5]<<16  |RTC[6]<<8  |RTC[7]);
  67   1        //for(i=0;i<=5;i++)   RTC_H_HEX=(u32)(0x0134b04b);
  68   1        //{
  69   1          RTC_H_HEX=(u32)(RTC_H[0])<<24 | (u32)(RTC_H[1])<<16 | (u32)(RTC_H[2])<<8  | (u32)(RTC_H[3]);
  70   1          RTC_L_HEX=(u32)(RTC_L[0])<<24 | (u32)(RTC_L[1])<<16 | (u32)(RTC_L[2])<<8  | (u32)(RTC_L[3]);
  71   1          //RTC_H_HEX=(u32)(0x0134b04b);
  72   1        //  RTC_L_HEX=((RTC_L[0]<<18  | RTC_L[1]<<10  |RTC_L[2]<<8  |RTC_L[3]));
  73   1          //RTC_6[5]=((u32)(0x126637064f2b))%100;
  74   1          RTC_6[5]=RTC_L_HEX%100;
  75   1          RTC_6[4]=(RTC_L_HEX/100)%100;
  76   1          RTC_6[3]=(RTC_L_HEX/10000)%100;
  77   1          RTC_6[2]=RTC_H_HEX%100;
  78   1          RTC_6[1]=(RTC_H_HEX/100)%100;
  79   1          RTC_6[0]=(RTC_H_HEX/10000)%100;
  80   1        //}
  81   1        /***********************时间校准*********************/
  82   1        if(RTC_6[1]>0&&RTC_6[1]<=12)  //月
  83   1        {
  84   2          if(RTC_6[2]<=31&&RTC_6[2]>0)  //日
  85   2          {
  86   3            if(RTC_6[3]<=23&&RTC_6[3]>=0)
  87   3            {
  88   4              if(RTC_6[4]<=59&&RTC_6[4]>=0)
  89   4              {
  90   5                if(RTC_6[5]<=59&&RTC_6[5]>=0)
  91   5                {}
  92   5                  else RTC_6[5]=0;
  93   5              }else RTC_6[4]=0;
  94   4            }else RTC_6[3]=0;
  95   3          }
  96   2            else RTC_6[2]=1;
  97   2        }
  98   1        else RTC_6[1]=1;
  99   1        
 100   1            WriteDGUS(0x9d, (u8 *)&RTC_6,sizeof(RTC_6));  
 101   1            WriteDGUS(0x9c, (u8 *)&RTC_9C,sizeof(RTC_9C));  
 102   1        
 103   1        
 104   1        //同步更改rx8130的时间
 105   1            RTC_Set_Time();   
 106   1        
 107   1        
 108   1      }
 109          void Rx8130_Start()
 110          { 
 111   1                  SDA_OUT();
 112   1                  RTC_SDA=1;    //开始信号 scl为高时，sda由高到低
 113   1                  RTC_SCL=1;
 114   1                  Delayus();  //15
 115   1                  RTC_SDA=0;
 116   1                  Delayus();  //15
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 3   

 117   1                  RTC_SCL=0;
 118   1                  Delayus();  //15
 119   1      }
 120          //================================
 121          void Rx8130_Stop()
 122          { 
 123   1                  SDA_OUT();
 124   1                  RTC_SDA=0;  //end信号 scl为高时，sda由0到1
 125   1                  RTC_SCL=1;
 126   1                  Delayus();//15
 127   1                  RTC_SDA=1;
 128   1                  Delayus();//15
 129   1                  SDA_IN();
 130   1      }
 131          //================================
 132          void Rx8130_Mack()
 133          { 
 134   1                  SDA_OUT();
 135   1                  RTC_SDA=0;
 136   1                  Delayus();
 137   1                  RTC_SCL=1;
 138   1                  Delayus();
 139   1                  RTC_SCL=0;
 140   1                  Delayus();
 141   1      }
 142          //=================================
 143          void Rx8130_Mnak()
 144          { 
 145   1                  SDA_OUT();
 146   1                  RTC_SDA=1;
 147   1                  Delayus();
 148   1                  RTC_SCL=1;
 149   1                  Delayus();
 150   1                  RTC_SCL=0;
 151   1                  Delayus();
 152   1      }
 153          //=================================
 154          void Rx8130_Cack()
 155          { 
 156   1                  u8 i;
 157   1                  SDA_IN();
 158   1                  RTC_SDA=1;
 159   1                  Delayus();
 160   1                  RTC_SCL=1;
 161   1                  Delayus();
 162   1                  for(i=0;i<50;i++)
 163   1                  {   
 164   2                          if(!RTC_SDA) break;
 165   2                          Delayus();
 166   2                  }
 167   1                  RTC_SCL=0;
 168   1                  Delayus();
 169   1                  SDA_OUT();
 170   1      }
 171          //=========================================
 172          void Rx8130_Writ_Byte(u8 dat)
 173          { 
 174   1                  u8 i;
 175   1                  SDA_OUT();
 176   1                  for(i=0;i<8;i++)
 177   1                  { 
 178   2                            if(dat&0x80)   RTC_SDA=1;
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 4   

 179   2                          else           RTC_SDA=0;
 180   2                          dat=(dat<<1);
 181   2                          Delayus();
 182   2                          RTC_SCL=1;
 183   2                          Delayus();
 184   2                          RTC_SCL=0;
 185   2                          Delayus();
 186   2                  }
 187   1                  Rx8130_Cack();
 188   1      }
 189          //====================================================
 190          u8 Rx8130_Read_Byte()
 191          { 
 192   1                  u8 i;
 193   1                  u8 Dat;
 194   1                  SDA_IN();
 195   1                  for(i=0;i<8;i++)
 196   1                  { 
 197   2                          Delayus();
 198   2                          RTC_SCL=1;
 199   2                          Delayus();
 200   2                          Dat=(Dat<<1);
 201   2                          if(RTC_SDA)  Dat=Dat|0x01;
 202   2                          else         Dat=Dat&0xFE;
 203   2                          RTC_SCL=0;
 204   2                          Delayus();
 205   2                  }
 206   1                  return(Dat);
 207   1      }
 208          //====================================================
 209          u8 RTC_Get_Week(u8 years,u8 month,u8 day)
 210          { 
 211   1        u8 xdata weak;
 212   1        u16 xdata year;
 213   1        year= years+2000;
 214   1        if(month==1||month==2)
 215   1        {
 216   2          month += 12, year--;
 217   2        }
 218   1        if((year<1752)||(year==1752&&month<9)||(year==1752&&month==9&&day<3))
 219   1        {
 220   2          weak = (day + 2*month + 3*(month+1)/5 + year + year/4 + 6)%7;
 221   2        }
 222   1        else
 223   1        {
 224   2          weak = (day +1 + 2*month + 3*(month+1)/5 + year + year/4 -year/100 + year/400)%7;
 225   2        }
 226   1         return weak;
 227   1      }
 228          //把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 229          void Read_Time()
 230          { 
 231   1                  u8 i,N,M; 
 232   1                  u8 Rtcdata[]={0,0,0,0,0,0,0,0};
 233   1                  Rx8130_Start();
 234   1                  Rx8130_Writ_Byte(0x64);
 235   1                  Rx8130_Writ_Byte(0x10);
 236   1                  Rx8130_Stop();
 237   1                  Rx8130_Start();
 238   1                  Rx8130_Writ_Byte(0x65);
 239   1                  for(i=6;i>0;i--)
 240   1                  { 
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 5   

 241   2                                Rtcdata[i]=Rx8130_Read_Byte();
 242   2                                Rx8130_Mack();
 243   2                  }
 244   1                  Rtcdata[0]=Rx8130_Read_Byte(); Rx8130_Mnak();
 245   1                  Rx8130_Stop();
 246   1                  for(i=0;i<3;i++)  //年月日转换成HEX
 247   1                  { 
 248   2                                N=Rtcdata[i]/16;
 249   2                                M=Rtcdata[i]%16;
 250   2                                Rtcdata[i]=N*10+M;
 251   2                  }
 252   1                  for(i=4;i<7;i++)  //时分秒转换成HEX
 253   1                  { 
 254   2                                N=Rtcdata[i]/16;
 255   2                                M=Rtcdata[i]%16;
 256   2                                Rtcdata[i]=N*10+M;
 257   2                  }
 258   1                  Rtcdata[3]=RTC_Get_Week(Rtcdata[0],Rtcdata[1],Rtcdata[2]);//周            
 259   1                  WriteDGUS(0X0010,Rtcdata,2);
 260   1                  WriteDGUS(0X0011,Rtcdata+2,2);
 261   1                  WriteDGUS(0X0012,Rtcdata+4,2);
 262   1                  WriteDGUS(0X0013,Rtcdata+6,2);
 263   1      }
 264          //====================================================================
 265          void Init_Rtc()
 266          { 
 267   1                   u8 i;
 268   1                     Rx8130_Start();
 269   1                   Rx8130_Writ_Byte(0x64);
 270   1                   Rx8130_Writ_Byte(0x1d);
 271   1                   Rx8130_Stop();
 272   1                   Rx8130_Start();
 273   1                   Rx8130_Writ_Byte(0x65);
 274   1                   i=Rx8130_Read_Byte();
 275   1                   Rx8130_Mack();
 276   1                   Rx8130_Read_Byte();
 277   1                   Rx8130_Mnak();
 278   1                   Rx8130_Stop();
 279   1                   if((i&0x02)==0x02)
 280   1                     {  
 281   2                        //重新配置时间
 282   2                        Rx8130_Start();   //30=00
 283   2                        Rx8130_Writ_Byte(0x64);
 284   2                        Rx8130_Writ_Byte(0x30);
 285   2                        Rx8130_Writ_Byte(0x00);
 286   2                        Rx8130_Stop();
 287   2                        Rx8130_Start();   //1C-1F=48 00 40 10
 288   2                        Rx8130_Writ_Byte(0x64);
 289   2                        Rx8130_Writ_Byte(0x1C);
 290   2                        Rx8130_Writ_Byte(0x48);
 291   2                        Rx8130_Writ_Byte(0x00);
 292   2                        Rx8130_Writ_Byte(0x40);
 293   2                        Rx8130_Writ_Byte(0x10);
 294   2                        Rx8130_Stop();
 295   2                        Rx8130_Start();   //10-16=RTC设置值 BCD格式
 296   2                        Rx8130_Writ_Byte(0x64);
 297   2                        Rx8130_Writ_Byte(0x10);
 298   2                        Rx8130_Writ_Byte(0x00); //秒
 299   2                        Rx8130_Writ_Byte(0x00); //分
 300   2                        Rx8130_Writ_Byte(0x00); //时
 301   2                        Rx8130_Writ_Byte(0x01); //星期
 302   2                        Rx8130_Writ_Byte(0x01); //日
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 6   

 303   2                        Rx8130_Writ_Byte(0x01); //月
 304   2                        Rx8130_Writ_Byte(0x17); //年
 305   2                        Rx8130_Stop();
 306   2                        Rx8130_Start();   //1E-1F 00 10
 307   2                        Rx8130_Writ_Byte(0x64);
 308   2                        Rx8130_Writ_Byte(0x1E);
 309   2                        Rx8130_Writ_Byte(0x00); 
 310   2                        Rx8130_Writ_Byte(0x10);     
 311   2                        Rx8130_Stop();
 312   2                     }
 313   1      }
 314          //=========================================
 315          void RTC_Set_Time()
 316          {           
 317   1        
 318   1                //  u16  Va=ReadDGUS(0x009C); //0x5AA5
 319   1                  u16  Va;
 320   1                  u8  zero[2]={0,0};
 321   1                  ReadDGUS(0x009C,(u8 *)&Va,2);
 322   1                  if(Va==0x5AA5)
 323   1                  {     
 324   2                        u8 N=0,S=0;
 325   2                        bit  Flog=1;
 326   2                        u8 TimeS[]={0,0,0,0,0,0,0};
 327   2                        u16  V1;
 328   2                        ReadDGUS(0x009D,(u8 *)&V1,2); //年，月
 329   2                        N=(u8)(V1>>8);TimeS[0]=((N/10)*16)+(N%10);
 330   2                        N=(u8)(V1);   TimeS[1]=((N/10)*16)+(N%10);
 331   2                        ReadDGUS(0x009E,(u8 *)&V1,2); //日，时
 332   2                        N=(u8)(V1>>8);TimeS[2]=((N/10)*16)+(N%10);
 333   2                        N=(u8)(V1);   TimeS[4]=((N/10)*16)+(N%10);
 334   2                        ReadDGUS(0x009F,(u8 *)&V1,2); //分，秒
 335   2                        N=(u8)(V1>>8);TimeS[5]=((N/10)*16)+(N%10);
 336   2                        N=(u8)(V1);   TimeS[6]=((N/10)*16)+(N%10);
 337   2      //                        V1=ReadDGUS(0x00A0); //秒，x  
 338   2      //                        N=(u8)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 339   2                        WriteDGUS(0x009c,zero,1); 
 340   2                        while(Flog)
 341   2                        { 
 342   3                                  Rx8130_Start();   //30=00
 343   3                              Rx8130_Writ_Byte(0x64);
 344   3                              Rx8130_Writ_Byte(0x30);
 345   3                              Rx8130_Writ_Byte(0x00);
 346   3                              Rx8130_Stop();
 347   3                              Rx8130_Start();   //1C-1F=48 00 40 10
 348   3                              Rx8130_Writ_Byte(0x64);
 349   3                              Rx8130_Writ_Byte(0x1C);
 350   3                              Rx8130_Writ_Byte(0x48);
 351   3                              Rx8130_Writ_Byte(0x00);
 352   3                              Rx8130_Writ_Byte(0x40);
 353   3                              Rx8130_Writ_Byte(0x10);
 354   3                              Rx8130_Stop();
 355   3                              Rx8130_Start();   //10-16=RTC设置值 BCD格式
 356   3                              Rx8130_Writ_Byte(0x64);
 357   3                              Rx8130_Writ_Byte(0x10);
 358   3                              Rx8130_Writ_Byte(TimeS[6]); //秒
 359   3                              Rx8130_Writ_Byte(TimeS[5]); //分
 360   3                              Rx8130_Writ_Byte(TimeS[4]); //时
 361   3                              Rx8130_Writ_Byte(TimeS[3]); //星期
 362   3                              Rx8130_Writ_Byte(TimeS[2]); //日
 363   3                              Rx8130_Writ_Byte(TimeS[1]); //月
 364   3                              Rx8130_Writ_Byte(TimeS[0]); //年
C51 COMPILER V9.59.0.0   I2C                                                               05/06/2025 18:30:28 PAGE 7   

 365   3                              Rx8130_Stop();
 366   3                              Rx8130_Start();   //1E-1F 00 10
 367   3                              Rx8130_Writ_Byte(0x64);
 368   3                              Rx8130_Writ_Byte(0x1E);
 369   3                              Rx8130_Writ_Byte(0x00); 
 370   3                              Rx8130_Writ_Byte(0x10);     
 371   3                              Rx8130_Stop(); 
 372   3                              Flog=0;
 373   3                         }
 374   2                  }
 375   1      }
 376          //========================================================================================================
             -================================
 377          //**********************SD2058接口程序，SDA 10K上拉到3.3V**************
 378            
 379          
 380          
 381          
 382          #endif
 383          
 384               
 385          //========================================================================================================
             -================================
 386          
 387          //    bit s=0;
 388          //  u8 flag_rtc_init[8]={0};
 389          //    u8 flag_rtc_in[6]={0};
 390            
 391              
 392              
 393          void Clock()
 394          {
 395   1              // if(RTC_Flog==0){ RTC_Flog=1;  Init_Rtc();}
 396   1                     if(SysTick_RTC >= 500) 
 397   1                     {
 398   2                          Read_Time();                //更新硬件RTC时间
 399   2                          SysTick_RTC = 0;   
 400   2                     }
 401   1                      //RTC_Set_Time();    
 402   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2175    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =      9      48
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
