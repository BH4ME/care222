C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\i2c.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Li
                    -stings\i2c.lst) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          
   2          #include  "i2c.h"
   3          #include "sys.h"
   4          #include "dgus.h"
   5          #include "sys_params.h"
   6          
   7          u8  Select_rtc=SELECT_RTC_TYPE; //选择RTC类型
   8          #if SELECT_RTC_TYPE   
   9          //===========================
  10          void Delayus() {u8 i;for(i=0;i<80;i++);}  //50
  11          //===========================
  12          void SDA_IN()  {P3MDOUT=P3MDOUT&0xF7;}
  13          //===========================
  14          void SDA_OUT() {P3MDOUT=P3MDOUT|0x08;}
  15          //===========================
  16          /**********************设置界面写入rtc检测*************************
  17          当提交键按下后运行此函数，先将年月日时分秒写入到9d地址，然后在将9c写入5aa5
  18          配合rx8130
  19          ********************************************************************/
  20          void RTC_SET_IN()
  21          {
  22   1        uchar RTC_H[4]; //2023 02 18  年月日
  23   1                      //0  1  2  3
  24   1        u8 RTC_L[4];  //00  12 45 23  时分秒
  25   1                      //0   1  2  3
  26   1        
  27   1       uchar RTC_6[6]={0};
  28   1        static uchar RTC_9C[2]={0x5a,0xa5};
  29   1         u32 RTC_H_HEX;
  30   1        static u32 RTC_L_HEX;
  31   1        //long i;
  32   1      // u64 RTC_8;
  33   1        ReadDGUS(0X1300,(uint8_t *)&RTC_H,sizeof(RTC_H));
  34   1        ReadDGUS(0X1305,(uint8_t *)&RTC_L,sizeof(RTC_L));
  35   1        
  36   1      
  37   1      //RTC[2]=0x12;
  38   1      //RTC[3]=0x66;
  39   1      //RTC[4]=0x37;
  40   1      //RTC[5]=0x06;
  41   1      //RTC[6]=0x4f;
  42   1      //RTC[7]=0x2b;
  43   1      //RTC_H[0]=0x01;
  44   1      //RTC_H[1]=0x34;
  45   1      //RTC_H[2]=0xb0;
  46   1      //RTC_H[3]=0x4b;
  47   1      //    else RTC[4]=1;
  48   1      //  }
  49   1      //  else RTC[3]=1;
  50   1        //RTC_8=(RTC[0]<<56 | RTC[1]<<48  | RTC[2]<<40| RTC[3]<<32  | RTC[4]<<24  | RTC[5]<<16  |RTC[6]<<8  |RTC[7]);
  51   1        //for(i=0;i<=5;i++)   RTC_H_HEX=(u32)(0x0134b04b);
  52   1        //{
  53   1          RTC_H_HEX=(u32)(RTC_H[0])<<24 | (u32)(RTC_H[1])<<16 | (u32)(RTC_H[2])<<8  | (u32)(RTC_H[3]);
  54   1          RTC_L_HEX=(u32)(RTC_L[0])<<24 | (u32)(RTC_L[1])<<16 | (u32)(RTC_L[2])<<8  | (u32)(RTC_L[3]);
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 2   

  55   1          //RTC_H_HEX=(u32)(0x0134b04b);
  56   1        //  RTC_L_HEX=((RTC_L[0]<<18  | RTC_L[1]<<10  |RTC_L[2]<<8  |RTC_L[3]));
  57   1          //RTC_6[5]=((u32)(0x126637064f2b))%100;
  58   1          RTC_6[5]=RTC_L_HEX%100;
  59   1          RTC_6[4]=(RTC_L_HEX/100)%100;
  60   1          RTC_6[3]=(RTC_L_HEX/10000)%100;
  61   1          RTC_6[2]=RTC_H_HEX%100;
  62   1          RTC_6[1]=(RTC_H_HEX/100)%100;
  63   1          RTC_6[0]=(RTC_H_HEX/10000)%100;
  64   1        //}
  65   1        /***********************时间校准*********************/
  66   1        if(RTC_6[1]>0&&RTC_6[1]<=12)  //月
  67   1        {
  68   2          if(RTC_6[2]<=31&&RTC_6[2]>0)  //日
  69   2          {
  70   3            if(RTC_6[3]<=23&&RTC_6[3]>=0)
  71   3            {
  72   4              if(RTC_6[4]<=59&&RTC_6[4]>=0)
  73   4              {
  74   5                if(RTC_6[5]<=59&&RTC_6[5]>=0)
  75   5                {}
  76   5                  else RTC_6[5]=0;
  77   5              }else RTC_6[4]=0;
  78   4            }else RTC_6[3]=0;
  79   3          }
  80   2            else RTC_6[2]=1;
  81   2        }
  82   1        else RTC_6[1]=1;
  83   1        
  84   1            WriteDGUS(0x9d, (uint8_t *)&RTC_6,sizeof(RTC_6)); 
  85   1            WriteDGUS(0x9c, (uint8_t *)&RTC_9C,sizeof(RTC_9C)); 
  86   1        
  87   1      }
  88          void Rx8130_Start()
  89          { 
  90   1                  SDA_OUT();
  91   1                  RTC_SDA=1;
  92   1                  RTC_SCL=1;
  93   1                  Delayus();  //15
  94   1                  RTC_SDA=0;
  95   1                  Delayus();  //15
  96   1                  RTC_SCL=0;
  97   1                  Delayus();  //15
  98   1      }
  99          //================================
 100          void Rx8130_Stop()
 101          { 
 102   1                  SDA_OUT();
 103   1                  RTC_SDA=0;
 104   1                  RTC_SCL=1;
 105   1                  Delayus();//15
 106   1                  RTC_SDA=1;
 107   1                  Delayus();//15
 108   1                  SDA_IN();
 109   1      }
 110          //================================
 111          void Rx8130_Mack()
 112          { 
 113   1                  SDA_OUT();
 114   1                  RTC_SDA=0;
 115   1                  Delayus();
 116   1                  RTC_SCL=1;
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 3   

 117   1                  Delayus();
 118   1                  RTC_SCL=0;
 119   1                  Delayus();
 120   1      }
 121          //=================================
 122          void Rx8130_Mnak()
 123          { 
 124   1                  SDA_OUT();
 125   1                  RTC_SDA=1;
 126   1                  Delayus();
 127   1                  RTC_SCL=1;
 128   1                  Delayus();
 129   1                  RTC_SCL=0;
 130   1                  Delayus();
 131   1      }
 132          //=================================
 133          void Rx8130_Cack()
 134          { 
 135   1                  u8 i;
 136   1                  SDA_IN();
 137   1                  RTC_SDA=1;
 138   1                  Delayus();
 139   1                  RTC_SCL=1;
 140   1                  Delayus();
 141   1                  for(i=0;i<50;i++)
 142   1                  {   
 143   2                          if(!RTC_SDA) break;
 144   2                          Delayus();
 145   2                  }
 146   1                  RTC_SCL=0;
 147   1                  Delayus();
 148   1                  SDA_OUT();
 149   1      }
 150          //=========================================
 151          void Rx8130_Writ_Byte(u8 dat)
 152          { 
 153   1                  u8 i;
 154   1                  SDA_OUT();
 155   1                  for(i=0;i<8;i++)
 156   1                  { 
 157   2                            if(dat&0x80)   RTC_SDA=1;
 158   2                          else           RTC_SDA=0;
 159   2                          dat=(dat<<1);
 160   2                          Delayus();
 161   2                          RTC_SCL=1;
 162   2                          Delayus();
 163   2                          RTC_SCL=0;
 164   2                          Delayus();
 165   2                  }
 166   1                  Rx8130_Cack();
 167   1      }
 168          //====================================================
 169          u8 Rx8130_Read_Byte()
 170          { 
 171   1                  u8 i;
 172   1                  u8 Dat;
 173   1                  SDA_IN();
 174   1                  for(i=0;i<8;i++)
 175   1                  { 
 176   2                          Delayus();
 177   2                          RTC_SCL=1;
 178   2                          Delayus();
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 4   

 179   2                          Dat=(Dat<<1);
 180   2                          if(RTC_SDA)  Dat=Dat|0x01;
 181   2                          else         Dat=Dat&0xFE;
 182   2                          RTC_SCL=0;
 183   2                          Delayus();
 184   2                  }
 185   1                  return(Dat);
 186   1      }
 187          //====================================================
 188          u8 RTC_Get_Week(u8 years,u8 month,u8 day)
 189          { 
 190   1        u8 xdata weak;
 191   1        u16 xdata year;
 192   1        year= years+2000;
 193   1        if(month==1||month==2)
 194   1        {
 195   2          month += 12, year--;
 196   2        }
 197   1        if((year<1752)||(year==1752&&month<9)||(year==1752&&month==9&&day<3))
 198   1        {
 199   2          weak = (day + 2*month + 3*(month+1)/5 + year + year/4 + 6)%7;
 200   2        }
 201   1        else
 202   1        {
 203   2          weak = (day +1 + 2*month + 3*(month+1)/5 + year + year/4 -year/100 + year/400)%7;
 204   2        }
 205   1         return weak;
 206   1      }
 207          //把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 208          void Read_Time()
 209          {
 210   1          
 211   1                  u8 i,N,M; 
 212   1                  u8 Rtcdata[]={0,0,0,0,0,0,0,0};
 213   1                            WriteDGUS(0x5200, (uint8_t *)&test_error[2],sizeof(test_error[2])); 
 214   1                  Rx8130_Start();
 215   1                  Rx8130_Writ_Byte(0x64);
 216   1                  Rx8130_Writ_Byte(0x10);
 217   1                  Rx8130_Stop();
 218   1                  Rx8130_Start();
 219   1                  Rx8130_Writ_Byte(0x65);
 220   1                  for(i=6;i>0;i--)
 221   1                  { 
 222   2                                Rtcdata[i]=Rx8130_Read_Byte();
 223   2                                Rx8130_Mack();
 224   2                  }
 225   1                  Rtcdata[0]=Rx8130_Read_Byte(); Rx8130_Mnak();
 226   1                  Rx8130_Stop();
 227   1                  for(i=0;i<3;i++)  //年月日转换成HEX
 228   1                  { 
 229   2                                N=Rtcdata[i]/16;
 230   2                                M=Rtcdata[i]%16;
 231   2                                Rtcdata[i]=N*10+M;
 232   2                  }
 233   1                  for(i=4;i<7;i++)  //时分秒转换成HEX
 234   1                  { 
 235   2                                N=Rtcdata[i]/16;
 236   2                                M=Rtcdata[i]%16;
 237   2                                Rtcdata[i]=N*10+M;
 238   2                  }
 239   1                  Rtcdata[3]=RTC_Get_Week(Rtcdata[0],Rtcdata[1],Rtcdata[2]);//周            
 240   1                  Write_Dgus(0X0010,(Rtcdata[0]<<8)+Rtcdata[1]);
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 5   

 241   1                  Write_Dgus(0X0011,(Rtcdata[2]<<8)+Rtcdata[3]);
 242   1                  Write_Dgus(0X0012,(Rtcdata[4]<<8)+Rtcdata[5]);
 243   1                  Write_Dgus(0X0013,(Rtcdata[6]<<8)+Rtcdata[7]);
 244   1                            WriteDGUS(0x5200, (uint8_t *)&test_error[3],sizeof(test_error[3]));   
 245   1      }
 246          //====================================================================
 247          void Init_Rtc()
 248          { 
 249   1                   u8 i;
 250   1                     Rx8130_Start();
 251   1                   Rx8130_Writ_Byte(0x64);
 252   1                   Rx8130_Writ_Byte(0x1d);
 253   1                   Rx8130_Stop();
 254   1                   Rx8130_Start();
 255   1                   Rx8130_Writ_Byte(0x65);
 256   1                   i=Rx8130_Read_Byte();
 257   1                   Rx8130_Mack();
 258   1                   Rx8130_Read_Byte();
 259   1                   Rx8130_Mnak();
 260   1                   Rx8130_Stop();
 261   1                   if((i&0x02)==0x02)
 262   1                     {  
 263   2                        //重新配置时间
 264   2                        Rx8130_Start();   //30=00
 265   2                        Rx8130_Writ_Byte(0x64);
 266   2                        Rx8130_Writ_Byte(0x30);
 267   2                        Rx8130_Writ_Byte(0x00);
 268   2                        Rx8130_Stop();
 269   2                        Rx8130_Start();   //1C-1F=48 00 40 10
 270   2                        Rx8130_Writ_Byte(0x64);
 271   2                        Rx8130_Writ_Byte(0x1C);
 272   2                        Rx8130_Writ_Byte(0x48);
 273   2                        Rx8130_Writ_Byte(0x00);
 274   2                        Rx8130_Writ_Byte(0x40);
 275   2                        Rx8130_Writ_Byte(0x10);
 276   2                        Rx8130_Stop();
 277   2                        Rx8130_Start();   //10-16=RTC设置值 BCD格式
 278   2                        Rx8130_Writ_Byte(0x64);
 279   2                        Rx8130_Writ_Byte(0x10);
 280   2                        Rx8130_Writ_Byte(0x00); //秒
 281   2                        Rx8130_Writ_Byte(0x00); //分
 282   2                        Rx8130_Writ_Byte(0x00); //时
 283   2                        Rx8130_Writ_Byte(0x01); //星期
 284   2                        Rx8130_Writ_Byte(0x01); //日
 285   2                        Rx8130_Writ_Byte(0x01); //月
 286   2                        Rx8130_Writ_Byte(0x17); //年
 287   2                        Rx8130_Stop();
 288   2                        Rx8130_Start();   //1E-1F 00 10
 289   2                        Rx8130_Writ_Byte(0x64);
 290   2                        Rx8130_Writ_Byte(0x1E);
 291   2                        Rx8130_Writ_Byte(0x00); 
 292   2                        Rx8130_Writ_Byte(0x10);     
 293   2                        Rx8130_Stop();
 294   2                     }
 295   1      }
 296          //=========================================
 297          void RTC_Set_Time()
 298          {             
 299   1                  u16  Va=Read_Dgus(0x009C); //0x5AA5
 300   1                  if(Va==0x5AA5)
 301   1                  {     u8 N=0,S=0;bit  Flog=1;
 302   2                        u8 TimeS[]={0,0,0,0,0,0,0};
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 6   

 303   2                        u16  V1=Read_Dgus(0x009D); //年，月
 304   2                        N=(u8)(V1>>8);TimeS[0]=((N/10)*16)+(N%10);
 305   2                        N=(u8)(V1);   TimeS[1]=((N/10)*16)+(N%10);
 306   2                        V1=Read_Dgus(0x009E); //日，时
 307   2                        N=(u8)(V1>>8);TimeS[2]=((N/10)*16)+(N%10);
 308   2                        N=(u8)(V1);   TimeS[4]=((N/10)*16)+(N%10);
 309   2                        V1=Read_Dgus(0x009F); //分，秒
 310   2                        N=(u8)(V1>>8);TimeS[5]=((N/10)*16)+(N%10);
 311   2                        N=(u8)(V1);   TimeS[6]=((N/10)*16)+(N%10);
 312   2      //                        V1=Read_Dgus(0x00A0); //秒，x  
 313   2      //                        N=(u8)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 314   2                        Write_Dgus(0x009c,0); 
 315   2                        while(Flog)
 316   2                        { 
 317   3                                  Rx8130_Start();   //30=00
 318   3                              Rx8130_Writ_Byte(0x64);
 319   3                              Rx8130_Writ_Byte(0x30);
 320   3                              Rx8130_Writ_Byte(0x00);
 321   3                              Rx8130_Stop();
 322   3                              Rx8130_Start();   //1C-1F=48 00 40 10
 323   3                              Rx8130_Writ_Byte(0x64);
 324   3                              Rx8130_Writ_Byte(0x1C);
 325   3                              Rx8130_Writ_Byte(0x48);
 326   3                              Rx8130_Writ_Byte(0x00);
 327   3                              Rx8130_Writ_Byte(0x40);
 328   3                              Rx8130_Writ_Byte(0x10);
 329   3                              Rx8130_Stop();
 330   3                              Rx8130_Start();   //10-16=RTC设置值 BCD格式
 331   3                              Rx8130_Writ_Byte(0x64);
 332   3                              Rx8130_Writ_Byte(0x10);
 333   3                              Rx8130_Writ_Byte(TimeS[6]); //秒
 334   3                              Rx8130_Writ_Byte(TimeS[5]); //分
 335   3                              Rx8130_Writ_Byte(TimeS[4]); //时
 336   3                              Rx8130_Writ_Byte(TimeS[3]); //星期
 337   3                              Rx8130_Writ_Byte(TimeS[2]); //日
 338   3                              Rx8130_Writ_Byte(TimeS[1]); //月
 339   3                              Rx8130_Writ_Byte(TimeS[0]); //年
 340   3                              Rx8130_Stop();
 341   3                              Rx8130_Start();   //1E-1F 00 10
 342   3                              Rx8130_Writ_Byte(0x64);
 343   3                              Rx8130_Writ_Byte(0x1E);
 344   3                              Rx8130_Writ_Byte(0x00); 
 345   3                              Rx8130_Writ_Byte(0x10);     
 346   3                              Rx8130_Stop(); 
 347   3                              Flog=0;
 348   3                         }
 349   2                  }
 350   1      }
 351          //========================================================================================================
             -================================
 352          //**********************SD2058接口程序，SDA 10K上拉到3.3V**************
 353            
 354          
 355          
 356          
 357          #endif
 358          
 359               
 360          //========================================================================================================
             -================================
 361          
 362              bit s=0;
C51 COMPILER V9.59.0.0   I2C                                                               04/24/2025 12:33:11 PAGE 7   

 363            u8 flag_rtc_init[8]={0};
 364              u8 flag_rtc_in[6]={0};
 365            
 366              
 367              
 368          void        Clock()
 369          {
 370   1      
 371   1             bit k=0;
 372   1             k=1;
 373   1      #if SELECT_RTC_TYPE       
 374   1             if(Select_rtc==1)  //RX8130
 375   1             {
 376   2               // if(RTC_Flog==0){ RTC_Flog=1;  Init_Rtc();}
 377   2                     if(SysTick_RTC >= 500) 
 378   2                     {
 379   3                       //EA=0;
 380   3                          Read_Time();                //更新硬件RTC时间
 381   3                          SysTick_RTC = 0;
 382   3                      // EA=1;
 383   3                        
 384   3                     }
 385   2                   RTC_Set_Time();
 386   2                    
 387   2                    
 388   2             }
 389   1      #endif         
 390   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2158    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =     21      44
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
