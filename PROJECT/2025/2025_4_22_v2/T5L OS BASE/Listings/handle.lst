C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HANDLE
OBJECT MODULE PLACED IN .\Objects\handle.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\handle.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sour
                    -ces;.\APP;.\PAGE) DEBUG PRINT(.\Listings\handle.lst) TABS(2) OBJECT(.\Objects\handle.obj)

line level    source

   1          /******************************************************************************
   2          * 文 件 名   : handle.c
   3          * 版 本 号   : V1.0
   4          * 作    者   : pinot
   5          * 生成日期   : 2019年11月27日
   6          * 功能描述   : 逻辑处理
   7          * 修改历史   :
   8          * 日    期   :
   9          * 作    者   :
  10          * 修改内容   :
  11          ******************************************************************************/
  12          
  13          /*****************************************************************************
  14          自定义头文件*/
  15          #include "handle.h"
  16          #include  "i2c.h"
  17          
  18          /*****************************************************************************
  19          全局变量*/
  20          //内部RAM
  21          uint8_t value0F00[4] = {0};
  22          uint8_t xp_status=0;
  23          
  24          //外部RAM
  25          typedef struct dlt_645_8283
  26          {
  27              uint8_t st_byte1;//帧起始符
  28              uint8_t st_byte2;//帧起始符
  29              uint8_t lenth;//长度
  30              uint8_t func;//类型
  31              uint8_t addr1;//地址
  32              uint8_t addr2;//地址  
  33              uint8_t edata[250];//数据内容
  34          }dl_t_645_8283_body;
  35          dl_t_645_8283_body xdata s_dl_t_645_8283_body={0};
  36          
  37          #define FRAME_BUFFER_LEN 255
  38          uint8_t xdata frame_buf[FRAME_BUFFER_LEN];//用来存取一帧数据
  39          uint8_t xdata frame_buf1[FRAME_BUFFER_LEN]=0;//用来存取一帧数据
  40          #define DLT_645_LEAST_LEN 7
  41          
  42          
  43          //代码空间
  44          uint8_t code CUart2[] = "Uart2Init Done!!!123";
  45          uint8_t code CUart3[] = "Uart3Init Done!!!";
  46          uint8_t code CUart4[] = "Uart4Init Done!!!";
  47          uint8_t code CUart5[] = "Uart5Init Done!!!";
  48          
  49          
  50          //解析到一帧数据可能出现的情况
  51          typedef enum frame_result
  52          {
  53              UNKNOWN,
  54              OK,           //成功找到一帧
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 2   

  55              UNFINISHED,   //未接收完成
  56              ERROR,        //不满足此协议
  57          }frame_result_t;
  58          
  59          //定义协议类型
  60          typedef enum protocol_type
  61          {
  62              PROTOCOL_UNKNOWN,
  63              PROTOCOL_DL_T_698,
  64              PROTOCOL_DL_T_645,
  65              PROTOCOL_OTHER,
  66          }protocol_type_t;
  67          
  68          #if 0
              /*****************************************************************************
              控制亮度*/
              void SetBlight(uint8_t n)
              {
              //  uint8_t temp[4]={0};
                WriteDGUS(DHW_LEDCFG,(uint8_t *)&n,sizeof(n));
              //  do
              //  {
              //    DelayMs(5);
              //    ReadDGUS(DHW_LEDNOW,temp,2);//设置亮度与获取到的亮度不一致
              //  }while(!(temp[1]==n));
              }
              /*****************************************************************************
              控制伴音*/
              void SetVoice(int8_t status)
              {
                uint8_t temp[4]={0};
                ReadDGUS(DHW_SYSCFG,temp,sizeof(temp));
                temp[0]=0x5A;
                if(1==status){temp[3]&=0xF7;}
                else if(2==status){temp[3]|=0x08;}
                else{return;}
                WriteDGUS(DHW_SYSCFG,temp,sizeof(temp));
                do
                {
                  DelayMs(5);
                  ReadDGUS(DHW_SYSCFG,temp,1);
                }while(temp[0]!=0);
              }
              
              #endif
 100          
 101          
 102          /*****************************************************************************
 103          判断按键值是否有上传*/
 104          int8_t GetValue0F00(void)
 105          {
 106   1        uint8_t cleanData[4]={0};
 107   1        ReadDGUS(DHW_0F00,value0F00,sizeof(value0F00));
 108   1        if(0x5A == value0F00[0])
 109   1        {
 110   2          WriteDGUS(DHW_0F00,cleanData,sizeof(cleanData));
 111   2          return 1;
 112   2        }
 113   1        return 0;
 114   1      }
 115          /*****************************************************************************
 116          串口初次打印*/
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 3   

 117          void InitUartSend(void)
 118          {
 119   1        Uart2SendStr(CUart2,sizeof(CUart2));
 120   1      //  Uart3SendStr(CUart3,sizeof(CUart3));
 121   1      //  Uart4SendStr(CUart4,sizeof(CUart4));
 122   1      //  Uart5SendStr(CUart5,sizeof(CUart5));
 123   1      }
 124          
 125          #if 1
 126          /*****************************************************************************
 127          跳转指定页面*/
 128          void JumpPage(uint16_t pageId)
 129          {
 130   1        uint8_t temp[4]={0x5A,0x01,0,0};
 131   1        temp[2]=(uint8_t)(pageId>>8);
 132   1        temp[3]=pageId;
 133   1        WriteDGUS(DHW_SPAGE,temp,sizeof(temp));
 134   1        do
 135   1        {
 136   2          DelayMs(5);
 137   2          ReadDGUS(DHW_SPAGE,temp,1);
 138   2        }while(temp[0]!=0);
 139   1      }
 140          #endif
 141          
 142          
 143          
 144            //    /***********************设置页面*****************************/u16 char_hide=0xff00;
 145          void page_set(uint16_t getDar)
 146          {
 147   1      //u16 char_attend_rtc=0x1300;
 148   1      //        else  if(Page_s[1]==Page_shezhi)
 149   1      //  {
 150   1          if(getDar==0x1440 ||  getDar==0x1441) //屏幕亮度
 151   1          {
 152   2            //set_page_write();
 153   2          }
 154   1            else if(getDar==0x1400)   //rtc set finish
 155   1        {
 156   2          RTC_SET_IN(); 
 157   2        }
 158   1        else if(getDar==0x1410)   //治疗预设写入 flash
 159   1        {
 160   2          //zhiliao_SET();
 161   2        }
 162   1        else if(getDar==0x1420)   //开机自动启动 
 163   1        {
 164   2          //Sudoopen_set_handle();
 165   2        }
 166   1        else if(getDar==0x1430)         //恢复出厂设置
 167   1        {
 168   2         //reset_data();
 169   2        }
 170   1        
 171   1      }
 172            
 173            
 174          /*****************************************************************************
 175          按键按压之后处理流程*/
 176          void TouchHandle(void)
 177          {
 178   1        uint8_t temp[16]={0};
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 4   

 179   1        uint16_t flag=0;
 180   1        uint16_t iconid=0;
 181   1        uint16_t getDar=0;
 182   1        getDar = value0F00[1]<<8|value0F00[2];
 183   1        LOG((uint8_t *)&getDar,sizeof(getDar));
 184   1        
 185   1        s_dl_t_645_8283_body.st_byte1=0x5A;
 186   1        s_dl_t_645_8283_body.st_byte2=0xA5;
 187   1        s_dl_t_645_8283_body.lenth=value0F00[3]*2+3;  
 188   1        s_dl_t_645_8283_body.func=0x83; 
 189   1        s_dl_t_645_8283_body.addr1=value0F00[1];
 190   1        s_dl_t_645_8283_body.addr2=value0F00[2];
 191   1        ReadDGUS(getDar,(uint8_t *)&s_dl_t_645_8283_body.edata[0],value0F00[3]*2);
 192   1        
 193   1        
 194   1        page_set(getDar);
 195   1        
 196   1      //  Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 197   1      
 198   1      //  switch(getDar)
 199   1      //  {
 200   1      //    default:
 201   1      //    break;
 202   1      //  }
 203   1      }
 204          
 205          /*****************************************************************************
 206          功能：回传数据*/
 207          void dlt645_handle(void)
 208          {
 209   1        uint16_t ADDR=0;
 210   1      
 211   1        ADDR = ((uint16_t)(s_dl_t_645_8283_body.addr1))<<8 | s_dl_t_645_8283_body.addr2;
 212   1      
 213   1        if(s_dl_t_645_8283_body.func == 0x82)
 214   1        {
 215   2          WriteDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata),s_dl_t_645_8283_body.lenth-3);
 216   2          s_dl_t_645_8283_body.lenth=3;
 217   2          s_dl_t_645_8283_body.addr1=0x4F;
 218   2          s_dl_t_645_8283_body.addr2=0x4B;
 219   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 220   2        }
 221   1        else if(s_dl_t_645_8283_body.func == 0x83)
 222   1        {
 223   2          ReadDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata[1]),s_dl_t_645_8283_body.edata[0]*2);
 224   2          s_dl_t_645_8283_body.lenth+=s_dl_t_645_8283_body.edata[0]*2;
 225   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 226   2        }
 227   1        
 228   1      }
 229          /*****************************************************************************
 230          功能:检索一帧数据将值赋给结构体*/
 231          uint8_t parse_dlt645_frame(uint8_t *p_frame, uint16_t frame_len, uint8_t* sframe_body)
 232          {
 233   1          uint16_t temp16_t = 0;//一帧数据的总长度
 234   1          uint16_t i = 0;
 235   1      
 236   1          if(1){
 237   2              memcpy(sframe_body,p_frame, frame_len);
 238   2              return 1;
 239   2          }
 240   1         // return 0;     //上面if(1)永远都成立，执行不到这一行
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 5   

 241   1      } 
 242          /*****************************************************************************
 243          功能:从缓存区buf中检索dlt645帧数据*/
 244          /*
 245           * 将一帧数据读取到frame_buf中     
 246           * line:缓存区0x7F开头的数据
 247           * out:将捡出来的帧复制到该数组中
 248           * frame_len:捡出来的帧的长度，
 249           * line_len:缓存区buf中0x7F开头的数据长度
 250           **/
 251          frame_result_t find_dlt645_frame(uint8_t* line, uint8_t* out, uint16_t* frame_len, uint16_t line_len) {
 252   1          uint16_t frame_length = 0;//一帧数据的总长度
 253   1          uint16_t temp_len = 0;
 254   1      
 255   1          if (line_len < DLT_645_LEAST_LEN) {
 256   2              return UNFINISHED;
 257   2          }
 258   1          //判断第0位
 259   1          if (line[0] != 0x5A) {  
 260   2              return ERROR;
 261   2          }
 262   1          if (line[1] != 0xA5) {  
 263   2              return ERROR;
 264   2          }   
 265   1          frame_length = line[2]+3;
 266   1          
 267   1          if (frame_length <= line_len) {
 268   2                  //检到一帧数据                
 269   2                  for (temp_len = 0; temp_len < frame_length; temp_len ++) {
 270   3                      out[temp_len] = *line;
 271   3                      line++;
 272   3                  }
 273   2                  *frame_len = frame_length;
 274   2                  return OK;
 275   2          } else {
 276   2              //数据还没接收完整
 277   2              return UNFINISHED;
 278   2          }
 279   1      }
 280          
 281          /*****************************************************************************
 282          功能:协议数据解析*/
 283          void ParseBuffer(void)
 284          {
 285   1          uint16_t frame_length = 0;//一帧数据的总长度
 286   1          uint16_t i = 0, temp_len = 0;
 287   1          uint8_t has_content = 0;//buf中是否有数据
 288   1          uint8_t frame_error = 0;//缓存区当前的数据对所有协议都不满足
 289   1          uint8_t*  p_buf= Uart2_Rx;
 290   1          protocol_type_t protl_type = PROTOCOL_UNKNOWN;
 291   1          frame_result_t find_frame_re = UNKNOWN;
 292   1      
 293   1          //用来保存每个协议解析后的结果 
 294   1          //frame_results[0] 保存PROTOCOL_DL_T_645协议解析结果
 295   1          //frame_results[1] 保存PROTOCOL_DL_T_698协议解析结果
 296   1          frame_result_t frame_results[2] = {UNKNOWN, UNKNOWN}; 
 297   1      
 298   1          has_content = uart2_rx_count > 2;
 299   1          while (has_content) {
 300   2              p_buf = Uart2_Rx;
 301   2              //检索0x5A开头的数据
 302   2              while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 6   

 303   3                  p_buf ++;
 304   3              }
 305   2              if (p_buf == Uart2_Rx + uart2_rx_count) {
 306   3                  //检索当前包数据，都不包含，清空
 307   3                  uart2_rx_count = 0;
 308   3                  break;
 309   3              }
 310   2              //Uart4_Rx中剩余的数据长度
 311   2              temp_len = uart2_rx_count - (p_buf - Uart2_Rx);
 312   2      
 313   2              //以下处理不包含校验
 314   2              switch(protl_type) {
 315   3                  case PROTOCOL_UNKNOWN:
 316   3                      memset(frame_buf,0,sizeof(frame_buf));
 317   3                      find_frame_re = UNKNOWN;
 318   3                      frame_error = 0;
 319   3                      frame_length = 0;
 320   3                      for (i = 0; i < 3; i ++) {
 321   4                          frame_results[i] = UNKNOWN;
 322   4                      }
 323   3                      
 324   3                  case PROTOCOL_DL_T_645:
 325   3                      find_frame_re = find_dlt645_frame(p_buf, frame_buf, &frame_length, temp_len);
 326   3      
 327   3                      frame_results[0] = find_frame_re;
 328   3                      if (find_frame_re == OK) {
 329   4                            if (parse_dlt645_frame(frame_buf, frame_length, (uint8_t *)&s_dl_t_645_8283_body)) {
 330   5                                //解析到一包有效数据
 331   5                              dlt645_handle();
 332   5                              memset(&s_dl_t_645_8283_body, 0, sizeof(dl_t_645_8283_body));
 333   5                            }
 334   4                            break;
 335   4                      }
 336   3      
 337   3                  case PROTOCOL_OTHER:
 338   3                      //此处添加其他协议解析
 339   3                      //break;
 340   3                      
 341   3                  default :
 342   3                      if (frame_results[0] == ERROR ) {
 343   4                          //缓存区的数据不满足现有协议的解析
 344   4                          //继续找下一个0x7F起始符
 345   4                          p_buf ++;//跳过当前的0x7F
 346   4                          //检索0x7F开头的数据
 347   4                          while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 348   5                              p_buf ++;
 349   5                          }
 350   4                          
 351   4                          if (p_buf == Uart2_Rx + uart2_rx_count) {
 352   5                              //检索当前包数据，都不包含，清空
 353   5                              uart2_rx_count = 0;
 354   5                              break;
 355   5                          }
 356   4      
 357   4                          //找到下一条0x5A开头的数据帧
 358   4                          frame_error = 1;
 359   4                      }
 360   3                      break;
 361   3              }
 362   2      
 363   2              //当成功检索到一帧数据或缓存区的数据不满足现有协议的解析
 364   2              //buf中剩余的有效数据前移
C51 COMPILER V9.59.0.0   HANDLE                                                            04/22/2025 18:13:37 PAGE 7   

 365   2              if (find_frame_re == OK || frame_error) {
 366   3                  //uart_rcvd_buf剩余的数据长度
 367   3                  temp_len = uart2_rx_count - (p_buf - Uart2_Rx) - frame_length;
 368   3                  if (temp_len > 0) {
 369   4                      //当前uart_rcvd_buf中剩余的数据前移
 370   4                      for (i = 0; i < temp_len; i ++) {
 371   5                          Uart2_Rx[i] = *(p_buf + frame_length + i);
 372   5                          *(p_buf + frame_length + i) = 0x00;
 373   5                      }
 374   4                      has_content = 1;//继续循环解析
 375   4                  } else {
 376   4                      //解析过的位清空
 377   4                      for (i = 0; i < (p_buf - Uart2_Rx) + frame_length; i ++) {
 378   5                          Uart2_Rx[i] = 0x00;
 379   5                      }
 380   4                      has_content = 0;
 381   4                  }
 382   3                  uart2_rx_count = temp_len;
 383   3              } else {
 384   3                  has_content = 0;
 385   3              }
 386   2          }
 387   1      }
 388          
 389          
 390          /*****************************************************************************
 391          主流程*/
 392          void HandleProc(void)
 393          {
 394   1          if(GetValue0F00())    //检测是否有触摸上传数据
 395   1          {
 396   2            TouchHandle();
 397   2          }
 398   1          ParseBuffer();
 399   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1728    ----
   CONSTANT SIZE    =    101    ----
   XDATA SIZE       =    771      76
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
