C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN .\Objects\rtc.obj
COMPILER INVOKED BY: D:\Keil\Keil C51\C51\BIN\C51.EXE Sources\rtc.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\rtc.lst) TABS(2) OBJECT(.\Objects\rtc.obj)

line level    source

   1          #include "rtc.h"
   2          #include "sys.h"
   3          #include "uart.h"
   4          #include "timer.h"
   5          u16 time[4];
   6          u16 data SysTick_RTC=0;
   7          bit RTC_Flog=0;
   8          //====================================
   9          u16 Read_Dgus(u16 Dgus_Addr)
  10          {          u16 R_Dgus=0;
  11   1             EA = 0;ADR_H = 0x00;
  12   1             ADR_M = (u8)((Dgus_Addr/2)>>8);
  13   1             ADR_L = (u8)(Dgus_Addr/2);
  14   1             RAMMODE = 0xAF; while(!APP_ACK); //读操作
  15   1             APP_EN = 1;     while(APP_EN);
  16   1             if(Dgus_Addr%2)  R_Dgus = (DATA1<<8)+DATA0; 
  17   1             else            R_Dgus=(DATA3<<8)+DATA2;
  18   1             RAMMODE = 0; EA = 1; return   R_Dgus;
  19   1      }
  20          //====================================
  21          void Write_Dgus(u16 Dgus_Addr,u16 Val)
  22          {           EA = 0;
  23   1                  ADR_H = 0x00;
  24   1                  ADR_M = (u8)((Dgus_Addr/2)>>8);
  25   1                  ADR_L = (u8)(Dgus_Addr/2);
  26   1                  RAMMODE = 0xAF;   //读操作
  27   1                  while(!APP_ACK);
  28   1                  APP_EN = 1;
  29   1                  while(APP_EN);
  30   1                  RAMMODE = 0;
  31   1                    ADR_M = (u8)((Dgus_Addr/2)>>8);
  32   1                  ADR_L = (u8)(Dgus_Addr/2);
  33   1                  RAMMODE = 0x8F;   //写操作
  34   1                    while(!APP_ACK);
  35   1                  if(Dgus_Addr%2){DATA1=(u8)(Val>>8); DATA0=(u8)(Val); }
  36   1                  else { DATA3 =(u8)(Val>>8); DATA2 =(u8)(Val);}
  37   1                    APP_EN = 1;
  38   1                  while(APP_EN);
  39   1                  RAMMODE = 0;
  40   1                  EA = 1;
  41   1      }
  42          //===========================
  43          void Delayus() {  u8 i;for(i=0;i<50;i++);}
  44          //===========================
  45          void SDA_IN()  {  P3MDOUT=P3MDOUT&0xF7;}
  46          //===========================
  47          void SDA_OUT() {  P3MDOUT=P3MDOUT|0x08;}
  48          //==========================
  49          void Rx8130_Start()
  50          { 
  51   1                  SDA_OUT();
  52   1                  RTC_SDA=1;
*** ERROR C202 IN LINE 52 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  53   1                  RTC_SCL=1;
C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 2   

*** ERROR C202 IN LINE 53 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  54   1                  Delayus();  //15
  55   1                  RTC_SDA=0;
*** ERROR C202 IN LINE 55 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  56   1                  Delayus();  //15
  57   1                  RTC_SCL=0;
*** ERROR C202 IN LINE 57 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  58   1                  Delayus();  //15
  59   1      }
  60          //================================
  61          void Rx8130_Stop()
  62          { 
  63   1                  SDA_OUT();
  64   1                  RTC_SDA=0;
*** ERROR C202 IN LINE 64 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  65   1                  RTC_SCL=1;
*** ERROR C202 IN LINE 65 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  66   1                  Delayus();//15
  67   1                  RTC_SDA=1;
*** ERROR C202 IN LINE 67 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  68   1                  Delayus();//15
  69   1                  SDA_IN();
  70   1      }
  71          //================================
  72          void Rx8130_Mack()
  73          { 
  74   1                  SDA_OUT();
  75   1                  RTC_SDA=0;
*** ERROR C202 IN LINE 75 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  76   1                  Delayus();
  77   1                  RTC_SCL=1;
*** ERROR C202 IN LINE 77 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  78   1                  Delayus();
  79   1                  RTC_SCL=0;
*** ERROR C202 IN LINE 79 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  80   1                  Delayus();
  81   1      }
  82          //=================================
  83          void Rx8130_Mnak()
  84          { 
  85   1                  SDA_OUT();
  86   1                  RTC_SDA=1;
*** ERROR C202 IN LINE 86 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  87   1                  Delayus();
  88   1                  RTC_SCL=1;
*** ERROR C202 IN LINE 88 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  89   1                  Delayus();
  90   1                  RTC_SCL=0;
*** ERROR C202 IN LINE 90 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
  91   1                  Delayus();
  92   1      }
  93          //=================================
  94          void Rx8130_Cack()
  95          { 
  96   1                  u8 i;
  97   1                  SDA_IN();
  98   1                  RTC_SDA=1;
*** ERROR C202 IN LINE 98 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
  99   1                  Delayus();
 100   1                  RTC_SCL=1;
*** ERROR C202 IN LINE 100 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 101   1                  Delayus();
C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 3   

 102   1                  for(i=0;i<50;i++)
 103   1                  {   
 104   2                          if(!RTC_SDA) break;
*** ERROR C202 IN LINE 104 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
 105   2                          Delayus();
 106   2                  }
 107   1                  RTC_SCL=0;
*** ERROR C202 IN LINE 107 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 108   1                  Delayus();
 109   1                  SDA_OUT();
 110   1      }
 111          
 112          //=========================================
 113          void Rx8130_Writ_Byte(u8 dat)
 114          { 
 115   1                  u8 i;
 116   1                  SDA_OUT();
 117   1                  for(i=0;i<8;i++)
 118   1                  { 
 119   2                            if(dat&0x80)   RTC_SDA=1;
*** ERROR C202 IN LINE 119 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
 120   2                            else           RTC_SDA=0;
*** ERROR C202 IN LINE 120 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
 121   2                            dat=(dat<<1);
 122   2                            Delayus();
 123   2                            RTC_SCL=1;
*** ERROR C202 IN LINE 123 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 124   2                            Delayus();
 125   2                            RTC_SCL=0;
*** ERROR C202 IN LINE 125 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 126   2                            Delayus();
 127   2                  }
 128   1                  Rx8130_Cack();
 129   1      }
 130          
 131          //====================================================
 132          u8 Rx8130_Read_Byte()
 133          { 
 134   1                  u8 i;
 135   1                  u8 Dat;
 136   1                  SDA_IN();
 137   1                  for(i=0;i<8;i++)
 138   1                  { 
 139   2                          Delayus();
 140   2                          RTC_SCL=1;
*** ERROR C202 IN LINE 140 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 141   2                          Delayus();
 142   2                          Dat=(Dat<<1);
 143   2                          if(RTC_SDA)  Dat=Dat|0x01;
*** ERROR C202 IN LINE 143 OF Sources\rtc.c: 'RTC_SDA': undefined identifier
 144   2                          else         Dat=Dat&0xFE;
 145   2                          RTC_SCL=0;
*** ERROR C202 IN LINE 145 OF Sources\rtc.c: 'RTC_SCL': undefined identifier
 146   2                          Delayus();
 147   2                  }
 148   1                  return(Dat);
 149   1      }
 150          //把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 151          void Read_Time()
 152          { 
 153   1                  u8 i,N,M; 
 154   1                            u8 Rtcdata[]={0,0,0,0,0,0,0,0};
C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 4   

 155   1                  Rx8130_Start();
 156   1                  Rx8130_Writ_Byte(0x64);
 157   1                  Rx8130_Writ_Byte(0x10);
 158   1                  Rx8130_Stop();
 159   1                  Rx8130_Start();
 160   1                  Rx8130_Writ_Byte(0x65);
 161   1                  for(i=6;i>0;i--)
 162   1                  { 
 163   2                                Rtcdata[i]=Rx8130_Read_Byte();
 164   2                                Rx8130_Mack();
 165   2                  }
 166   1                  Rtcdata[0]=Rx8130_Read_Byte(); Rx8130_Mnak();
 167   1                  Rx8130_Stop();
 168   1                  for(i=0;i<3;i++)  //年月日转换成HEX
 169   1                  { 
 170   2                                            N=Rtcdata[i]/16;
 171   2                                M=Rtcdata[i]%16;
 172   2                                Rtcdata[i]=N*10+M;
 173   2                  }
 174   1                  for(i=4;i<7;i++)  //时分秒转换成HEX
 175   1                  { 
 176   2                                N=Rtcdata[i]/16;
 177   2                                M=Rtcdata[i]%16;
 178   2                                Rtcdata[i]=N*10+M;
 179   2                  }
 180   1                  Write_Dgus(0X0010,(Rtcdata[0]<<8)+Rtcdata[1]);
 181   1                  Write_Dgus(0X0011,(Rtcdata[2]<<8)+Rtcdata[3]);
 182   1                  Write_Dgus(0X0012,(Rtcdata[4]<<8)+Rtcdata[5]);
 183   1                  Write_Dgus(0X0013,(Rtcdata[6]<<8)+Rtcdata[7]);
 184   1      }
 185          //====================================================================
 186          void Init_Rtc()
 187          { 
 188   1                u8 i;
 189   1                Rx8130_Start();
 190   1                Rx8130_Writ_Byte(0x64);
 191   1                Rx8130_Writ_Byte(0x1d);
 192   1                Rx8130_Stop();
 193   1                Rx8130_Start();
 194   1                Rx8130_Writ_Byte(0x65);
 195   1                i=Rx8130_Read_Byte();
 196   1                Rx8130_Mack();
 197   1                Rx8130_Read_Byte();
 198   1                Rx8130_Mnak();
 199   1                Rx8130_Stop();
 200   1                if((i&0x02)==0x02)
 201   1                  { 
 202   2                        //重新配置时间
 203   2                        Rx8130_Start();   //30=00
 204   2                        Rx8130_Writ_Byte(0x64);
 205   2                        Rx8130_Writ_Byte(0x30);
 206   2                        Rx8130_Writ_Byte(0x00);
 207   2                        Rx8130_Stop();
 208   2                        Rx8130_Start();   //1C-1F=48 00 40 10
 209   2                        Rx8130_Writ_Byte(0x64);
 210   2                        Rx8130_Writ_Byte(0x1C);
 211   2                        Rx8130_Writ_Byte(0x48);
 212   2                        Rx8130_Writ_Byte(0x00);
 213   2                        Rx8130_Writ_Byte(0x40);
 214   2                        Rx8130_Writ_Byte(0x10);
 215   2                        Rx8130_Stop();
 216   2                        Rx8130_Start();   //10-16=RTC设置值 BCD格式
C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 5   

 217   2                        Rx8130_Writ_Byte(0x64);
 218   2                        Rx8130_Writ_Byte(0x10);
 219   2                        Rx8130_Writ_Byte(0x00); //秒
 220   2                        Rx8130_Writ_Byte(0x00); //分
 221   2                        Rx8130_Writ_Byte(0x00); //时
 222   2                        Rx8130_Writ_Byte(0x01); //星期
 223   2                        Rx8130_Writ_Byte(0x01); //日
 224   2                        Rx8130_Writ_Byte(0x01); //月
 225   2                        Rx8130_Writ_Byte(0x17); //年
 226   2                        Rx8130_Stop();
 227   2                        Rx8130_Start();   //1E-1F 00 10
 228   2                        Rx8130_Writ_Byte(0x64);
 229   2                        Rx8130_Writ_Byte(0x1E);
 230   2                        Rx8130_Writ_Byte(0x00); 
 231   2                        Rx8130_Writ_Byte(0x10);     
 232   2                        Rx8130_Stop();
 233   2                 }
 234   1      }
 235          //=========================================
 236          void RTC_Set_Time()
 237          {             
 238   1                  u16  Va=Read_Dgus(0x009C); //0x5AA5
 239   1                  if(Va==0x5AA5)
 240   1                  {     u8 N=0,S=0;bit  Flog=1;
 241   2                        u8 TimeS[]={0,0,0,0,0,0,0};
 242   2                        u16  V1=Read_Dgus(0x009D); //年，月
 243   2                        N=(u8)(V1>>8);TimeS[0]=((N/10)*16)+(N%10);
 244   2                        N=(u8)(V1);   TimeS[1]=((N/10)*16)+(N%10);
 245   2                        V1=Read_Dgus(0x009E); //日，星期
 246   2                        N=(u8)(V1>>8);TimeS[2]=((N/10)*16)+(N%10);
 247   2                        N=(u8)(V1);   TimeS[3]=((N/10)*16)+(N%10);
 248   2                        V1=Read_Dgus(0x009F); //时，分
 249   2                        N=(u8)(V1>>8);TimeS[4]=((N/10)*16)+(N%10);
 250   2                        N=(u8)(V1);   TimeS[5]=((N/10)*16)+(N%10);
 251   2                              V1=Read_Dgus(0x00A0); //秒，x  
 252   2                              N=(u8)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 253   2                        Write_Dgus(0x009c,0); 
 254   2                        while(Flog)
 255   2                        { 
 256   3                                  Rx8130_Start();   //30=00
 257   3                              Rx8130_Writ_Byte(0x64);
 258   3                              Rx8130_Writ_Byte(0x30);
 259   3                              Rx8130_Writ_Byte(0x00);
 260   3                              Rx8130_Stop();
 261   3                              Rx8130_Start();   //1C-1F=48 00 40 10
 262   3                              Rx8130_Writ_Byte(0x64);
 263   3                              Rx8130_Writ_Byte(0x1C);
 264   3                              Rx8130_Writ_Byte(0x48);
 265   3                              Rx8130_Writ_Byte(0x00);
 266   3                              Rx8130_Writ_Byte(0x40);
 267   3                              Rx8130_Writ_Byte(0x10);
 268   3                              Rx8130_Stop();
 269   3                              Rx8130_Start();   //10-16=RTC设置值 BCD格式
 270   3                              Rx8130_Writ_Byte(0x64);
 271   3                              Rx8130_Writ_Byte(0x10);
 272   3                              Rx8130_Writ_Byte(TimeS[6]); //秒
 273   3                              Rx8130_Writ_Byte(TimeS[5]); //分
 274   3                              Rx8130_Writ_Byte(TimeS[4]); //时
 275   3                              Rx8130_Writ_Byte(TimeS[3]); //星期
 276   3                              Rx8130_Writ_Byte(TimeS[2]); //日
 277   3                              Rx8130_Writ_Byte(TimeS[1]); //月
 278   3                              Rx8130_Writ_Byte(TimeS[0]); //年
C51 COMPILER V9.60.0.0   RTC                                                               05/03/2024 15:11:02 PAGE 6   

 279   3                              Rx8130_Stop();
 280   3                              Rx8130_Start();   //1E-1F 00 10
 281   3                              Rx8130_Writ_Byte(0x64);
 282   3                              Rx8130_Writ_Byte(0x1E);
 283   3                              Rx8130_Writ_Byte(0x00); 
 284   3                              Rx8130_Writ_Byte(0x10);     
 285   3                              Rx8130_Stop(); 
 286   3                              Flog=0;
 287   3                         }
 288   2                  }
 289   1      }
 290          //==================================================================== 
 291          
 292          void        Clock()
 293          {
 294   1                             if(RTC_Flog==0){ RTC_Flog=1;  Init_Rtc(); }
 295   1                     if(SysTick_RTC >= 500) //原来是500，调试改为50
 296   1                     {
 297   2                          Read_Time();                //更新硬件RTC时间
 298   2                          SysTick_RTC = 0;
 299   2                     }
 300   1                   RTC_Set_Time();
 301   1      }
 302          /*****************************************************************************
 303          主函数*/
 304          
 305          //void        main()
 306          //{
 307          //              
 308          //         InitCPU();
 309          //           while(1)
 310          //           {
 311          //                      Clock();
 312          //                      time[0] = Read_Dgus(0X10);
 313          //                      time[1] = Read_Dgus(0X11);
 314          //                      time[2] = Read_Dgus(0X12);
 315          //                      time[3] = Read_Dgus(0X13); //read time to time[]
 316          //           }
 317          //}
 318          ////=========================================
 319          //void T2_ISR_PC()    interrupt 5
 320          //{
 321          //                TF2=0;
 322          //              SysTick_RTC++;
 323          //}
 324          
 325          void RTC_Start(void)
 326          {
 327   1        
 328   1                            Clock();
 329   1                            time[0] = Read_Dgus(0X10);
 330   1                            time[1] = Read_Dgus(0X11);
 331   1                            time[2] = Read_Dgus(0X12);
 332   1                            time[3] = Read_Dgus(0X13); //read time to time[]
 333   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  24 ERROR(S)
