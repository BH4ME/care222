C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\i2c.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE APP\i2c.c LARGE OMF2 OPTIMIZE(3,SIZE) BROWSE INCDIR(.\Sources;.\AP
                    -P) DEBUG PRINT(.\Listings\i2c.lst) TABS(2) OBJECT(.\Objects\i2c.obj)

line level    source

   1          
   2          #include  "i2c.h"
   3          //#include "sys.h"
   4          #include "dgus.h"
   5          //#include "sys_params.h"
   6          
   7          uint16_t SysTick_RTC=0;
   8          
   9          //bit RTC_Flog=0;
  10          void      RTC_Set_Time();   
  11          
  12          
  13          uint8_t  Select_rtc=SELECT_RTC_TYPE; //选择RTC类型
  14          #if SELECT_RTC_TYPE   
  15          //===========================
  16          void Delayus() {uint8_t i;for(i=0;i<80;i++);}  //50
  17          //===========================
  18          void SDA_IN()  {P3MDOUT=P3MDOUT&0xF7;}
  19          //===========================
  20          void SDA_OUT() {P3MDOUT=P3MDOUT|0x08;}
  21          //===========================
  22          
  23          
  24          /**********************设置界面写入rtc检测*************************
  25          当提交键按下后运行此函数，先将年月日时分秒写入到9d地址，然后在将9c写入5aa5
  26          配合rx8130
  27          ********************************************************************/
  28          void RTC_SET_IN()
  29          {
  30   1        uint8_t RTC_H[4]; //2023 02 18  年月日
  31   1                      //0  1  2  3
  32   1        uint8_t RTC_L[4]; //00  12 45 23  时分秒
  33   1                      //0   1  2  3
  34   1        
  35   1       uint8_t RTC_6[6]={0};
  36   1        static uint8_t RTC_9C[2]={0x5a,0xa5};
  37   1         uint32_t RTC_H_HEX;
  38   1        static uint32_t RTC_L_HEX;
  39   1        //long i;
  40   1      // u64 RTC_8;
  41   1        ReadDGUS(0X1300,(uint8_t *)&RTC_H,sizeof(RTC_H));
  42   1        ReadDGUS(0X1305,(uint8_t *)&RTC_L,sizeof(RTC_L));
  43   1        
  44   1      
  45   1      //RTC[2]=0x12;
  46   1      //RTC[3]=0x66;
  47   1      //RTC[4]=0x37;
  48   1      //RTC[5]=0x06;
  49   1      //RTC[6]=0x4f;
  50   1      //RTC[7]=0x2b;
  51   1      //RTC_H[0]=0x01;
  52   1      //RTC_H[1]=0x34;
  53   1      //RTC_H[2]=0xb0;
  54   1      //RTC_H[3]=0x4b;
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 2   

  55   1      //    else RTC[4]=1;
  56   1      //  }
  57   1      //  else RTC[3]=1;
  58   1        //RTC_8=(RTC[0]<<56 | RTC[1]<<48  | RTC[2]<<40| RTC[3]<<32  | RTC[4]<<24  | RTC[5]<<16  |RTC[6]<<8  |RTC[7]);
  59   1        //for(i=0;i<=5;i++)   RTC_H_HEX=(uint32_t)(0x0134b04b);
  60   1        //{
  61   1          RTC_H_HEX=(uint32_t)(RTC_H[0])<<24  | (uint32_t)(RTC_H[1])<<16  | (uint32_t)(RTC_H[2])<<8 | (uint32_t)(RTC
             -_H[3]);
  62   1          RTC_L_HEX=(uint32_t)(RTC_L[0])<<24  | (uint32_t)(RTC_L[1])<<16  | (uint32_t)(RTC_L[2])<<8 | (uint32_t)(RTC
             -_L[3]);
  63   1          //RTC_H_HEX=(uint32_t)(0x0134b04b);
  64   1        //  RTC_L_HEX=((RTC_L[0]<<18  | RTC_L[1]<<10  |RTC_L[2]<<8  |RTC_L[3]));
  65   1          //RTC_6[5]=((uint32_t)(0x126637064f2b))%100;
  66   1          RTC_6[5]=RTC_L_HEX%100;
  67   1          RTC_6[4]=(RTC_L_HEX/100)%100;
  68   1          RTC_6[3]=(RTC_L_HEX/10000)%100;
  69   1          RTC_6[2]=RTC_H_HEX%100;
  70   1          RTC_6[1]=(RTC_H_HEX/100)%100;
  71   1          RTC_6[0]=(RTC_H_HEX/10000)%100;
  72   1        //}
  73   1        /***********************时间校准*********************/
  74   1        if(RTC_6[1]>0&&RTC_6[1]<=12)  //月
  75   1        {
  76   2          if(RTC_6[2]<=31&&RTC_6[2]>0)  //日
  77   2          {
  78   3            if(RTC_6[3]<=23&&RTC_6[3]>=0)
  79   3            {
  80   4              if(RTC_6[4]<=59&&RTC_6[4]>=0)
  81   4              {
  82   5                if(RTC_6[5]<=59&&RTC_6[5]>=0)
  83   5                {}
  84   5                  else RTC_6[5]=0;
  85   5              }else RTC_6[4]=0;
  86   4            }else RTC_6[3]=0;
  87   3          }
  88   2            else RTC_6[2]=1;
  89   2        }
  90   1        else RTC_6[1]=1;
  91   1        
  92   1            WriteDGUS(0x9d, (uint8_t *)&RTC_6,sizeof(RTC_6)); 
  93   1            WriteDGUS(0x9c, (uint8_t *)&RTC_9C,sizeof(RTC_9C)); 
  94   1        
  95   1        
  96   1        //同步更改rx8130的时间
  97   1            RTC_Set_Time();   
  98   1        
  99   1        
 100   1      }
 101          void Rx8130_Start()
 102          { 
 103   1                  SDA_OUT();
 104   1                  RTC_SDA=1;    //开始信号 scl为高时，sda由高到低
 105   1                  RTC_SCL=1;
 106   1                  Delayus();  //15
 107   1                  RTC_SDA=0;
 108   1                  Delayus();  //15
 109   1                  RTC_SCL=0;
 110   1                  Delayus();  //15
 111   1      }
 112          //================================
 113          void Rx8130_Stop()
 114          { 
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 3   

 115   1                  SDA_OUT();
 116   1                  RTC_SDA=0;  //end信号 scl为高时，sda由0到1
 117   1                  RTC_SCL=1;
 118   1                  Delayus();//15
 119   1                  RTC_SDA=1;
 120   1                  Delayus();//15
 121   1                  SDA_IN();
 122   1      }
 123          //================================
 124          void Rx8130_Mack()
 125          { 
 126   1                  SDA_OUT();
 127   1                  RTC_SDA=0;
 128   1                  Delayus();
 129   1                  RTC_SCL=1;
 130   1                  Delayus();
 131   1                  RTC_SCL=0;
 132   1                  Delayus();
 133   1      }
 134          //=================================
 135          void Rx8130_Mnak()
 136          { 
 137   1                  SDA_OUT();
 138   1                  RTC_SDA=1;
 139   1                  Delayus();
 140   1                  RTC_SCL=1;
 141   1                  Delayus();
 142   1                  RTC_SCL=0;
 143   1                  Delayus();
 144   1      }
 145          //=================================
 146          void Rx8130_Cack()
 147          { 
 148   1                  uint8_t i;
 149   1                  SDA_IN();
 150   1                  RTC_SDA=1;
 151   1                  Delayus();
 152   1                  RTC_SCL=1;
 153   1                  Delayus();
 154   1                  for(i=0;i<50;i++)
 155   1                  {   
 156   2                          if(!RTC_SDA) break;
 157   2                          Delayus();
 158   2                  }
 159   1                  RTC_SCL=0;
 160   1                  Delayus();
 161   1                  SDA_OUT();
 162   1      }
 163          //=========================================
 164          void Rx8130_Writ_Byte(uint8_t dat)
 165          { 
 166   1                  uint8_t i;
 167   1                  SDA_OUT();
 168   1                  for(i=0;i<8;i++)
 169   1                  { 
 170   2                            if(dat&0x80)   RTC_SDA=1;
 171   2                          else           RTC_SDA=0;
 172   2                          dat=(dat<<1);
 173   2                          Delayus();
 174   2                          RTC_SCL=1;
 175   2                          Delayus();
 176   2                          RTC_SCL=0;
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 4   

 177   2                          Delayus();
 178   2                  }
 179   1                  Rx8130_Cack();
 180   1      }
 181          //====================================================
 182          uint8_t Rx8130_Read_Byte()
 183          { 
 184   1                  uint8_t i;
 185   1                  uint8_t Dat;
 186   1                  SDA_IN();
 187   1                  for(i=0;i<8;i++)
 188   1                  { 
 189   2                          Delayus();
 190   2                          RTC_SCL=1;
 191   2                          Delayus();
 192   2                          Dat=(Dat<<1);
 193   2                          if(RTC_SDA)  Dat=Dat|0x01;
 194   2                          else         Dat=Dat&0xFE;
 195   2                          RTC_SCL=0;
 196   2                          Delayus();
 197   2                  }
 198   1                  return(Dat);
 199   1      }
 200          //====================================================
 201          uint8_t RTC_Get_Week(uint8_t years,uint8_t month,uint8_t day)
 202          { 
 203   1        uint8_t xdata weak;
 204   1        uint16_t xdata year;
 205   1        year= years+2000;
 206   1        if(month==1||month==2)
 207   1        {
 208   2          month += 12, year--;
 209   2        }
 210   1        if((year<1752)||(year==1752&&month<9)||(year==1752&&month==9&&day<3))
 211   1        {
 212   2          weak = (day + 2*month + 3*(month+1)/5 + year + year/4 + 6)%7;
 213   2        }
 214   1        else
 215   1        {
 216   2          weak = (day +1 + 2*month + 3*(month+1)/5 + year + year/4 -year/100 + year/400)%7;
 217   2        }
 218   1         return weak;
 219   1      }
 220          //把RTC读取并处理，写到DGUS对应的变量空间，主程序中每0.5秒调用一次
 221          void Read_Time()
 222          { 
 223   1                  uint8_t i,N,M; 
 224   1                  uint8_t Rtcdata[]={0,0,0,0,0,0,0,0};
 225   1                  Rx8130_Start();
 226   1                  Rx8130_Writ_Byte(0x64);
 227   1                  Rx8130_Writ_Byte(0x10);
 228   1                  Rx8130_Stop();
 229   1                  Rx8130_Start();
 230   1                  Rx8130_Writ_Byte(0x65);
 231   1                  for(i=6;i>0;i--)
 232   1                  { 
 233   2                                Rtcdata[i]=Rx8130_Read_Byte();
 234   2                                Rx8130_Mack();
 235   2                  }
 236   1                  Rtcdata[0]=Rx8130_Read_Byte(); Rx8130_Mnak();
 237   1                  Rx8130_Stop();
 238   1                  for(i=0;i<3;i++)  //年月日转换成HEX
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 5   

 239   1                  { 
 240   2                                N=Rtcdata[i]/16;
 241   2                                M=Rtcdata[i]%16;
 242   2                                Rtcdata[i]=N*10+M;
 243   2                  }
 244   1                  for(i=4;i<7;i++)  //时分秒转换成HEX
 245   1                  { 
 246   2                                N=Rtcdata[i]/16;
 247   2                                M=Rtcdata[i]%16;
 248   2                                Rtcdata[i]=N*10+M;
 249   2                  }
 250   1                  Rtcdata[3]=RTC_Get_Week(Rtcdata[0],Rtcdata[1],Rtcdata[2]);//周            
 251   1                  WriteDGUS(0X0010,Rtcdata,2);
 252   1                  WriteDGUS(0X0011,Rtcdata+2,2);
 253   1                  WriteDGUS(0X0012,Rtcdata+4,2);
 254   1                  WriteDGUS(0X0013,Rtcdata+6,2);
 255   1      }
 256          //====================================================================
 257          void Init_Rtc()
 258          { 
 259   1                   uint8_t i;
 260   1                     Rx8130_Start();
 261   1                   Rx8130_Writ_Byte(0x64);
 262   1                   Rx8130_Writ_Byte(0x1d);
 263   1                   Rx8130_Stop();
 264   1                   Rx8130_Start();
 265   1                   Rx8130_Writ_Byte(0x65);
 266   1                   i=Rx8130_Read_Byte();
 267   1                   Rx8130_Mack();
 268   1                   Rx8130_Read_Byte();
 269   1                   Rx8130_Mnak();
 270   1                   Rx8130_Stop();
 271   1                   if((i&0x02)==0x02)
 272   1                     {  
 273   2                        //重新配置时间
 274   2                        Rx8130_Start();   //30=00
 275   2                        Rx8130_Writ_Byte(0x64);
 276   2                        Rx8130_Writ_Byte(0x30);
 277   2                        Rx8130_Writ_Byte(0x00);
 278   2                        Rx8130_Stop();
 279   2                        Rx8130_Start();   //1C-1F=48 00 40 10
 280   2                        Rx8130_Writ_Byte(0x64);
 281   2                        Rx8130_Writ_Byte(0x1C);
 282   2                        Rx8130_Writ_Byte(0x48);
 283   2                        Rx8130_Writ_Byte(0x00);
 284   2                        Rx8130_Writ_Byte(0x40);
 285   2                        Rx8130_Writ_Byte(0x10);
 286   2                        Rx8130_Stop();
 287   2                        Rx8130_Start();   //10-16=RTC设置值 BCD格式
 288   2                        Rx8130_Writ_Byte(0x64);
 289   2                        Rx8130_Writ_Byte(0x10);
 290   2                        Rx8130_Writ_Byte(0x00); //秒
 291   2                        Rx8130_Writ_Byte(0x00); //分
 292   2                        Rx8130_Writ_Byte(0x00); //时
 293   2                        Rx8130_Writ_Byte(0x01); //星期
 294   2                        Rx8130_Writ_Byte(0x01); //日
 295   2                        Rx8130_Writ_Byte(0x01); //月
 296   2                        Rx8130_Writ_Byte(0x17); //年
 297   2                        Rx8130_Stop();
 298   2                        Rx8130_Start();   //1E-1F 00 10
 299   2                        Rx8130_Writ_Byte(0x64);
 300   2                        Rx8130_Writ_Byte(0x1E);
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 6   

 301   2                        Rx8130_Writ_Byte(0x00); 
 302   2                        Rx8130_Writ_Byte(0x10);     
 303   2                        Rx8130_Stop();
 304   2                     }
 305   1      }
 306          //=========================================
 307          void RTC_Set_Time()
 308          {           
 309   1        
 310   1                //  uint16_t  Va=ReadDGUS(0x009C); //0x5AA5
 311   1                  uint16_t  Va;
 312   1                  uint8_t  zero[2]={0,0};
 313   1                  ReadDGUS(0x009C,(uint8_t *)&Va,2);
 314   1                  if(Va==0x5AA5)
 315   1                  {     
 316   2                        uint8_t N=0,S=0;
 317   2                        bit  Flog=1;
 318   2                        uint8_t TimeS[]={0,0,0,0,0,0,0};
 319   2                        uint16_t  V1;
 320   2                        ReadDGUS(0x009D,(uint8_t *)&V1,2); //年，月
 321   2                        N=(uint8_t)(V1>>8);TimeS[0]=((N/10)*16)+(N%10);
 322   2                        N=(uint8_t)(V1);   TimeS[1]=((N/10)*16)+(N%10);
 323   2                        ReadDGUS(0x009E,(uint8_t *)&V1,2); //日，时
 324   2                        N=(uint8_t)(V1>>8);TimeS[2]=((N/10)*16)+(N%10);
 325   2                        N=(uint8_t)(V1);   TimeS[4]=((N/10)*16)+(N%10);
 326   2                        ReadDGUS(0x009F,(uint8_t *)&V1,2); //分，秒
 327   2                        N=(uint8_t)(V1>>8);TimeS[5]=((N/10)*16)+(N%10);
 328   2                        N=(uint8_t)(V1);   TimeS[6]=((N/10)*16)+(N%10);
 329   2      //                        V1=ReadDGUS(0x00A0); //秒，x  
 330   2      //                        N=(uint8_t)(V1>>8);TimeS[6]=((N/10)*16)+(N%10);
 331   2                        WriteDGUS(0x009c,zero,1); 
 332   2                        while(Flog)
 333   2                        { 
 334   3                                  Rx8130_Start();   //30=00
 335   3                              Rx8130_Writ_Byte(0x64);
 336   3                              Rx8130_Writ_Byte(0x30);
 337   3                              Rx8130_Writ_Byte(0x00);
 338   3                              Rx8130_Stop();
 339   3                              Rx8130_Start();   //1C-1F=48 00 40 10
 340   3                              Rx8130_Writ_Byte(0x64);
 341   3                              Rx8130_Writ_Byte(0x1C);
 342   3                              Rx8130_Writ_Byte(0x48);
 343   3                              Rx8130_Writ_Byte(0x00);
 344   3                              Rx8130_Writ_Byte(0x40);
 345   3                              Rx8130_Writ_Byte(0x10);
 346   3                              Rx8130_Stop();
 347   3                              Rx8130_Start();   //10-16=RTC设置值 BCD格式
 348   3                              Rx8130_Writ_Byte(0x64);
 349   3                              Rx8130_Writ_Byte(0x10);
 350   3                              Rx8130_Writ_Byte(TimeS[6]); //秒
 351   3                              Rx8130_Writ_Byte(TimeS[5]); //分
 352   3                              Rx8130_Writ_Byte(TimeS[4]); //时
 353   3                              Rx8130_Writ_Byte(TimeS[3]); //星期
 354   3                              Rx8130_Writ_Byte(TimeS[2]); //日
 355   3                              Rx8130_Writ_Byte(TimeS[1]); //月
 356   3                              Rx8130_Writ_Byte(TimeS[0]); //年
 357   3                              Rx8130_Stop();
 358   3                              Rx8130_Start();   //1E-1F 00 10
 359   3                              Rx8130_Writ_Byte(0x64);
 360   3                              Rx8130_Writ_Byte(0x1E);
 361   3                              Rx8130_Writ_Byte(0x00); 
 362   3                              Rx8130_Writ_Byte(0x10);     
C51 COMPILER V9.59.0.0   I2C                                                               04/22/2025 11:26:57 PAGE 7   

 363   3                              Rx8130_Stop(); 
 364   3                              Flog=0;
 365   3                         }
 366   2                  }
 367   1      }
 368          //========================================================================================================
             -================================
 369          //**********************SD2058接口程序，SDA 10K上拉到3.3V**************
 370            
 371          
 372          
 373          
 374          #endif
 375          
 376               
 377          //========================================================================================================
             -================================
 378          
 379          //    bit s=0;
 380          //  uint8_t flag_rtc_init[8]={0};
 381          //    uint8_t flag_rtc_in[6]={0};
 382            
 383              
 384              
 385          void Clock()
 386          {
 387   1              // if(RTC_Flog==0){ RTC_Flog=1;  Init_Rtc();}
 388   1                     if(SysTick_RTC >= 500) 
 389   1                     {
 390   2                          Read_Time();                //更新硬件RTC时间
 391   2                          SysTick_RTC = 0;   
 392   2                     }
 393   1                      //RTC_Set_Time();    
 394   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2358    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =      7      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
