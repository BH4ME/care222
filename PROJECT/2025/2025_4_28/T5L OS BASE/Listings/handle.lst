C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HANDLE
OBJECT MODULE PLACED IN .\Objects\handle.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\handle.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sour
                    -ces;.\APP;.\PAGE) DEBUG PRINT(.\Listings\handle.lst) TABS(2) OBJECT(.\Objects\handle.obj)

line level    source

   1          /******************************************************************************
   2          * 文 件 名   : handle.c
   3          * 版 本 号   : V1.0
   4          * 作    者   : pinot
   5          * 生成日期   : 2019年11月27日
   6          * 功能描述   : 逻辑处理
   7          * 修改历史   :
   8          * 日    期   :
   9          * 作    者   :
  10          * 修改内容   :
  11          ******************************************************************************/
  12          
  13          /*****************************************************************************
  14          自定义头文件*/
  15          #include "handle.h"
  16          #include  "i2c.h"
  17          #include "home.h"
  18          
  19          #include "qrj.h"
  20          /*****************************************************************************
  21          全局变量*/
  22          //内部RAM
  23          uint8_t value0F00[4] = {0};
  24          uint8_t xp_status=0;
  25          
  26          //外部RAM
  27          typedef struct dlt_645_8283
  28          {
  29              uint8_t st_byte1;//帧起始符
  30              uint8_t st_byte2;//帧起始符
  31              uint8_t lenth;//长度
  32              uint8_t func;//类型
  33              uint8_t addr1;//地址
  34              uint8_t addr2;//地址  
  35              uint8_t edata[250];//数据内容
  36          }dl_t_645_8283_body;
  37          dl_t_645_8283_body xdata s_dl_t_645_8283_body={0};
  38          
  39          
  40          
  41          //后期函数封装方便在别的.c文件中访问结构体
  42          u8 get_data1(void) {
  43   1          return s_dl_t_645_8283_body.edata[1]; //低字节
  44   1      }
  45          
  46          
  47          
  48          
  49          #define FRAME_BUFFER_LEN 255
  50          uint8_t xdata frame_buf[FRAME_BUFFER_LEN];//用来存取一帧数据
  51          uint8_t xdata frame_buf1[FRAME_BUFFER_LEN]=0;//用来存取一帧数据
  52          #define DLT_645_LEAST_LEN 7
  53          
  54          
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 2   

  55          //代码空间
  56          uint8_t code CUart2[] = "Uart2Init Done!!!123";
  57          uint8_t code CUart3[] = "Uart3Init Done!!!";
  58          uint8_t code CUart4[] = "Uart4Init Done!!!";
  59          uint8_t code CUart5[] = "Uart5Init Done!!!";
  60          
  61          
  62          //解析到一帧数据可能出现的情况
  63          typedef enum frame_result
  64          {
  65              UNKNOWN,
  66              OK,           //成功找到一帧
  67              UNFINISHED,   //未接收完成
  68              ERROR,        //不满足此协议
  69          }frame_result_t;
  70          
  71          //定义协议类型
  72          typedef enum protocol_type
  73          {
  74              PROTOCOL_UNKNOWN,
  75              PROTOCOL_DL_T_698,
  76              PROTOCOL_DL_T_645,
  77              PROTOCOL_OTHER,
  78          }protocol_type_t;
  79          
  80          #if 1
  81          /*****************************************************************************
  82          控制亮度*/
  83          void SetBlight(uint8_t n)
  84          {
  85   1      //  uint8_t temp[4]={0};
  86   1        WriteDGUS(DHW_LEDCFG,(uint8_t *)&n,sizeof(n));
  87   1      //  do
  88   1      //  {
  89   1      //    DelayMs(5);
  90   1      //    ReadDGUS(DHW_LEDNOW,temp,2);//设置亮度与获取到的亮度不一致
  91   1      //  }while(!(temp[1]==n));
  92   1      }
  93          /*****************************************************************************
  94          控制伴音*/
  95          void SetVoice(int8_t status)
  96          {
  97   1        uint8_t temp[4]={0};
  98   1        ReadDGUS(DHW_SYSCFG,temp,sizeof(temp));
  99   1        temp[0]=0x5A;
 100   1        if(1==status){temp[3]&=0xF7;}
 101   1        else if(2==status){temp[3]|=0x08;}
 102   1        else{return;}
 103   1        WriteDGUS(DHW_SYSCFG,temp,sizeof(temp));
 104   1        do
 105   1        {
 106   2          DelayMs(5);
 107   2          ReadDGUS(DHW_SYSCFG,temp,1);
 108   2        }while(temp[0]!=0);
 109   1      }
 110          
 111          #endif
 112          
 113          
 114          /*****************************************************************************
 115          判断按键值是否有上传*/
 116          int8_t GetValue0F00(void)
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 3   

 117          {
 118   1        uint8_t cleanData[4]={0};
 119   1        ReadDGUS(DHW_0F00,value0F00,sizeof(value0F00));
 120   1        if(0x5A == value0F00[0])
 121   1        {
 122   2          WriteDGUS(DHW_0F00,cleanData,sizeof(cleanData));
 123   2          return 1;
 124   2        }
 125   1        return 0;
 126   1      }
 127          /*****************************************************************************
 128          串口初次打印*/
 129          void InitUartSend(void)
 130          {
 131   1        Uart2SendStr(CUart2,sizeof(CUart2));
 132   1      //  Uart3SendStr(CUart3,sizeof(CUart3));
 133   1      //  Uart4SendStr(CUart4,sizeof(CUart4));
 134   1      //  Uart5SendStr(CUart5,sizeof(CUart5));
 135   1      }
 136          
 137          #if 1
 138          /*****************************************************************************
 139          跳转指定页面*/
 140          void JumpPage(uint16_t pageId)
 141          {
 142   1        uint8_t temp[4]={0x5A,0x01,0,0};
 143   1        temp[2]=(uint8_t)(pageId>>8);
 144   1        temp[3]=pageId;
 145   1        WriteDGUS(DHW_SPAGE,temp,sizeof(temp));
 146   1        do
 147   1        {
 148   2          DelayMs(5);
 149   2          ReadDGUS(DHW_SPAGE,temp,1);
 150   2        }while(temp[0]!=0);
 151   1      }
 152          #endif
 153          
 154          
 155          
 156          
 157          void page_set(uint16_t getDar)
 158          {
 159   1      //u16 char_attend_rtc=0x1300;
 160   1      //        else  if(Page_s[1]==Page_shezhi)
 161   1      //  {
 162   1        
 163   1        
 164   1        
 165   1          switch(CurrentPageNum[1])
 166   1        {
 167   2          case Page_home: 
 168   2          {
 169   3      
 170   3            
 171   3            break;
 172   3          }
 173   2          
 174   2          case Page_qirongjiao:
 175   2          {
 176   3            if(getDar==0x3010)  //按下开始暂停 但不知道是哪个
 177   3            {
 178   4              //QRJ_run();
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 4   

 179   4                if(get_data1()==0x01) //读取数据  开始
 180   4                {
 181   5                  current_st = 0x03;
 182   5                }
 183   4                else if(get_data1()==0x00)  //暂停
 184   4                {
 185   5                  current_st = 0x04;
 186   5                }
 187   4                else current_st = 0x01;
 188   4              
 189   4            }
 190   3            else if(getDar==0x3020) //按下复位建
 191   3            {
 192   4              current_st = 0x06;  //复位
 193   4              //QRJ_Reset();
 194   4            }
 195   3            
 196   3            
 197   3            break;
 198   3          }
 199   2            
 200   2          case Page_zhongxin:
 201   2          {
 202   3            
 203   3      
 204   3            
 205   3            break;
 206   3          }
 207   2          
 208   2          case Page_quyu:
 209   2          {
 210   3            
 211   3      
 212   3            
 213   3            break;
 214   3          }
 215   2          
 216   2              
 217   2          case Page_chengxuhua:
 218   2          {
 219   3      
 220   3            break;
 221   3          }
 222   2          
 223   2              
 224   2          case Page_zhiliao:
 225   2          {
 226   3            break;
 227   3          }
 228   2          
 229   2              
 230   2          case Page_shoudong:
 231   2          {   
 232   3      
 233   3            break;
 234   3          }
 235   2                
 236   2          case Page_lianji:
 237   2          {
 238   3        
 239   3            break;
 240   3          }
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 5   

 241   2          
 242   2              
 243   2          case Page_shezhi:
 244   2          {
 245   3        if(getDar==0x1440 ||  getDar==0x1441) //屏幕亮度
 246   3        {
 247   4            //set_page_write();
 248   4        }
 249   3        else if(getDar==0x1400)   //rtc set finish
 250   3        {
 251   4          RTC_SET_IN(); 
 252   4        }
 253   3        else if(getDar==0x1410)   //治疗预设写入 flash
 254   3        {
 255   4          //zhiliao_SET();
 256   4        }
 257   3        else if(getDar==0x1420)   //开机自动启动 
 258   3        {
 259   4          //Sudoopen_set_handle();
 260   4        }
 261   3        else if(getDar==0x1430)         //恢复出厂设置
 262   3        {
 263   4         //reset_data();
 264   4        }
 265   3            break;
 266   3          }
 267   2          
 268   2          case Page_chengxuhua_JUMP:
 269   2          {
 270   3            
 271   3            break;
 272   3          }
 273   2              
 274   2            case Page_zhiliao_JUMP:
 275   2          {
 276   3            break;
 277   3          }
 278   2          default:
 279   2          {
 280   3            
 281   3            break;
 282   3          }
 283   2          
 284   2        }
 285   1        
 286   1      
 287   1        
 288   1        
 289   1        
 290   1        
 291   1      }
 292            
 293            
 294          /*****************************************************************************
 295          按键按压之后处理流程*/
 296          void TouchHandle(void)
 297          {
 298   1        uint8_t temp[16]={0};
 299   1        uint16_t flag=0;
 300   1        uint16_t iconid=0;
 301   1        uint16_t getDar=0;
 302   1        getDar = value0F00[1]<<8|value0F00[2];
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 6   

 303   1        LOG((uint8_t *)&getDar,sizeof(getDar));
 304   1        
 305   1        s_dl_t_645_8283_body.st_byte1=0x5A;
 306   1        s_dl_t_645_8283_body.st_byte2=0xA5;
 307   1        s_dl_t_645_8283_body.lenth=value0F00[3]*2+3;  
 308   1        s_dl_t_645_8283_body.func=0x83; 
 309   1        s_dl_t_645_8283_body.addr1=value0F00[1];
 310   1        s_dl_t_645_8283_body.addr2=value0F00[2];
 311   1        ReadDGUS(getDar,(uint8_t *)&s_dl_t_645_8283_body.edata[0],value0F00[3]*2);  //edata[0] edata[1]读取16bit
 312   1        
 313   1        
 314   1        page_set(getDar);
 315   1        
 316   1        
 317   1        
 318   1        
 319   1      //  Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 320   1      
 321   1      //  switch(getDar)
 322   1      //  {
 323   1      //    default:
 324   1      //    break;
 325   1      //  }
 326   1      }
 327          
 328          /*****************************************************************************
 329          功能：回传数据*/
 330          void dlt645_handle(void)
 331          {
 332   1        uint16_t ADDR=0;
 333   1      
 334   1        ADDR = ((uint16_t)(s_dl_t_645_8283_body.addr1))<<8 | s_dl_t_645_8283_body.addr2;
 335   1      
 336   1        if(s_dl_t_645_8283_body.func == 0x82)
 337   1        {
 338   2          WriteDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata),s_dl_t_645_8283_body.lenth-3);
 339   2          s_dl_t_645_8283_body.lenth=3;
 340   2          s_dl_t_645_8283_body.addr1=0x4F;
 341   2          s_dl_t_645_8283_body.addr2=0x4B;
 342   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 343   2        }
 344   1        else if(s_dl_t_645_8283_body.func == 0x83)
 345   1        {
 346   2          ReadDGUS(ADDR,(uint8_t *)&(s_dl_t_645_8283_body.edata[1]),s_dl_t_645_8283_body.edata[0]*2);
 347   2          s_dl_t_645_8283_body.lenth+=s_dl_t_645_8283_body.edata[0]*2;
 348   2          Uart2SendStr((uint8_t *)&s_dl_t_645_8283_body,s_dl_t_645_8283_body.lenth+3);
 349   2        }
 350   1        
 351   1      }
 352          /*****************************************************************************
 353          功能:检索一帧数据将值赋给结构体*/
 354          uint8_t parse_dlt645_frame(uint8_t *p_frame, uint16_t frame_len, uint8_t* sframe_body)
 355          {
 356   1          uint16_t temp16_t = 0;//一帧数据的总长度
 357   1          uint16_t i = 0;
 358   1      
 359   1          if(1){
 360   2              memcpy(sframe_body,p_frame, frame_len);
 361   2              return 1;
 362   2          }
 363   1         // return 0;     //上面if(1)永远都成立，执行不到这一行
 364   1      } 
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 7   

 365          /*****************************************************************************
 366          功能:从缓存区buf中检索dlt645帧数据*/
 367          /*
 368           * 将一帧数据读取到frame_buf中     
 369           * line:缓存区0x7F开头的数据
 370           * out:将捡出来的帧复制到该数组中
 371           * frame_len:捡出来的帧的长度，
 372           * line_len:缓存区buf中0x7F开头的数据长度
 373           **/
 374          frame_result_t find_dlt645_frame(uint8_t* line, uint8_t* out, uint16_t* frame_len, uint16_t line_len) {
 375   1          uint16_t frame_length = 0;//一帧数据的总长度
 376   1          uint16_t temp_len = 0;
 377   1      
 378   1          if (line_len < DLT_645_LEAST_LEN) {
 379   2              return UNFINISHED;
 380   2          }
 381   1          //判断第0位
 382   1          if (line[0] != 0x5A) {  
 383   2              return ERROR;
 384   2          }
 385   1          if (line[1] != 0xA5) {  
 386   2              return ERROR;
 387   2          }   
 388   1          frame_length = line[2]+3;
 389   1          
 390   1          if (frame_length <= line_len) {
 391   2                  //检到一帧数据                
 392   2                  for (temp_len = 0; temp_len < frame_length; temp_len ++) {
 393   3                      out[temp_len] = *line;
 394   3                      line++;
 395   3                  }
 396   2                  *frame_len = frame_length;
 397   2                  return OK;
 398   2          } else {
 399   2              //数据还没接收完整
 400   2              return UNFINISHED;
 401   2          }
 402   1      }
 403          
 404          /*****************************************************************************
 405          功能:协议数据解析*/
 406          void ParseBuffer(void)
 407          {
 408   1          uint16_t frame_length = 0;//一帧数据的总长度
 409   1          uint16_t i = 0, temp_len = 0;
 410   1          uint8_t has_content = 0;//buf中是否有数据
 411   1          uint8_t frame_error = 0;//缓存区当前的数据对所有协议都不满足
 412   1          uint8_t*  p_buf= Uart2_Rx;
 413   1          protocol_type_t protl_type = PROTOCOL_UNKNOWN;
 414   1          frame_result_t find_frame_re = UNKNOWN;
 415   1      
 416   1          //用来保存每个协议解析后的结果 
 417   1          //frame_results[0] 保存PROTOCOL_DL_T_645协议解析结果
 418   1          //frame_results[1] 保存PROTOCOL_DL_T_698协议解析结果
 419   1          frame_result_t frame_results[2] = {UNKNOWN, UNKNOWN}; 
 420   1      
 421   1          has_content = uart2_rx_count > 2;
 422   1          while (has_content) {
 423   2              p_buf = Uart2_Rx;
 424   2              //检索0x5A开头的数据
 425   2              while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 426   3                  p_buf ++;
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 8   

 427   3              }
 428   2              if (p_buf == Uart2_Rx + uart2_rx_count) {
 429   3                  //检索当前包数据，都不包含，清空
 430   3                  uart2_rx_count = 0;
 431   3                  break;
 432   3              }
 433   2              //Uart4_Rx中剩余的数据长度
 434   2              temp_len = uart2_rx_count - (p_buf - Uart2_Rx);
 435   2      
 436   2              //以下处理不包含校验
 437   2              switch(protl_type) {
 438   3                  case PROTOCOL_UNKNOWN:
 439   3                      memset(frame_buf,0,sizeof(frame_buf));
 440   3                      find_frame_re = UNKNOWN;
 441   3                      frame_error = 0;
 442   3                      frame_length = 0;
 443   3                      for (i = 0; i < 3; i ++) {
 444   4                          frame_results[i] = UNKNOWN;
 445   4                      }
 446   3                      
 447   3                  case PROTOCOL_DL_T_645:
 448   3                      find_frame_re = find_dlt645_frame(p_buf, frame_buf, &frame_length, temp_len);
 449   3      
 450   3                      frame_results[0] = find_frame_re;
 451   3                      if (find_frame_re == OK) {
 452   4                            if (parse_dlt645_frame(frame_buf, frame_length, (uint8_t *)&s_dl_t_645_8283_body)) {
 453   5                                //解析到一包有效数据
 454   5                              dlt645_handle();
 455   5                              memset(&s_dl_t_645_8283_body, 0, sizeof(dl_t_645_8283_body));
 456   5                            }
 457   4                            break;
 458   4                      }
 459   3      
 460   3                  case PROTOCOL_OTHER:
 461   3                      //此处添加其他协议解析
 462   3                      //break;
 463   3                      
 464   3                  default :
 465   3                      if (frame_results[0] == ERROR ) {
 466   4                          //缓存区的数据不满足现有协议的解析
 467   4                          //继续找下一个0x7F起始符
 468   4                          p_buf ++;//跳过当前的0x7F
 469   4                          //检索0x7F开头的数据
 470   4                          while (*p_buf != 0x5A && p_buf < Uart2_Rx + uart2_rx_count) {
 471   5                              p_buf ++;
 472   5                          }
 473   4                          
 474   4                          if (p_buf == Uart2_Rx + uart2_rx_count) {
 475   5                              //检索当前包数据，都不包含，清空
 476   5                              uart2_rx_count = 0;
 477   5                              break;
 478   5                          }
 479   4      
 480   4                          //找到下一条0x5A开头的数据帧
 481   4                          frame_error = 1;
 482   4                      }
 483   3                      break;
 484   3              }
 485   2      
 486   2              //当成功检索到一帧数据或缓存区的数据不满足现有协议的解析
 487   2              //buf中剩余的有效数据前移
 488   2              if (find_frame_re == OK || frame_error) {
C51 COMPILER V9.59.0.0   HANDLE                                                            04/28/2025 19:11:40 PAGE 9   

 489   3                  //uart_rcvd_buf剩余的数据长度
 490   3                  temp_len = uart2_rx_count - (p_buf - Uart2_Rx) - frame_length;
 491   3                  if (temp_len > 0) {
 492   4                      //当前uart_rcvd_buf中剩余的数据前移
 493   4                      for (i = 0; i < temp_len; i ++) {
 494   5                          Uart2_Rx[i] = *(p_buf + frame_length + i);
 495   5                          *(p_buf + frame_length + i) = 0x00;
 496   5                      }
 497   4                      has_content = 1;//继续循环解析
 498   4                  } else {
 499   4                      //解析过的位清空
 500   4                      for (i = 0; i < (p_buf - Uart2_Rx) + frame_length; i ++) {
 501   5                          Uart2_Rx[i] = 0x00;
 502   5                      }
 503   4                      has_content = 0;
 504   4                  }
 505   3                  uart2_rx_count = temp_len;
 506   3              } else {
 507   3                  has_content = 0;
 508   3              }
 509   2          }
 510   1      }
 511          
 512          
 513          /*****************************************************************************
 514          主流程*/
 515          void HandleProc(void)
 516          {
 517   1          if(GetValue0F00())    //检测是否有触摸上传数据
 518   1          {
 519   2            TouchHandle();
 520   2          }
 521   1          ParseBuffer();
 522   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1981    ----
   CONSTANT SIZE    =    105    ----
   XDATA SIZE       =    771      82
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
