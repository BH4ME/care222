C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SYS_PARAMS
OBJECT MODULE PLACED IN .\Objects\sys_params.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE Sources\sys_params.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRI
                    -NT(.\Listings\sys_params.lst) TABS(2) OBJECT(.\Objects\sys_params.obj)

line level    source

   1          #include "sys_params.h"
   2          #include "norflash.h"
   3          #include <string.h>
   4          #include "uart.h"
   5          #include <stdio.h>
   6          #include <stdlib.h>
   7          #include "cmd.h"
   8          #include "uart4.h"
   9          #include "handle.h"
  10          #include "mode_4.h"
  11          #include "T5LUart4.h"
  12          /*****************************************************************
  13          先写数据位再写时间
  14          
  15          
  16          *******************************************************************/
  17          
  18          u16 Adress_Change_0;
  19          u16 Nor_Adress[2];
  20          
  21          void norflash_check_Adress(void)
  22          {
  23   1        EA=0;
  24   1        if(Adress_Change_0>=0x4000  ||  Adress_Change_0<=0x28)
  25   1        {
  26   2          Adress_Change_0=0x28;
  27   2        }
  28   1        EA=1;
  29   1        
  30   1      }
  31          /************************************************读取norflah 0x00中地址*******************************/
  32          void Init_Adress(void)
  33          {
  34   1        uint8_t Close[8]={0xAA,0,0,0,0,0,0,0xff};
  35   1          uint8_t Open[8]={0xAA,0,0,0,0,0,0,0xBB};
  36   1        
  37   1          
  38   1        uchar dat[64]={0};
  39   1        u16 p_set[2]={0};
  40   1      //  uchar dat_txst_1[4]={0x4,0x2,0,0};
  41   1        //uchar dat_txst[4]={0x0,0x20,0,0};
  42   1        EA=0;
  43   1        
  44   1        
  45   1      set_shoudong_Init();
  46   1      set_zhiliao_Init();
  47   1        
  48   1            ReadNorFlash_Str(Nor_P_set,(uint8_t *)&(p_set),2);  
  49   1            dynamic_static_flag=p_set[0];
  50   1            WriteDGUS(0x1280, (uint8_t *)&dynamic_static_flag,sizeof(dynamic_static_flag));   //功率自适应
  51   1      
  52   1          
  53   1          
  54   1        ReadNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2);
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 2   

  55   1        Adress_Change_0=Nor_Adress[1];    /****读取上个norflash地址*****/
  56   1        DelayMs(5);
  57   1        if(Adress_Change_0<=0x28||Adress_Change_0>=0x4000)
  58   1        {
  59   2          Adress_Change_0=0x28;Nor_Adress[0]=0x00;Nor_Adress[1]=0x28;
  60   2          WriteNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2); 
  61   2          DelayMs(5);
  62   2        }
  63   1      
  64   1        
  65   1        ReadNorFlash_Dgus(Nor_Guanji_Adress,Dgus_Buff_Reserve,4);   /***读取上一次关机的时间****/
  66   1        DelayMs(5);
  67   1        WriteNorFlash_Str((Adress_Change_0),(uint8_t*)&Close,4);/***写入flash关机校验码****/
  68   1        DelayMs(5);
  69   1        Adress_Change_0=0x4+Adress_Change_0;  norflash_check_Adress();
  70   1        WriteNorFlash_Dgus(Adress_Change_0,Dgus_Buff_Reserve,4);/***写入上次关机的时间***/
  71   1        DelayMs(5);
  72   1        Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();
  73   1          //
  74   1      
  75   1        //printf("%d\n",Adress);
  76   1        WriteNorFlash_Str(Adress_Change_0,(uint8_t*)&Open,4);   /****写入本次开机的校验码*****/
  77   1        DelayMs(5);
  78   1        Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();
  79   1        WriteNorFlash_Dgus(Adress_Change_0,RTC_Adress,4);         /***写入本次开机的时间****/
  80   1        DelayMs(5);
  81   1        Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();
  82   1      Nor_Adress[0]=0x00;Nor_Adress[1]=Adress_Change_0;
  83   1        WriteNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2);   /******更新地址位*******/
  84   1        DelayMs(5);
  85   1        
  86   1        EA=1;
  87   1      }
  88          /*********************************************************************************************************
             -/
  89          
  90          
  91          
  92          void norflash_Write_Open_UV(void)
  93          {
  94   1        uint8_t bianliang_Write[8]={0};
  95   1        uint8_t T[2];
  96   1      
  97   1        EA=0;
  98   1      
  99   1          T[0]=T_XIANSHI>>8;
 100   1          T[1]=T_XIANSHI&0x00ff;
 101   1      
 102   1      
 103   1        bianliang_Write[0]=0xAA;
 104   1        bianliang_Write[1]=Page_s[1];
 105   1      
 106   1        bianliang_Write[7]=0xCC;    /*****0x02开启*****/  
 107   1      
 108   1        WriteNorFlash_Str(Adress_Change_0,(uint8_t*)&bianliang_Write,4);
 109   1        Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();
 110   1        WriteNorFlash_Dgus(Adress_Change_0,RTC_Adress,4);
 111   1        Adress_Change_0=Adress_Change_0+0x4;norflash_check_Adress();  
 112   1        Nor_Adress[0]=0x00;Nor_Adress[1]=Adress_Change_0;
 113   1        WriteNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2);
 114   1        
 115   1      
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 3   

 116   1      
 117   1      EA=1; 
 118   1        
 119   1        
 120   1      }
 121          
 122          void norflash_Write_Stop_UV(void)
 123          {
 124   1            uint8_t bianliang_Write[8]={0};
 125   1      
 126   1        EA=0;
 127   1      
 128   1            bianliang_Write[0]=0xAA;
 129   1            bianliang_Write[1]=Page_s[1];
 130   1      
 131   1            bianliang_Write[7]=0xDD;      /*******0x04暂停******/
 132   1      
 133   1              
 134   1              
 135   1            WriteNorFlash_Str(Adress_Change_0,(uint8_t*)&bianliang_Write,4);
 136   1            Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();        
 137   1            WriteNorFlash_Dgus(Adress_Change_0,RTC_Adress,4);
 138   1            Adress_Change_0=Adress_Change_0+0x4;norflash_check_Adress();
 139   1              
 140   1      
 141   1        Nor_Adress[0]=0x00;Nor_Adress[1]=Adress_Change_0;
 142   1            WriteNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2);
 143   1      
 144   1      EA=1; 
 145   1      
 146   1        
 147   1      }
 148          
 149          
 150          void norflash_Write_Close_UV(void)
 151          {
 152   1            uint8_t bianliang_Write[8]={0};
 153   1      
 154   1        EA=0;
 155   1      
 156   1            bianliang_Write[0]=0xAA;
 157   1            bianliang_Write[1]=0x00;
 158   1            bianliang_Write[2]=0x00;
 159   1            bianliang_Write[3]=0x00;
 160   1            bianliang_Write[4]=0x00;
 161   1            bianliang_Write[5]=0x00;
 162   1            bianliang_Write[6]=0x00;
 163   1            bianliang_Write[7]=0xEE;      /*******0x08关闭******/
 164   1      
 165   1              
 166   1            WriteNorFlash_Str(Adress_Change_0,(uint8_t*)&bianliang_Write,4);
 167   1            Adress_Change_0=Adress_Change_0+0x4;  norflash_check_Adress();        
 168   1              
 169   1            WriteNorFlash_Dgus(Adress_Change_0,RTC_Adress,4);
 170   1            Adress_Change_0=Adress_Change_0+0x4;norflash_check_Adress();
 171   1              
 172   1        Nor_Adress[0]=0x00;Nor_Adress[1]=Adress_Change_0;
 173   1            WriteNorFlash_Str(Nor_Next_Adress,(uint8_t*)&Nor_Adress,2);
 174   1            
 175   1      
 176   1      EA=1; 
 177   1        
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 4   

 178   1        
 179   1      }
 180          
 181          
 182          void norflash_Write_guanji(void)      /******5s一循环******/
 183          {
 184   1        
 185   1        
 186   1        EA=0;
 187   1      
 188   1        
 189   1        
 190   1        WriteNorFlash_Dgus(Nor_Guanji_Adress,RTC_Adress,4);
 191   1      
 192   1        EA=1;
 193   1      }
 194          
 195          
 196          
 197          
 198          void Uart4_Open(void)
 199          {
 200   1        u8 flag=1;
 201   1      
 202   1        DelayMs(5);
 203   1        Uart4Init();
 204   1        printf("connect");
 205   1        
 206   1            DelayMs(5);
 207   1          printf("\n\n\n\r  串口已连接 命令如下： \n\n\n\n");   DelayMs(5);
 208   1        printf("\n\r    1)UV TEST   说明：测试串口       \n\n\n\n");
 209   1                  DelayMs(5);   printf("\n\r    2)UV READ   说明：读取FlashROM（0x28~0x4000）    \n\n\n\n");
 210   1                  DelayMs(5);   printf("\n\r    3)UV CLEAN    说明：Clean Flash Rom       \n\n\n\n");
 211   1      //  printf("    （0x28）       \n\n\n\n");
 212   1                  DelayMs(5);   printf("\n\r    4)UV ADRESS   说明：查看当前写入地址       \n\n\n\n");
 213   1              DelayMs(5);   printf("\n\r    注意事项：每次法指令需要加回车或换行（\\r\\n）       \n\n\n\n");
 214   1        while(flag)
 215   1        {
 216   2          DelayMs(5);
 217   2          //printf("\n接收指令");
 218   2          DelayMs(5); //printf("\n  test  %bx",0x000005);printf("\n test  %bx",0x123456);
 219   2                if( rec_ok )
 220   2              {
 221   3                  rec_ok = 0;
 222   3                  uartRecCnt = 0;
 223   3                //  printf("1111");
 224   3                  match_cmd( uartRecStr );
 225   3                  memset( uartRecStr, 0, sizeof( uartRecStr ) );    //清空备份数组 需要添加头文件 string.h
 226   3              } 
 227   2          
 228   2              ReadDGUS(0x4600,(uint8_t *)&uart4_open_buff,sizeof(uart4_open_buff));
 229   2              if(uart4_open_buff[1]==0)
 230   2              {
 231   3                printf("exit");   
 232   3                Unlock_current_page();
 233   3                flag=0;
 234   3              }
 235   2      
 236   2        }
 237   1        
 238   1          
 239   1        
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 5   

 240   1        
 241   1        
 242   1        
 243   1      
 244   1        ES0=0;ET0=1;ET1=1;ES3R=1;ES3T=1;ET2=1;
 245   1      
 246   1        EA=1;
 247   1        
 248   1      }
 249          
 250          /****************************屏幕亮度初始化*******************
 251          屏幕正常亮度、待机亮度、待机时间
 252          ***************************************************************/
 253          u8 Screen_Light[4];
 254          //0中是屏幕亮度 1待机亮度 2-3时间 min
 255          
 256          
 257          u8 Screen_Touch_flag=0; //0表示当前是正常状态 1表示已经息屏
 258          u16 Screen_set_Time_min;
 259          
 260          void Screen_Init()    //初始化
 261          {
 262   1        ReadNorFlash_Str(Nor_set_light_Ad,(uint8_t*)&Screen_Light,2);
 263   1        WriteDGUS(0x82,(uint8_t *)&Screen_Light,sizeof(Screen_Light));  
 264   1        WriteDGUS(0x1440,(uint8_t *)&Screen_Light,sizeof(Screen_Light));  
 265   1        Screen_set_Time_min=Screen_Light[2]<<8|Screen_Light[3]; 
 266   1      }
 267          
 268          /***********************用户写入时间****************/
 269          void set_page_write() //handl set界面摁下才执行
 270          {
 271   1        ReadDGUS(0x1440,(uint8_t *)&Screen_Light,sizeof(Screen_Light));
 272   1        WriteDGUS(0x82,(uint8_t *)&Screen_Light,sizeof(Screen_Light));
 273   1        WriteNorFlash_Str(Nor_set_light_Ad,(uint8_t*)&Screen_Light,2);
 274   1        Screen_set_Time_min=Screen_Light[2]<<8|Screen_Light[3];
 275   1      }
 276          
 277          void Screen_review()  //主函数检测息屏时间是否到达
 278          {
 279   1        static u8 flag;
 280   1        static u8 clean=0xf0;
 281   1        ReadDGUS(0x16,(uint8_t *)&flag,sizeof(flag));
 282   1        if(flag==0x5a &&  Screen_Touch_flag==0)
 283   1        {
 284   2          WriteDGUS(0x16,(uint8_t *)&clean,sizeof(clean));  
 285   2          Screen_Time_500ms=0;
 286   2        }
 287   1        else if(Screen_Time_500ms>=(Screen_set_Time_min*120)  && Screen_Touch_flag==0)  //要息屏
 288   1        {
 289   2          Screen_Touch_flag=1;
 290   2          WriteDGUS(0x82,(uint8_t *)&Screen_Light[1],sizeof(Screen_Light[1]));    
 291   2        }
 292   1        else if(Screen_Touch_flag==1  &&  flag==0x5a) //息屏后触摸
 293   1        {
 294   2          WriteDGUS(0x82,(uint8_t *)&Screen_Light,sizeof(Screen_Light));
 295   2          Screen_Touch_flag=0;
 296   2          Screen_Time_500ms=0;    
 297   2        }
 298   1        
 299   1      }
 300          
 301          
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 6   

 302          /**************************开机自动启动*************************
 303          _ _ _ =最大0x0f ff 每次取4bit,例：510 开机自动进入治疗模式并且自动选择皮肤面照射 但不自动进行
 304          
 305          bit2 [0,7]  页面
 306          bit1 [1,4]  进入当前页面的模式
 307          bit0 [0,1]  0不自动进行，1自动进行
 308          ***************************************************************/
 309           u8 sudo_buff[4];
 310          
 311            
 312          static struct{
 313            u8 Head_sudo;
 314            u8 page;
 315            u8 mode;
 316            u8 status;
 317          }sudoopen_set_nor;
 318          void open_sudo_Init()   //开机初始化
 319          {
 320   1        u16 buff_user[4];
 321   1        //static
 322   1      
 323   1        ReadNorFlash_Dgus(Nor_set_sudoopen_initial_Ad,0x1325,2);    
 324   1        ReadNorFlash_Str(Nor_set_sudoopen_Ad,(uint8_t*)&sudo_buff,2); 
 325   1        //WriteDGUS(0x3220,(uint8_t *)&sudo_buff,sizeof(sudo_buff));
 326   1          if(sudo_buff[0]==0xf5)  
 327   1        {
 328   2          
 329   2        //  JumpPage((u16 *)&sudo_buff[1]);
 330   2          switch(sudo_buff[1])
 331   2          {
 332   3            case 0:{JumpPage(Page_home);  break;}
 333   3            
 334   3            case 1:{JumpPage(Page_qirongjiao);  break;  }
 335   3              
 336   3            case 2: {JumpPage(Page_zhongxin); break;}
 337   3            
 338   3            case 3: {JumpPage(Page_quyu); break;}
 339   3      
 340   3            case 4: {JumpPage(Page_chengxuhua); break;}
 341   3      
 342   3            case 5: {JumpPage(Page_zhiliao);    
 343   4            if(sudo_buff[2]==1)
 344   4            {
 345   5              ReadNorFlash_Str(Nor_zhiliao_user_Ad,(uint8_t*)&buff_user,4); 
 346   5              if(buff_user[0]==0xf6)
 347   5              { 
 348   6                WriteDGUS(0x2400, (uint8_t *)&buff_user[1],sizeof(buff_user[1])); 
 349   6                WriteDGUS(0x2410, (uint8_t *)&buff_user[2],sizeof(buff_user[2])); 
 350   6                WriteDGUS(0x2420, (uint8_t *)&buff_user[3],sizeof(buff_user[3]));   
 351   6              }
 352   5              
 353   5            }
 354   4            else if(sudo_buff[2]==2){Analog_click(0x01f4,0x0064);}
 355   4                  else if(sudo_buff[2]==3){Analog_click(0X01f4,0X008c);}
 356   4                        else if(sudo_buff[2]==4){Analog_click(0X01F4,0X00B1);}
 357   4                      
 358   4              //DelayMs(500);
 359   4            //if(sudo_buff[3]){Analog_click(0x02ad,0x0082);}
 360   4                        break;}
 361   3      
 362   3            case 6: {JumpPage(Page_shoudong); break;}
 363   3      
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 7   

 364   3            case 7: {JumpPage(Page_lianji); break;}
 365   3              
 366   3            default : {break;}
 367   3          } 
 368   2      //    
 369   2      //  //  if(sudo_buff[1]!=5)
 370   2      //        set_zhiliao_Init();
 371   2      
 372   2        }
 373   1        else JumpPage(Page_home);
 374   1        
 375   1      }
 376          
 377          
 378          
 379          void Sudoopen_set_handle()    //set界面按下处理函数 自动启动
 380          {
 381   1        u8 read_buff[2];
 382   1        u16 concordance;
 383   1        ReadDGUS(0x1325,(uint8_t *)&read_buff,sizeof(read_buff));
 384   1        {   
 385   2          concordance=(u16)(read_buff[0])<<8  | (u16)(read_buff[1]);  
 386   2          sudoopen_set_nor.Head_sudo=0xf5;
 387   2          sudoopen_set_nor.status=concordance%10;
 388   2          sudoopen_set_nor.mode=(concordance/10)%10;
 389   2          sudoopen_set_nor.page=(concordance/100)%10;
 390   2          WriteNorFlash_Str(Nor_set_sudoopen_Ad,(uint8_t*)&sudoopen_set_nor,2); 
 391   2          WriteNorFlash_Dgus(Nor_set_sudoopen_initial_Ad,0x1325,2);   
 392   2      
 393   2          //  WriteDGUS(0x3210,(uint8_t *)&read_buff,sizeof(read_buff));
 394   2        }
 395   1        
 396   1        
 397   1      }
 398          void sudo_click_start()
 399          {
 400   1        if(sudo_buff[3])Analog_click(0x02ad,0x0082);
 401   1      }
 402          /****************联机界面 从Norflash中读取数据 然后写入到指定的Dgus地址*********************
 403          Dgus:地址分配 0x1601~0x1603 作为时间地址HEX显示 0x1604作为数据地址 ASCII文本显示
 404                以此往后类推 0x1611~0x1613 0x1614 多保留字节0x1600以防其他用途
 405          
 406          Norflash:地址分配 先读取Nor_Next_Adress 0x0 地址判断当前写到的地址每次往前退0x8。时间在后占用4四个字，
 407                内容在前占用4个字（高字节0XAA作为头帧，低字节：开机0xcc 暂停0xdd 复位0xee 关机0xdd）
 408          
 409          运算规则：先读取next_adress查看当前地址是否有数据，有的话就说明现在已经进行覆盖了，读取-0x8地址如果小于0x2
             -8并且已经覆盖
 410                    则读取0x2000，如果没有覆盖则跳出循环，将最近一次的操作记录为1号以此类推
 411          *********************************************************************************************/
 412          
 413          #define Status_turn_on 0xbfaabbfa //开机
 414          #define Status_turn_off 0xb9d8bbfa  //关机
 415          #define Status_open_uv 0xbfaac6f4 //开启
 416          #define UV_ziwai 0xD7CFCDE2   //紫外
 417          #define UV_xiandeng 0xCFDFB5C6  //线灯
 418          #define Status_close_uv 0xB8B4CEBB  //复位
 419          #define Status_stop_uv 0xD4DDCDA3 //暂停
 420          
 421          #define open_qrj_0 0xC6F8C8DC
 422          #define open_qrj_1 0xBDBAC4A3
 423          #define open_qrj_2 0xCABDffff
 424          
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 8   

 425          #define open_zx_0 0xD6D0D0C4
 426          #define open_zx_1 0xC4A3CABD
 427          
 428          #define open_qy_0 0xC7F8D3F2
 429          #define open_qy_1 0xC4A3CABD
 430          
 431          #define open_cxh_0 0xB3CCD0F2
 432          #define open_cxh_1 0xBBAFC4A3
 433          #define open_cxh_2 0xCABDffff
 434          
 435          #define open_zl_0 0xD6CEC1C6
 436          #define open_zl_1 0xC4A3CABD
 437          
 438          #define open_sd_0 0xCAD6B6Af
 439          #define open_sd_1 0xC4A3CABD
 440          
 441          
 442          
 443          static struct{
 444            u8 Y;
 445            u8 M;//固定为0x00
 446            u8 D;
 447            u8 H;
 448            u8 Min;
 449            u8 Sec;
 450          //  {
 451            
 452            u32 Status;
 453            u32 Status_0;
 454              u32 Status_1;
 455              u32 Status_2;
 456            //u16 mode; 
 457            //}Content[5];
 458            u16 end;
 459          }Link_Norflash;
 460          
 461          void lianji_run() //检测在联机界面 此函数只运行一次 
 462          {
 463   1        u8 buff_nor[16];  //内容+时间
 464   1        u8 i;
 465   1        u16 Adress;
 466   1        EA=0;
 467   1        //u8 check[4];
 468   1        //u8 return_nor=0;  //0表示未覆盖 1表示覆盖了
 469   1        Link_Norflash.end = 0xffff;
 470   1        Adress  = Adress_Change_0;
 471   1        
 472   1      //  ReadNorFlash_Str(Nor_Next_Adress,(uint8_t*)&check,2);
 473   1      //  if(check[0]==0xaa)  //开始覆盖了
 474   1      //  {
 475   1      //    return_nor=1;
 476   1      //  }
 477   1      
 478   1        for(i=0;i<=9;i++)
 479   1        {
 480   2          if(Adress>0x28)
 481   2          { 
 482   3            Adress=Adress-0x8;
 483   3          }
 484   2          else break;
 485   2      //    else if(return_nor==1)
 486   2      //    {
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 9   

 487   2      //      Adress=0x2000;
 488   2      //    }
 489   2      //    else break;
 490   2      
 491   2          ReadNorFlash_Str(Adress,(uint8_t*)&buff_nor,8); 
 492   2          if(buff_nor[0]==0xaa)   //有数据
 493   2          {
 494   3            
 495   3              Link_Norflash.Y=buff_nor[8];
 496   3              Link_Norflash.M=buff_nor[9];
 497   3              Link_Norflash.D=buff_nor[10];
 498   3              Link_Norflash.H=buff_nor[12];
 499   3              Link_Norflash.Min=buff_nor[13];
 500   3              Link_Norflash.Sec=buff_nor[14];
 501   3              
 502   3                  if(buff_nor[7]==0xff){Link_Norflash.Status=Status_turn_off; Link_Norflash.Status_0=0XFFFFFFFF;}
 503   3            else if(buff_nor[7]==0xbb){Link_Norflash.Status=Status_turn_on;Link_Norflash.Status_0=0XFFFFFFFF;}
 504   3            else if(buff_nor[7]==0xcc)
 505   3              {
 506   4                switch(buff_nor[1])
 507   4                {
 508   5                  case Page_qirongjiao:
 509   5                  {Link_Norflash.Status=Status_open_uv;
 510   6                    Link_Norflash.Status_0=open_qrj_0;
 511   6                    Link_Norflash.Status_1=open_qrj_1;
 512   6                    Link_Norflash.Status_2=open_qrj_2;
 513   6                    break;
 514   6                  }
 515   5                  case Page_zhongxin:
 516   5                  {         Link_Norflash.Status=Status_open_uv;    Link_Norflash.Status_0=open_zx_0; Link_Norflash.Status_1
             -=open_zx_1;Link_Norflash.Status_2=0XFFFFFFFF;break;}
 517   5                    
 518   5                  case Page_quyu:
 519   5                  {         Link_Norflash.Status=Status_open_uv;    Link_Norflash.Status_0=open_qy_0;Link_Norflash.Status_1=
             -open_qy_1;Link_Norflash.Status_2=0XFFFFFFFF;
 520   6                  break;}
 521   5                    
 522   5                  case Page_chengxuhua:
 523   5                  { 
 524   6                    
 525   6                    Link_Norflash.Status=Status_open_uv;
 526   6                    Link_Norflash.Status_0=open_cxh_0;
 527   6                    Link_Norflash.Status_1=open_cxh_1;
 528   6                    Link_Norflash.Status_2=open_cxh_2;
 529   6                  break;}
 530   5                    
 531   5                  case Page_zhiliao:
 532   5                  {           Link_Norflash.Status=Status_open_uv;  Link_Norflash.Status_0=open_zl_0;Link_Norflash.Status_1=
             -open_zl_1;Link_Norflash.Status_2=0XFFFFFFFF;  break;}
 533   5                                case Page_zhiliao_JUMP:
 534   5                  {           Link_Norflash.Status=Status_open_uv;  Link_Norflash.Status_0=open_zl_0;Link_Norflash.Status_1=
             -open_zl_1;Link_Norflash.Status_2=0XFFFFFFFF;  break;}
 535   5                    
 536   5                  case Page_shoudong:
 537   5                  {           Link_Norflash.Status=Status_open_uv;  Link_Norflash.Status_0=open_sd_0;Link_Norflash.Status_1=
             -open_sd_1;  Link_Norflash.Status_2=0XFFFFFFFF;break;}
 538   5                    
 539   5                  case Page_chengxuhua_JUMP:
 540   5                    {       Link_Norflash.Status=Status_open_uv;    Link_Norflash.Status_0=open_cxh_0;
 541   6                    Link_Norflash.Status_1=open_cxh_1;
 542   6                    Link_Norflash.Status_2=open_cxh_2;  break;}
 543   5                      
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 10  

 544   5                    default :
 545   5                    {break;}
 546   5                }
 547   4          //  Link_Norflash.Status=Status_open_uv;
 548   4            }
 549   3            else if(buff_nor[7]==0xee){Link_Norflash.Status=Status_close_uv;Link_Norflash.Status_0=0XFFFFFFFF;}
 550   3            else if(buff_nor[7]==0xdd){Link_Norflash.Status=Status_stop_uv;Link_Norflash.Status_0=0XFFFFFFFF;}
 551   3            
 552   3            WriteDGUS(0x1601+(i*0x10),(uint8_t *)&Link_Norflash,sizeof(Link_Norflash));   
 553   3          }
 554   2        //  else break;
 555   2        }
 556   1        EA=1;
 557   1      }
 558          
 559          //void lianji_Init()
 560          //{
 561          //  
 562          //  //Link_Norflash.Content[0].Status=Status_turn_on;
 563          //  //Link_Norflash.Content[1].Status=Status_turn_on;
 564          //  //Link_Norflash.Content[2].Status=Status_turn_on;
 565          //  //Link_Norflash.Content[3].Status=Status_turn_on;
 566          //  //Link_Norflash.Content[4].Status=Status_turn_on; 
 567          //  
 568          //}
 569          
 570          void reset_data()
 571          {
 572   1        uchar RTC_H[4]={0x01,0x34,0xb0,0x9d}; //2023 03 01
 573   1        u8 RTC_L[4]={0x00,0x01,0x44,0x38};//08:30:00
 574   1        
 575   1        u8 MJ_H[4]={0x00,0x00,0x59,0xf6};//02 30 30
 576   1        u8 MJ_M[4]={0x00,0x00,0xc7,0x42};//05 10 10
 577   1        u8 MJ_L[4]={0x00,0x01,0x88,0x99};//10 05 05
 578   1        
 579   1        u8 read_buff[2]={0};  //000
 580   1        u16 buff_user[4]={0x00f6,0xa,0x5,0x2};//手动 10min 5on 2off
 581   1        
 582   1        u16 buff_zhiliao[4]={0x00f6,0x1,0x5,0x2};//治疗 1mj 5on 2off
 583   1        
 584   1        u16 buff_chengxuhua_0[18]={0x0008,0x0000,0x0009,0x0,0x000a,0x000a,0x0009,0x0,0x000a,0x0,0x000a,0x000a,0x0
             -00a,0x0,0x000b,0x0,0x000a,0x000a};//程序化 
 585   1        u16 buff_chengxuhua_1[17]={0x000e,0x0,0x000f,0x0,0x000a,0x000a,0x000f,0x0,0x0010,0x0,0x000a,0x000a,0x007f
             -,0x007e,0x0041,0x002b,0x0054};//程序化 
 586   1        
 587   1        u16 P_SET[2]={0};
 588   1        Screen_Light[0]=0x64;//100%
 589   1        Screen_Light[1]=0xf;//15%
 590   1        Screen_Light[2]=0x0;//15%
 591   1        Screen_Light[3]=0xf;//15min
 592   1        
 593   1        WriteDGUS(0X1300,(uint8_t *)&RTC_H,sizeof(RTC_H));
 594   1        WriteDGUS(0X1305,(uint8_t *)&RTC_L,sizeof(RTC_L));
 595   1        RTC_SET_IN();
 596   1        
 597   1        WriteDGUS(0X1310,(uint8_t *)&MJ_H,sizeof(MJ_H));
 598   1        WriteDGUS(0X1450,(uint8_t *)&MJ_M,sizeof(MJ_M));
 599   1        WriteDGUS(0X1320,(uint8_t *)&MJ_L,sizeof(MJ_L));
 600   1        zhiliao_SET();
 601   1        
 602   1        WriteDGUS(0x1325,(uint8_t *)&read_buff,sizeof(read_buff));
 603   1        Sudoopen_set_handle();
C51 COMPILER V9.59.0.0   SYS_PARAMS                                                        05/08/2025 12:35:25 PAGE 11  

 604   1        
 605   1        WriteDGUS(0x1440,(uint8_t *)&Screen_Light,sizeof(Screen_Light));  
 606   1        WriteDGUS(0x82,(uint8_t *)&Screen_Light,sizeof(Screen_Light));
 607   1        WriteNorFlash_Str(Nor_set_light_Ad,(uint8_t*)&Screen_Light,2);
 608   1        Screen_set_Time_min=Screen_Light[2]<<8|Screen_Light[3];
 609   1        
 610   1        /******手动**********/
 611   1      
 612   1      
 613   1        
 614   1          WriteDGUS(0x1490, (uint8_t *)&buff_user[1],sizeof(buff_user[1])); 
 615   1          WriteDGUS(0x1495, (uint8_t *)&buff_user[2],sizeof(buff_user[2])); 
 616   1          WriteDGUS(0x1500, (uint8_t *)&buff_user[3],sizeof(buff_user[3])); 
 617   1          
 618   1          WriteNorFlash_Str(Nor_shoudong_user_Ad, (uint8_t *)&buff_user,4); //写入norflash
 619   1          
 620   1          
 621   1          /********治疗**********/
 622   1          WriteDGUS(0x2400, (uint8_t *)&buff_zhiliao[1],sizeof(buff_zhiliao[1]));   //毫焦
 623   1          WriteDGUS(0x2410, (uint8_t *)&buff_zhiliao[2],sizeof(buff_zhiliao[2]));   //脉冲on
 624   1          WriteDGUS(0x2420, (uint8_t *)&buff_zhiliao[3],sizeof(buff_zhiliao[3]));   //脉冲off
 625   1          WriteNorFlash_Str(Nor_zhiliao_user_Ad, (uint8_t *)&buff_zhiliao,4); 
 626   1          
 627   1          
 628   1          /********程序化*******/
 629   1          WriteDGUS(0x2560, (uint8_t *)&buff_chengxuhua_0,sizeof(buff_chengxuhua_0));   //脉冲on
 630   1          WriteDGUS(0x2572, (uint8_t *)&buff_chengxuhua_1,sizeof(buff_chengxuhua_1));   //脉冲off
 631   1          chengxu_Updae();
 632   1          
 633   1          
 634   1          WriteDGUS(0x1280, (uint8_t *)&icon_exit,sizeof(icon_exit));   //功率自适应
 635   1          
 636   1          ReadDGUS(0x1280,(uint8_t *)&(dynamic_static_flag),sizeof(dynamic_static_flag)); 
 637   1          P_SET[0]=dynamic_static_flag;
 638   1          WriteNorFlash_Str(Nor_P_set,(uint8_t *)&(P_SET),2); 
 639   1          
 640   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3339    ----
   CONSTANT SIZE    =    510    ----
   XDATA SIZE       =     47     252
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
