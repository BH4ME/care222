C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE HOME
OBJECT MODULE PLACED IN .\Objects\home.obj
COMPILER INVOKED BY: D:\Keil\Keil_C51\C51\BIN\C51.EXE PAGE\home.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Sources;.
                    -\APP;.\PAGE) DEBUG PRINT(.\Listings\home.lst) TABS(2) OBJECT(.\Objects\home.obj)

line level    source

   1          #include  "home.h"
   2          #include "dgus.h"
   3          #include "qrj.h"
   4          #include "home.h"
   5          
   6          #include <math.h>
   7          
   8          
   9          uint8_t CurrentPageNum[2]={0};  //CurrentPageNum[1]是当前页面
  10          
  11          
  12          float L_M = 0.0;//距离 m
  13          //u16 Time_static_16; //静态的时间由距离得出的
  14          void Prepare_qrj_zx_qy(); //一直运行的 无论哪个状态适用与前三个模式
  15          
  16          /*********************************************************************************
  17          中心模式：求面积和直径  面积是区域模式的四分之一，直径是区域模式的二分之一
  18          区域模式：求面积和直径  
  19          气溶胶模式：求体积
  20          ********************************************************************************/
  21          float Tanx=0.4557;
  22          float pai=3.1415;
  23          float Tan_zhongxin=0.04366094;
  24          float zhongxin_35mm=0.4008159;  //=0.0175m/tan2.5
  25          
  26          float L_m_D_V_S=0.00;       //距离 单位:M
  27          float Square=0.00;      //面积 单位：M^2
  28          float D=0.00;         //直径 单位：M
  29          float Volume=0.00;          //气溶胶体积 单位：M^3
  30          
  31          
  32          u8 last_page;
  33          //放在主函数里循环执行当前页面的程序
  34          void ReadCurrentPage_run()    
  35          {
  36   1      
  37   1        
  38   1        ReadDGUS(0x14,(uint8_t *)&CurrentPageNum,sizeof(CurrentPageNum));
  39   1        switch(CurrentPageNum[1])
  40   1        {
  41   2          case Page_home: 
  42   2          {
  43   3            last_page = CurrentPageNum[1];
  44   3            current_st = 0x01;
  45   3            break;
  46   3          }
  47   2          
  48   2          case Page_qirongjiao:
  49   2          {
  50   3            
  51   3            
  52   3          //  QRJ_prepare();
  53   3            
  54   3            QRJ_Home();
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 2   

  55   3            Prepare_qrj_zx_qy();
  56   3            
  57   3            break;
  58   3          }
  59   2            
  60   2          case Page_zhongxin:
  61   2          {
  62   3            
  63   3            Prepare_qrj_zx_qy();      
  64   3            
  65   3            
  66   3            break;
  67   3          }
  68   2          
  69   2          case Page_quyu:
  70   2          {
  71   3            
  72   3            Prepare_qrj_zx_qy();
  73   3            
  74   3            break;
  75   3          }
  76   2          
  77   2              
  78   2          case Page_chengxuhua:
  79   2          {
  80   3      
  81   3            break;
  82   3          }
  83   2          
  84   2              
  85   2          case Page_zhiliao:
  86   2          {
  87   3            break;
  88   3          }
  89   2          
  90   2              
  91   2          case Page_shoudong:
  92   2          {   
  93   3      
  94   3            break;
  95   3          }
  96   2                
  97   2          case Page_lianji:
  98   2          {
  99   3        
 100   3            break;
 101   3          }
 102   2          
 103   2              
 104   2          case Page_shezhi:
 105   2          {
 106   3      
 107   3            break;
 108   3          }
 109   2          
 110   2          case Page_chengxuhua_JUMP:
 111   2          {
 112   3            
 113   3            break;
 114   3          }
 115   2              
 116   2            case Page_zhiliao_JUMP:
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 3   

 117   2          {
 118   3            break;
 119   3          }
 120   2          default:
 121   2          {
 122   3            
 123   3            break;
 124   3          }
 125   2          
 126   2        }
 127   1        
 128   1      }
 129          
 130          
 131          
 132          
 133          
 134          
 135          //void S_D_Surfaces_All()
 136          //{
 137          
 138          //  L_m =  (float)(L_int/1000.000)+zhongxin_35mm;
 139          //  if(W_S[0]==2)//zx
 140          //  {
 141          //  D = Tan_zhongxin*2*L_m;
 142          //  Square  = (float)(pow(L_m*Tan_zhongxin,2)*pai); 
 143          //  }
 144          //  else 
 145          //  {
 146          //  D = Tanx*2*L_m;
 147          //  Square  = (float)(pow(L_m*Tanx,2)*pai); 
 148          //  }
 149          //  Volume  = Square*L_m/3.00;
 150          //}
 151          
 152          
 153          
 154          /**************************************************
 155          距离 换算 为功率大小
 156          形参为毫米
 157          *******************************************************/
 158          //double change_P_uW=0.0; //lg change_P_uW_doing
 159          double change_P_uW_doing=0.0; //根据距离在推出的功率
 160          //double change_P_mW_First=0.0;
 161          
 162          void L_mm_TO_P_uw(u16 L_mm_TO_P,u8 current_page)    //形式参数毫米
 163          {
 164   1        u8 L_mm_TO_P_uw_FLAG=0;
 165   1        double BEISHU=0.00000;
 166   1        double L_CM;
 167   1        double mihanshu=0.0;
 168   1        
 169   1        
 170   1        L_CM=L_mm_TO_P/10;
 171   1        
 172   1        if(L_CM<=10&& L_CM>=5) L_mm_TO_P_uw_FLAG=1;
 173   1          else  if(L_CM<=20&& L_CM>10) L_mm_TO_P_uw_FLAG=2;
 174   1            else  if(L_CM<=100&& L_CM>20) L_mm_TO_P_uw_FLAG=3;
 175   1            else  if(L_CM<=300&& L_CM>100) L_mm_TO_P_uw_FLAG=4;
 176   1              else L_mm_TO_P_uw_FLAG=5;
 177   1        
 178   1        /***66300.18x^-1.86****/
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 4   

 179   1        switch(L_mm_TO_P_uw_FLAG)
 180   1        {
 181   2          case 1:
 182   2          {
 183   3            mihanshu = pow((double)(L_CM),-1.6);
 184   3            BEISHU = 36527.86*mihanshu;
 185   3            change_P_uW_doing=BEISHU;
 186   3            break;
 187   3          }
 188   2          
 189   2          
 190   2              case 2:
 191   2          {
 192   3            mihanshu = pow((double)(L_CM),-1.85);
 193   3            BEISHU = 65617.44*mihanshu;
 194   3            change_P_uW_doing=BEISHU;
 195   3            break;
 196   3          }
 197   2          
 198   2              case 3:
 199   2          {
 200   3            mihanshu = pow((double)(L_CM),-1.81);
 201   3            BEISHU = 57622.25*mihanshu;
 202   3            change_P_uW_doing=BEISHU;
 203   3            break;
 204   3          }
 205   2          
 206   2              case 4:
 207   2          {
 208   3            mihanshu = pow((double)(L_CM),-2);
 209   3            BEISHU = 139224.07*mihanshu;
 210   3            change_P_uW_doing=BEISHU;
 211   3            break;
 212   3          }
 213   2              
 214   2          default:
 215   2          {
 216   3            L_mm_TO_P_uw_FLAG=0x0a;
 217   3          }
 218   2        }
 219   1        
 220   1        if(Page_qirongjiao==current_page || Page_quyu==current_page)
 221   1        {
 222   2          change_P_uW_doing=change_P_uW_doing*0.6;  //气溶胶和区域需要乘0.6
 223   2        }
 224   1        //if(W_S[0]!=2&&MODE==1)change_P_mW_doing=change_P_mW_doing*0.6;  //气溶胶和区域需要乘0.6
 225   1      //  change_P_mW_First=change_P_mW_doing/1000;   //uw变mw
 226   1      //  change_P_uW=log10(change_P_uW_doing); //用在后期画图判断的时候
 227   1      //  P_FINISH=change_P_mW_First;//uw变mw
 228   1      
 229   1      }
 230          
 231          
 232          
 233          
 234          u16 baifenbi_T=0;
 235          //距离、功率、体积、直径、面积
 236          void Prepare_qrj_zx_qy()  //一直运行的 无论哪个状态适用与前三个模式
 237          {
 238   1      
 239   1        
 240   1            L_mm_TO_P_uw(L_int,CurrentPageNum[1]);  //根据距离得到功率 
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 5   

 241   1            WriteDGUS(0x2600,(uint8_t *)&change_P_uW_doing,sizeof(change_P_uW_doing));    /*********功率*************
             -***/
 242   1            L_M = (float)(L_int/1000.00f);  //m数据/*********距离****************/
 243   1              
 244   1        if(CurrentPageNum[1]==Page_qirongjiao)
 245   1        {
 246   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 247   2            D = Tanx*2*L_m_D_V_S;
 248   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 249   2            Volume  = Square*L_m_D_V_S/3.00;
 250   2            WriteDGUS(0x2850,(uint8_t *)&(Volume),sizeof(Volume));  //气溶胶为体积
 251   2          
 252   2              //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 253   2        }
 254   1        else if(CurrentPageNum[1]==Page_zhongxin)
 255   1        {
 256   2                
 257   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 258   2            D = Tan_zhongxin*2*L_m_D_V_S;
 259   2            Square  = (float)(pow(L_m_D_V_S*Tan_zhongxin,2)*pai); 
 260   2            
 261   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 262   2          
 263   2            //        baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 264   2        }
 265   1        else if(CurrentPageNum[1]==Page_quyu)
 266   1        {
 267   2            L_m_D_V_S =  (float)(L_int/1000.000)+zhongxin_35mm;
 268   2            D = Tanx*2*L_m_D_V_S;
 269   2            Square  = (float)(pow(L_m_D_V_S*Tanx,2)*pai); 
 270   2            
 271   2            WriteDGUS(0x2850,(uint8_t *)&(Square),sizeof(Square));//面积  
 272   2          
 273   2                  //  baifenbi_T = ((mJ_doing*1000.00) / qirongjiao_j ) ;
 274   2        }
 275   1        
 276   1            WriteDGUS(0x2500, (uint8_t *)&L_M,sizeof(L_M)); 
 277   1            WriteDGUS(0x2840,(uint8_t *)&(D),sizeof(D));      //直径
 278   1        
 279   1        
 280   1      
 281   1            //WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 282   1      }
 283          
 284          
 285          
 286          
 287          float mJ_doing=0.0; //已照射的mj
 288          u32 time_100ms=0; //100ms的中断标志位
 289          u32 time_doing=0;//已经照射的时间
 290          //气溶胶、中心、区域 run函数
 291          
 292          void QRJ_ZX__QY_RUN()           //放在QRJ_run
 293          {
 294   1        u16 ResTime_sec;
 295   1        u16 ResTime_min;  
 296   1        static u32 t_1=0;
 297   1      if(time_100ms)      //100ms老是不好用解决方式 ： 定时器里设定100ms而不是1ms
 298   1      {
 299   2          time_100ms=0;
 300   2          //uJ_doing+=143;
 301   2          //mJ_doing=mJ_doing+(change_P_uW_doing/1000); //每0.1秒累加当前的mj辐射量
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 6   

 302   2          mJ_doing=mJ_doing+(change_P_uW_doing/1000.0f);  
 303   2          t_1++;
 304   2          if(t_1>=10) ////1s
 305   2          {
 306   3            t_1=0;
 307   3        //    mJ_doing=mJ_doing+(change_P_uW_doing/1000);
 308   3          //  time_100ms=0;
 309   3            time_doing++; //工作时长
 310   3            
 311   3            //TIME_static--;
 312   3        
 313   3          
 314   3      
 315   3          }
 316   2          
 317   2          QRJ_mm_to_s(L_int); //根据距离和功率得到时间
 318   2        
 319   2          ResTime_min=(u16)(TIME_static)/60;
 320   2          ResTime_sec=(u16)(TIME_static)%60;
 321   2      
 322   2          WriteDGUS(0x2800,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***剩余时间*分钟****/
 323   2          WriteDGUS(0x2805,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***剩余时间*秒****/
 324   2          
 325   2          //总时间 等于剩余时间加上已经工作的时间
 326   2          ResTime_min=(u16)(TIME_static+time_doing)/60;
 327   2          ResTime_sec=(u16)(TIME_static+time_doing)%60;
 328   2          WriteDGUS(0x2825,(uint8_t *)&ResTime_sec,sizeof(ResTime_sec));    /***总时间*秒****/
 329   2          WriteDGUS(0x2820,(uint8_t *)&ResTime_min,sizeof(ResTime_min));    /***总时间*分钟****/
 330   2          
 331   2          
 332   2          
 333   2          
 334   2          WriteDGUS(0x2700,(uint8_t *)&mJ_doing,sizeof(mJ_doing));    /***辐射量mj***/
 335   2          
 336   2          if(mJ_doing*1000.0f > qirongjiao_j){mJ_doing=qirongjiao_j/1000.0f;} //防止照射过多
 337   2          baifenbi_T = ((mJ_doing*1000.00*100) / qirongjiao_j ) ;
 338   2          WriteDGUS(0x2830,(uint8_t *)&(baifenbi_T),sizeof(baifenbi_T));    //百分比
 339   2          
 340   2        }
 341   1        
 342   1      
 343   1      
 344   1        
 345   1      }
 346          
 347          
 348          
 349          
 350          
 351          
 352          
 353          
 354          
 355          
 356          /********************************************读取当前页面并锁定*************************************/
 357          /****************************************
 358          滑动页面 00
 359          返回键 01
 360          增量调制（log值） 04
 361          *****************************************/
 362          
 363          void Lock_current_page_zengliang(u8 id_1,u8 daima_1);
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 7   

 364          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1);
 365          
 366          static struct{
 367            u16 Head ;
 368            u8 page_0;//固定为0x00
 369            u8 page_1;
 370            
 371            u8 touch_id;
 372            u8 touch_daima;
 373          
 374            u16 mode;
 375          
 376          }PageLock;
 377          
 378          
 379          void PageLock_Init()  //初始化
 380          {
 381   1        PageLock.Head=0x5aa5;
 382   1        PageLock.page_0=0x00;
 383   1      }
 384          
 385          
 386          
 387            u16 Current_Lock=0;   //0表示未上锁
 388            u16 mode_close = 0x0000;
 389            u16 mode_open = 0x0001;
 390          
 391            u16 ControlPageLock_Adress = 0xb0;
 392          
 393            u8 PageSliding = 0x0b;
 394            u8 Returnkey = 0x05;
 395            //u8 zengliang=0x03;
 396          
 397          
 398          void Lock_current_page()
 399          {
 400   1        if(CurrentPageNum[1] == Page_qirongjiao)
 401   1        {
 402   2          Lock_current_page_zengliang(0x04,0x02); //锁住增量调制 log值
 403   2          //WriteDGUS(0x5105,(uint8_t *)&(icon[0]),sizeof(icon[0]));//隐藏图标
 404   2        }
 405   1      //  if(MODE==1)       
 406   1      //  {
 407   1      //        if(W_S[0]==1)//气溶胶
 408   1      //    {
 409   1      //    WriteDGUS(0x5105,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 410   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 411   1      //    }
 412   1      //    else if(W_S[0]==2)//zx
 413   1      //    {
 414   1      //    WriteDGUS(0x5106,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 415   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 416   1      //    }
 417   1      //        else if(W_S[0]==3)//qy
 418   1      //    {
 419   1      //          WriteDGUS(0x5107,(uint8_t *)&(icon_exit),sizeof(icon_exit));
 420   1      //    Lock_current_page_zengliang(0x04,0x02,0x05,0x02);
 421   1      
 422   1      //    }
 423   1      //  }
 424   1        
 425   1        //ReadDGUS(ReadCurrentPage_Adress,(uint8_t *)&Current_page,sizeof(Current_page)); //返回值 00 06
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 8   

 426   1        PageLock.page_1=CurrentPageNum[1];
 427   1        PageLock.touch_id=0x00;     //滑动翻页设置为 0位置
 428   1        PageLock.touch_daima=PageSliding;
 429   1        PageLock.mode=mode_close;
 430   1      
 431   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 432   1      //  while(1)
 433   1      //  {
 434   1      //    ReadDGUS(ControlPageLock_Adress,(uint8_t *)&Current_page,sizeof(Current_page));
 435   1      //    if(Current_page[0]==Current_page[1])
 436   1      //    {break;}
 437   1      //  }
 438   1        
 439   1        PageLock.touch_id=0x01;   //返回键 设置为1位置
 440   1        PageLock.touch_daima=Returnkey;
 441   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 442   1      
 443   1        Current_Lock=1;
 444   1      
 445   1      }
 446          
 447          void Unlock_current_page()
 448          {
 449   1      
 450   1        if(Current_Lock==1) //先判断是否上锁
 451   1        {
 452   2            if(CurrentPageNum[1] == Page_qirongjiao)
 453   2          {
 454   3          //WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 455   3            Unlock_current_page_zengliang(0x04,0x02);
 456   3          }
 457   2      //      if(MODE==1)       
 458   2      //  {
 459   2      //    if(W_S[0]==1)//气溶胶
 460   2      //    {
 461   2      //    WriteDGUS(0x5105,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 462   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 463   2      //    }
 464   2      //    else if(W_S[0]==2)//zx
 465   2      //    {
 466   2      //          WriteDGUS(0x5106,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 467   2      //        Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 468   2      
 469   2      //    }
 470   2      //        else if(W_S[0]==3)//qy
 471   2      //    {
 472   2      //    WriteDGUS(0x5107,(uint8_t *)&(icon_attend),sizeof(icon_attend));
 473   2      //    Unlock_current_page_zengliang(0x04,0x02,0x05,0x02);
 474   2      //    }
 475   2      //  }
 476   2        
 477   2      
 478   2            PageLock.page_1=CurrentPageNum[1];  //解锁返回键
 479   2            PageLock.mode=mode_open;
 480   2            PageLock.touch_daima=Returnkey; 
 481   2            PageLock.touch_id=0x01; 
 482   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 483   2        
 484   2            PageLock.touch_daima=PageSliding;   //解锁滑动模块
 485   2            PageLock.touch_id=0x00;   
 486   2            WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 487   2      
C51 COMPILER V9.59.0.0   HOME                                                              04/30/2025 12:14:31 PAGE 9   

 488   2            Current_Lock=0;
 489   2      
 490   2        }
 491   1        
 492   1      
 493   1      }
 494          
 495          //锁住增量 
 496          void Lock_current_page_zengliang(u8 id_1,u8 daima_1)
 497          {
 498   1      
 499   1        PageLock.page_1=CurrentPageNum[1];
 500   1        PageLock.touch_id=id_1;     //调节log mj的触控增量锁住
 501   1        PageLock.touch_daima=daima_1;
 502   1        PageLock.mode=mode_close;
 503   1      
 504   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 505   1      
 506   1      }
 507          
 508          
 509          
 510          //解锁增量
 511          void Unlock_current_page_zengliang(u8 id_1,u8 daima_1)
 512          {
 513   1        
 514   1        PageLock.page_1=CurrentPageNum[1];
 515   1        PageLock.touch_id=id_1;   //返回键 设置为1位置
 516   1        PageLock.touch_daima=daima_1;
 517   1        PageLock.mode=mode_open;
 518   1        WriteDGUS(ControlPageLock_Adress, (uint8_t *)&PageLock,sizeof(PageLock)); 
 519   1        
 520   1      }
 521          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2397    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     79      18
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
